var $protobuf = window.protobuf;
$protobuf.roots.default=window;
// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.com = (function() {

    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.aoo = (function() {

        /**
         * Namespace aoo.
         * @memberof com
         * @namespace
         */
        var aoo = {};

        aoo.chess = (function() {

            /**
             * Namespace chess.
             * @memberof com.aoo
             * @namespace
             */
            var chess = {};

            chess.comms = (function() {

                /**
                 * Namespace comms.
                 * @memberof com.aoo.chess
                 * @namespace
                 */
                var comms = {};

                comms.protocol = (function() {

                    /**
                     * Namespace protocol.
                     * @memberof com.aoo.chess.comms
                     * @namespace
                     */
                    var protocol = {};

                    protocol.proto = (function() {

                        /**
                         * Namespace proto.
                         * @memberof com.aoo.chess.comms.protocol
                         * @namespace
                         */
                        var proto = {};

                        proto.message = (function() {

                            /**
                             * Namespace message.
                             * @memberof com.aoo.chess.comms.protocol.proto
                             * @namespace
                             */
                            var message = {};

                            message.PushMessage = (function() {

                                /**
                                 * Properties of a PushMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPushMessage
                                 * @property {Uint8Array|null} [childMessage] PushMessage childMessage
                                 * @property {number|null} [mainCmd] PushMessage mainCmd
                                 * @property {number|null} [subCmd] PushMessage subCmd
                                 */

                                /**
                                 * Constructs a new PushMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PushMessage.
                                 * @implements IPushMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPushMessage=} [properties] Properties to set
                                 */
                                function PushMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PushMessage childMessage.
                                 * @member {Uint8Array} childMessage
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @instance
                                 */
                                PushMessage.prototype.childMessage = $util.newBuffer([]);

                                /**
                                 * PushMessage mainCmd.
                                 * @member {number} mainCmd
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @instance
                                 */
                                PushMessage.prototype.mainCmd = 0;

                                /**
                                 * PushMessage subCmd.
                                 * @member {number} subCmd
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @instance
                                 */
                                PushMessage.prototype.subCmd = 0;

                                /**
                                 * Creates a new PushMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPushMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PushMessage} PushMessage instance
                                 */
                                PushMessage.create = function create(properties) {
                                    return new PushMessage(properties);
                                };

                                /**
                                 * Encodes the specified PushMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PushMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPushMessage} message PushMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PushMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.childMessage != null && message.hasOwnProperty("childMessage"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.childMessage);
                                    if (message.mainCmd != null && message.hasOwnProperty("mainCmd"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mainCmd);
                                    if (message.subCmd != null && message.hasOwnProperty("subCmd"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.subCmd);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PushMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PushMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPushMessage} message PushMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PushMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PushMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PushMessage} PushMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PushMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PushMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.childMessage = reader.bytes();
                                            break;
                                        case 2:
                                            message.mainCmd = reader.int32();
                                            break;
                                        case 3:
                                            message.subCmd = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PushMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PushMessage} PushMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PushMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PushMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PushMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.childMessage != null && message.hasOwnProperty("childMessage"))
                                        if (!(message.childMessage && typeof message.childMessage.length === "number" || $util.isString(message.childMessage)))
                                            return "childMessage: buffer expected";
                                    if (message.mainCmd != null && message.hasOwnProperty("mainCmd"))
                                        if (!$util.isInteger(message.mainCmd))
                                            return "mainCmd: integer expected";
                                    if (message.subCmd != null && message.hasOwnProperty("subCmd"))
                                        if (!$util.isInteger(message.subCmd))
                                            return "subCmd: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PushMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PushMessage} PushMessage
                                 */
                                PushMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PushMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PushMessage();
                                    if (object.childMessage != null)
                                        if (typeof object.childMessage === "string")
                                            $util.base64.decode(object.childMessage, message.childMessage = $util.newBuffer($util.base64.length(object.childMessage)), 0);
                                        else if (object.childMessage.length)
                                            message.childMessage = object.childMessage;
                                    if (object.mainCmd != null)
                                        message.mainCmd = object.mainCmd | 0;
                                    if (object.subCmd != null)
                                        message.subCmd = object.subCmd | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PushMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PushMessage} message PushMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PushMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        if (options.bytes === String)
                                            object.childMessage = "";
                                        else {
                                            object.childMessage = [];
                                            if (options.bytes !== Array)
                                                object.childMessage = $util.newBuffer(object.childMessage);
                                        }
                                        object.mainCmd = 0;
                                        object.subCmd = 0;
                                    }
                                    if (message.childMessage != null && message.hasOwnProperty("childMessage"))
                                        object.childMessage = options.bytes === String ? $util.base64.encode(message.childMessage, 0, message.childMessage.length) : options.bytes === Array ? Array.prototype.slice.call(message.childMessage) : message.childMessage;
                                    if (message.mainCmd != null && message.hasOwnProperty("mainCmd"))
                                        object.mainCmd = message.mainCmd;
                                    if (message.subCmd != null && message.hasOwnProperty("subCmd"))
                                        object.subCmd = message.subCmd;
                                    return object;
                                };

                                /**
                                 * Converts this PushMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PushMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PushMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PushMessage;
                            })();

                            message.ServerPushMessage = (function() {

                                /**
                                 * Properties of a ServerPushMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IServerPushMessage
                                 * @property {Array.<number>|null} [players] ServerPushMessage players
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IPushMessage|null} [msg] ServerPushMessage msg
                                 */

                                /**
                                 * Constructs a new ServerPushMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ServerPushMessage.
                                 * @implements IServerPushMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPushMessage=} [properties] Properties to set
                                 */
                                function ServerPushMessage(properties) {
                                    this.players = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ServerPushMessage players.
                                 * @member {Array.<number>} players
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @instance
                                 */
                                ServerPushMessage.prototype.players = $util.emptyArray;

                                /**
                                 * ServerPushMessage msg.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IPushMessage|null|undefined} msg
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @instance
                                 */
                                ServerPushMessage.prototype.msg = null;

                                /**
                                 * Creates a new ServerPushMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPushMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPushMessage} ServerPushMessage instance
                                 */
                                ServerPushMessage.create = function create(properties) {
                                    return new ServerPushMessage(properties);
                                };

                                /**
                                 * Encodes the specified ServerPushMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerPushMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPushMessage} message ServerPushMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerPushMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.players != null && message.players.length) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                        for (var i = 0; i < message.players.length; ++i)
                                            writer.int32(message.players[i]);
                                        writer.ldelim();
                                    }
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.PushMessage.encode(message.msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerPushMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerPushMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPushMessage} message ServerPushMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerPushMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerPushMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPushMessage} ServerPushMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerPushMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerPushMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.players && message.players.length))
                                                message.players = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.players.push(reader.int32());
                                            } else
                                                message.players.push(reader.int32());
                                            break;
                                        case 2:
                                            message.msg = $root.com.aoo.chess.comms.protocol.proto.message.PushMessage.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerPushMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPushMessage} ServerPushMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerPushMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerPushMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerPushMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.players != null && message.hasOwnProperty("players")) {
                                        if (!Array.isArray(message.players))
                                            return "players: array expected";
                                        for (var i = 0; i < message.players.length; ++i)
                                            if (!$util.isInteger(message.players[i]))
                                                return "players: integer[] expected";
                                    }
                                    if (message.msg != null && message.hasOwnProperty("msg")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.PushMessage.verify(message.msg);
                                        if (error)
                                            return "msg." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ServerPushMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPushMessage} ServerPushMessage
                                 */
                                ServerPushMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ServerPushMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerPushMessage();
                                    if (object.players) {
                                        if (!Array.isArray(object.players))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerPushMessage.players: array expected");
                                        message.players = [];
                                        for (var i = 0; i < object.players.length; ++i)
                                            message.players[i] = object.players[i] | 0;
                                    }
                                    if (object.msg != null) {
                                        if (typeof object.msg !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerPushMessage.msg: object expected");
                                        message.msg = $root.com.aoo.chess.comms.protocol.proto.message.PushMessage.fromObject(object.msg);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerPushMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ServerPushMessage} message ServerPushMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerPushMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.players = [];
                                    if (options.defaults)
                                        object.msg = null;
                                    if (message.players && message.players.length) {
                                        object.players = [];
                                        for (var j = 0; j < message.players.length; ++j)
                                            object.players[j] = message.players[j];
                                    }
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        object.msg = $root.com.aoo.chess.comms.protocol.proto.message.PushMessage.toObject(message.msg, options);
                                    return object;
                                };

                                /**
                                 * Converts this ServerPushMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPushMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerPushMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ServerPushMessage;
                            })();

                            message.ReloadStaticData = (function() {

                                /**
                                 * Properties of a ReloadStaticData.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IReloadStaticData
                                 * @property {string|null} [cmd] ReloadStaticData cmd
                                 */

                                /**
                                 * Constructs a new ReloadStaticData.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ReloadStaticData.
                                 * @implements IReloadStaticData
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticData=} [properties] Properties to set
                                 */
                                function ReloadStaticData(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ReloadStaticData cmd.
                                 * @member {string} cmd
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @instance
                                 */
                                ReloadStaticData.prototype.cmd = "";

                                /**
                                 * Creates a new ReloadStaticData instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticData=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticData} ReloadStaticData instance
                                 */
                                ReloadStaticData.create = function create(properties) {
                                    return new ReloadStaticData(properties);
                                };

                                /**
                                 * Encodes the specified ReloadStaticData message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticData.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticData} message ReloadStaticData message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticData.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.cmd != null && message.hasOwnProperty("cmd"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cmd);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ReloadStaticData message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticData.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticData} message ReloadStaticData message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticData.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ReloadStaticData message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticData} ReloadStaticData
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticData.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticData();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.cmd = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ReloadStaticData message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticData} ReloadStaticData
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticData.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ReloadStaticData message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ReloadStaticData.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.cmd != null && message.hasOwnProperty("cmd"))
                                        if (!$util.isString(message.cmd))
                                            return "cmd: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a ReloadStaticData message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticData} ReloadStaticData
                                 */
                                ReloadStaticData.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticData)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticData();
                                    if (object.cmd != null)
                                        message.cmd = String(object.cmd);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ReloadStaticData message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ReloadStaticData} message ReloadStaticData
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ReloadStaticData.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.cmd = "";
                                    if (message.cmd != null && message.hasOwnProperty("cmd"))
                                        object.cmd = message.cmd;
                                    return object;
                                };

                                /**
                                 * Converts this ReloadStaticData to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticData
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ReloadStaticData.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ReloadStaticData;
                            })();

                            message.ReloadStaticDataResults = (function() {

                                /**
                                 * Properties of a ReloadStaticDataResults.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IReloadStaticDataResults
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult>|null} [results] ReloadStaticDataResults results
                                 */

                                /**
                                 * Constructs a new ReloadStaticDataResults.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ReloadStaticDataResults.
                                 * @implements IReloadStaticDataResults
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResults=} [properties] Properties to set
                                 */
                                function ReloadStaticDataResults(properties) {
                                    this.results = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ReloadStaticDataResults results.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult>} results
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @instance
                                 */
                                ReloadStaticDataResults.prototype.results = $util.emptyArray;

                                /**
                                 * Creates a new ReloadStaticDataResults instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResults=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults} ReloadStaticDataResults instance
                                 */
                                ReloadStaticDataResults.create = function create(properties) {
                                    return new ReloadStaticDataResults(properties);
                                };

                                /**
                                 * Encodes the specified ReloadStaticDataResults message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResults} message ReloadStaticDataResults message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticDataResults.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.results != null && message.results.length)
                                        for (var i = 0; i < message.results.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ReloadStaticDataResults message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResults} message ReloadStaticDataResults message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticDataResults.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ReloadStaticDataResults message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults} ReloadStaticDataResults
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticDataResults.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.results && message.results.length))
                                                message.results = [];
                                            message.results.push($root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ReloadStaticDataResults message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults} ReloadStaticDataResults
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticDataResults.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ReloadStaticDataResults message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ReloadStaticDataResults.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.results != null && message.hasOwnProperty("results")) {
                                        if (!Array.isArray(message.results))
                                            return "results: array expected";
                                        for (var i = 0; i < message.results.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.verify(message.results[i]);
                                            if (error)
                                                return "results." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ReloadStaticDataResults message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults} ReloadStaticDataResults
                                 */
                                ReloadStaticDataResults.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults();
                                    if (object.results) {
                                        if (!Array.isArray(object.results))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults.results: array expected");
                                        message.results = [];
                                        for (var i = 0; i < object.results.length; ++i) {
                                            if (typeof object.results[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults.results: object expected");
                                            message.results[i] = $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.fromObject(object.results[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ReloadStaticDataResults message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults} message ReloadStaticDataResults
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ReloadStaticDataResults.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.results = [];
                                    if (message.results && message.results.length) {
                                        object.results = [];
                                        for (var j = 0; j < message.results.length; ++j)
                                            object.results[j] = $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.toObject(message.results[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ReloadStaticDataResults to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResults
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ReloadStaticDataResults.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ReloadStaticDataResults;
                            })();

                            message.ReloadStaticDataResult = (function() {

                                /**
                                 * Properties of a ReloadStaticDataResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IReloadStaticDataResult
                                 * @property {number|null} [serverId] ReloadStaticDataResult serverId
                                 * @property {number|null} [serverType] ReloadStaticDataResult serverType
                                 * @property {boolean|null} [sucess] ReloadStaticDataResult sucess
                                 */

                                /**
                                 * Constructs a new ReloadStaticDataResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ReloadStaticDataResult.
                                 * @implements IReloadStaticDataResult
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult=} [properties] Properties to set
                                 */
                                function ReloadStaticDataResult(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ReloadStaticDataResult serverId.
                                 * @member {number} serverId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @instance
                                 */
                                ReloadStaticDataResult.prototype.serverId = 0;

                                /**
                                 * ReloadStaticDataResult serverType.
                                 * @member {number} serverType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @instance
                                 */
                                ReloadStaticDataResult.prototype.serverType = 0;

                                /**
                                 * ReloadStaticDataResult sucess.
                                 * @member {boolean} sucess
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @instance
                                 */
                                ReloadStaticDataResult.prototype.sucess = false;

                                /**
                                 * Creates a new ReloadStaticDataResult instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult} ReloadStaticDataResult instance
                                 */
                                ReloadStaticDataResult.create = function create(properties) {
                                    return new ReloadStaticDataResult(properties);
                                };

                                /**
                                 * Encodes the specified ReloadStaticDataResult message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult} message ReloadStaticDataResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticDataResult.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.serverId);
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.serverType);
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sucess);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ReloadStaticDataResult message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReloadStaticDataResult} message ReloadStaticDataResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReloadStaticDataResult.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ReloadStaticDataResult message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult} ReloadStaticDataResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticDataResult.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.serverId = reader.int32();
                                            break;
                                        case 2:
                                            message.serverType = reader.int32();
                                            break;
                                        case 3:
                                            message.sucess = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ReloadStaticDataResult message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult} ReloadStaticDataResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReloadStaticDataResult.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ReloadStaticDataResult message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ReloadStaticDataResult.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        if (!$util.isInteger(message.serverId))
                                            return "serverId: integer expected";
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        if (!$util.isInteger(message.serverType))
                                            return "serverType: integer expected";
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        if (typeof message.sucess !== "boolean")
                                            return "sucess: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a ReloadStaticDataResult message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult} ReloadStaticDataResult
                                 */
                                ReloadStaticDataResult.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult();
                                    if (object.serverId != null)
                                        message.serverId = object.serverId | 0;
                                    if (object.serverType != null)
                                        message.serverType = object.serverType | 0;
                                    if (object.sucess != null)
                                        message.sucess = Boolean(object.sucess);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ReloadStaticDataResult message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult} message ReloadStaticDataResult
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ReloadStaticDataResult.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.serverId = 0;
                                        object.serverType = 0;
                                        object.sucess = false;
                                    }
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        object.serverId = message.serverId;
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        object.serverType = message.serverType;
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        object.sucess = message.sucess;
                                    return object;
                                };

                                /**
                                 * Converts this ReloadStaticDataResult to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReloadStaticDataResult
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ReloadStaticDataResult.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ReloadStaticDataResult;
                            })();

                            message.BrZhajinhuaRoomInfo = (function() {

                                /**
                                 * Properties of a BrZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaRoomInfo
                                 * @property {number|null} [playerSize] BrZhajinhuaRoomInfo playerSize
                                 * @property {number|null} [state] BrZhajinhuaRoomInfo state
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo>|null} [infos] BrZhajinhuaRoomInfo infos
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo>|null} [myBetInfo] BrZhajinhuaRoomInfo myBetInfo
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>|null} [ranks] BrZhajinhuaRoomInfo ranks
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo>|null} [historyInofs] BrZhajinhuaRoomInfo historyInofs
                                 * @property {number|null} [time] BrZhajinhuaRoomInfo time
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards>|null} [cards] BrZhajinhuaRoomInfo cards
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaRoomInfo.
                                 * @implements IBrZhajinhuaRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRoomInfo=} [properties] Properties to set
                                 */
                                function BrZhajinhuaRoomInfo(properties) {
                                    this.infos = [];
                                    this.myBetInfo = [];
                                    this.ranks = [];
                                    this.historyInofs = [];
                                    this.cards = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaRoomInfo playerSize.
                                 * @member {number} playerSize
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.playerSize = 0;

                                /**
                                 * BrZhajinhuaRoomInfo state.
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.state = 0;

                                /**
                                 * BrZhajinhuaRoomInfo infos.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.infos = $util.emptyArray;

                                /**
                                 * BrZhajinhuaRoomInfo myBetInfo.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo>} myBetInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.myBetInfo = $util.emptyArray;

                                /**
                                 * BrZhajinhuaRoomInfo ranks.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>} ranks
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.ranks = $util.emptyArray;

                                /**
                                 * BrZhajinhuaRoomInfo historyInofs.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo>} historyInofs
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.historyInofs = $util.emptyArray;

                                /**
                                 * BrZhajinhuaRoomInfo time.
                                 * @member {number} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.time = 0;

                                /**
                                 * BrZhajinhuaRoomInfo cards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards>} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                BrZhajinhuaRoomInfo.prototype.cards = $util.emptyArray;

                                /**
                                 * Creates a new BrZhajinhuaRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo} BrZhajinhuaRoomInfo instance
                                 */
                                BrZhajinhuaRoomInfo.create = function create(properties) {
                                    return new BrZhajinhuaRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRoomInfo} message BrZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerSize);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.encode(message.infos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.myBetInfo != null && message.myBetInfo.length)
                                        for (var i = 0; i < message.myBetInfo.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.encode(message.myBetInfo[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.ranks != null && message.ranks.length)
                                        for (var i = 0; i < message.ranks.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.encode(message.ranks[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    if (message.historyInofs != null && message.historyInofs.length)
                                        for (var i = 0; i < message.historyInofs.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.encode(message.historyInofs[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.time);
                                    if (message.cards != null && message.cards.length)
                                        for (var i = 0; i < message.cards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.encode(message.cards[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRoomInfo} message BrZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo} BrZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerSize = reader.int32();
                                            break;
                                        case 2:
                                            message.state = reader.int32();
                                            break;
                                        case 3:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 4:
                                            if (!(message.myBetInfo && message.myBetInfo.length))
                                                message.myBetInfo = [];
                                            message.myBetInfo.push($root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            if (!(message.ranks && message.ranks.length))
                                                message.ranks = [];
                                            message.ranks.push($root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 6:
                                            if (!(message.historyInofs && message.historyInofs.length))
                                                message.historyInofs = [];
                                            message.historyInofs.push($root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 7:
                                            message.time = reader.int32();
                                            break;
                                        case 8:
                                            if (!(message.cards && message.cards.length))
                                                message.cards = [];
                                            message.cards.push($root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo} BrZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        if (!$util.isInteger(message.playerSize))
                                            return "playerSize: integer expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    if (message.myBetInfo != null && message.hasOwnProperty("myBetInfo")) {
                                        if (!Array.isArray(message.myBetInfo))
                                            return "myBetInfo: array expected";
                                        for (var i = 0; i < message.myBetInfo.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.verify(message.myBetInfo[i]);
                                            if (error)
                                                return "myBetInfo." + error;
                                        }
                                    }
                                    if (message.ranks != null && message.hasOwnProperty("ranks")) {
                                        if (!Array.isArray(message.ranks))
                                            return "ranks: array expected";
                                        for (var i = 0; i < message.ranks.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify(message.ranks[i]);
                                            if (error)
                                                return "ranks." + error;
                                        }
                                    }
                                    if (message.historyInofs != null && message.hasOwnProperty("historyInofs")) {
                                        if (!Array.isArray(message.historyInofs))
                                            return "historyInofs: array expected";
                                        for (var i = 0; i < message.historyInofs.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.verify(message.historyInofs[i]);
                                            if (error)
                                                return "historyInofs." + error;
                                        }
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time))
                                            return "time: integer expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        if (!Array.isArray(message.cards))
                                            return "cards: array expected";
                                        for (var i = 0; i < message.cards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify(message.cards[i]);
                                            if (error)
                                                return "cards." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo} BrZhajinhuaRoomInfo
                                 */
                                BrZhajinhuaRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo();
                                    if (object.playerSize != null)
                                        message.playerSize = object.playerSize | 0;
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.fromObject(object.infos[i]);
                                        }
                                    }
                                    if (object.myBetInfo) {
                                        if (!Array.isArray(object.myBetInfo))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.myBetInfo: array expected");
                                        message.myBetInfo = [];
                                        for (var i = 0; i < object.myBetInfo.length; ++i) {
                                            if (typeof object.myBetInfo[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.myBetInfo: object expected");
                                            message.myBetInfo[i] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.fromObject(object.myBetInfo[i]);
                                        }
                                    }
                                    if (object.ranks) {
                                        if (!Array.isArray(object.ranks))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.ranks: array expected");
                                        message.ranks = [];
                                        for (var i = 0; i < object.ranks.length; ++i) {
                                            if (typeof object.ranks[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.ranks: object expected");
                                            message.ranks[i] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.fromObject(object.ranks[i]);
                                        }
                                    }
                                    if (object.historyInofs) {
                                        if (!Array.isArray(object.historyInofs))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.historyInofs: array expected");
                                        message.historyInofs = [];
                                        for (var i = 0; i < object.historyInofs.length; ++i) {
                                            if (typeof object.historyInofs[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.historyInofs: object expected");
                                            message.historyInofs[i] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.fromObject(object.historyInofs[i]);
                                        }
                                    }
                                    if (object.time != null)
                                        message.time = object.time | 0;
                                    if (object.cards) {
                                        if (!Array.isArray(object.cards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.cards: array expected");
                                        message.cards = [];
                                        for (var i = 0; i < object.cards.length; ++i) {
                                            if (typeof object.cards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo.cards: object expected");
                                            message.cards[i] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.fromObject(object.cards[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo} message BrZhajinhuaRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.infos = [];
                                        object.myBetInfo = [];
                                        object.ranks = [];
                                        object.historyInofs = [];
                                        object.cards = [];
                                    }
                                    if (options.defaults) {
                                        object.playerSize = 0;
                                        object.state = 0;
                                        object.time = 0;
                                    }
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        object.playerSize = message.playerSize;
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.toObject(message.infos[j], options);
                                    }
                                    if (message.myBetInfo && message.myBetInfo.length) {
                                        object.myBetInfo = [];
                                        for (var j = 0; j < message.myBetInfo.length; ++j)
                                            object.myBetInfo[j] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.toObject(message.myBetInfo[j], options);
                                    }
                                    if (message.ranks && message.ranks.length) {
                                        object.ranks = [];
                                        for (var j = 0; j < message.ranks.length; ++j)
                                            object.ranks[j] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.toObject(message.ranks[j], options);
                                    }
                                    if (message.historyInofs && message.historyInofs.length) {
                                        object.historyInofs = [];
                                        for (var j = 0; j < message.historyInofs.length; ++j)
                                            object.historyInofs[j] = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.toObject(message.historyInofs[j], options);
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        object.time = message.time;
                                    if (message.cards && message.cards.length) {
                                        object.cards = [];
                                        for (var j = 0; j < message.cards.length; ++j)
                                            object.cards[j] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.toObject(message.cards[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaRoomInfo;
                            })();

                            message.BrZhajinhuaRankUpdate = (function() {

                                /**
                                 * Properties of a BrZhajinhuaRankUpdate.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaRankUpdate
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>|null} [ranks] BrZhajinhuaRankUpdate ranks
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaRankUpdate.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaRankUpdate.
                                 * @implements IBrZhajinhuaRankUpdate
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRankUpdate=} [properties] Properties to set
                                 */
                                function BrZhajinhuaRankUpdate(properties) {
                                    this.ranks = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaRankUpdate ranks.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>} ranks
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @instance
                                 */
                                BrZhajinhuaRankUpdate.prototype.ranks = $util.emptyArray;

                                /**
                                 * Creates a new BrZhajinhuaRankUpdate instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRankUpdate=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate} BrZhajinhuaRankUpdate instance
                                 */
                                BrZhajinhuaRankUpdate.create = function create(properties) {
                                    return new BrZhajinhuaRankUpdate(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaRankUpdate message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRankUpdate} message BrZhajinhuaRankUpdate message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaRankUpdate.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.ranks != null && message.ranks.length)
                                        for (var i = 0; i < message.ranks.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.encode(message.ranks[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaRankUpdate message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaRankUpdate} message BrZhajinhuaRankUpdate message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaRankUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaRankUpdate message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate} BrZhajinhuaRankUpdate
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaRankUpdate.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 5:
                                            if (!(message.ranks && message.ranks.length))
                                                message.ranks = [];
                                            message.ranks.push($root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaRankUpdate message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate} BrZhajinhuaRankUpdate
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaRankUpdate.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaRankUpdate message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaRankUpdate.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.ranks != null && message.hasOwnProperty("ranks")) {
                                        if (!Array.isArray(message.ranks))
                                            return "ranks: array expected";
                                        for (var i = 0; i < message.ranks.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify(message.ranks[i]);
                                            if (error)
                                                return "ranks." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaRankUpdate message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate} BrZhajinhuaRankUpdate
                                 */
                                BrZhajinhuaRankUpdate.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate();
                                    if (object.ranks) {
                                        if (!Array.isArray(object.ranks))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate.ranks: array expected");
                                        message.ranks = [];
                                        for (var i = 0; i < object.ranks.length; ++i) {
                                            if (typeof object.ranks[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate.ranks: object expected");
                                            message.ranks[i] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.fromObject(object.ranks[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaRankUpdate message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate} message BrZhajinhuaRankUpdate
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaRankUpdate.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.ranks = [];
                                    if (message.ranks && message.ranks.length) {
                                        object.ranks = [];
                                        for (var j = 0; j < message.ranks.length; ++j)
                                            object.ranks[j] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.toObject(message.ranks[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaRankUpdate to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaRankUpdate
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaRankUpdate.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaRankUpdate;
                            })();

                            message.BrZhajinhuaHistoryInfo = (function() {

                                /**
                                 * Properties of a BrZhajinhuaHistoryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaHistoryInfo
                                 * @property {Array.<boolean>|null} [win] BrZhajinhuaHistoryInfo win
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaHistoryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaHistoryInfo.
                                 * @implements IBrZhajinhuaHistoryInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo=} [properties] Properties to set
                                 */
                                function BrZhajinhuaHistoryInfo(properties) {
                                    this.win = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaHistoryInfo win.
                                 * @member {Array.<boolean>} win
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @instance
                                 */
                                BrZhajinhuaHistoryInfo.prototype.win = $util.emptyArray;

                                /**
                                 * Creates a new BrZhajinhuaHistoryInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo} BrZhajinhuaHistoryInfo instance
                                 */
                                BrZhajinhuaHistoryInfo.create = function create(properties) {
                                    return new BrZhajinhuaHistoryInfo(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaHistoryInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo} message BrZhajinhuaHistoryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaHistoryInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.win != null && message.win.length) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                        for (var i = 0; i < message.win.length; ++i)
                                            writer.bool(message.win[i]);
                                        writer.ldelim();
                                    }
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaHistoryInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaHistoryInfo} message BrZhajinhuaHistoryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaHistoryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaHistoryInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo} BrZhajinhuaHistoryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaHistoryInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.win && message.win.length))
                                                message.win = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.win.push(reader.bool());
                                            } else
                                                message.win.push(reader.bool());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaHistoryInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo} BrZhajinhuaHistoryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaHistoryInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaHistoryInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaHistoryInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.win != null && message.hasOwnProperty("win")) {
                                        if (!Array.isArray(message.win))
                                            return "win: array expected";
                                        for (var i = 0; i < message.win.length; ++i)
                                            if (typeof message.win[i] !== "boolean")
                                                return "win: boolean[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaHistoryInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo} BrZhajinhuaHistoryInfo
                                 */
                                BrZhajinhuaHistoryInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo();
                                    if (object.win) {
                                        if (!Array.isArray(object.win))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo.win: array expected");
                                        message.win = [];
                                        for (var i = 0; i < object.win.length; ++i)
                                            message.win[i] = Boolean(object.win[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaHistoryInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo} message BrZhajinhuaHistoryInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaHistoryInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.win = [];
                                    if (message.win && message.win.length) {
                                        object.win = [];
                                        for (var j = 0; j < message.win.length; ++j)
                                            object.win[j] = message.win[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaHistoryInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaHistoryInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaHistoryInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaHistoryInfo;
                            })();

                            message.BrZhajinhuaBetInfo = (function() {

                                /**
                                 * Properties of a BrZhajinhuaBetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaBetInfo
                                 * @property {number|null} [type] BrZhajinhuaBetInfo type
                                 * @property {number|Long|null} [gold] BrZhajinhuaBetInfo gold
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaBetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaBetInfo.
                                 * @implements IBrZhajinhuaBetInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo=} [properties] Properties to set
                                 */
                                function BrZhajinhuaBetInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaBetInfo type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @instance
                                 */
                                BrZhajinhuaBetInfo.prototype.type = 0;

                                /**
                                 * BrZhajinhuaBetInfo gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @instance
                                 */
                                BrZhajinhuaBetInfo.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new BrZhajinhuaBetInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo} BrZhajinhuaBetInfo instance
                                 */
                                BrZhajinhuaBetInfo.create = function create(properties) {
                                    return new BrZhajinhuaBetInfo(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaBetInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo} message BrZhajinhuaBetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaBetInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaBetInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo} message BrZhajinhuaBetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaBetInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaBetInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo} BrZhajinhuaBetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaBetInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 2:
                                            message.type = reader.int32();
                                            break;
                                        case 3:
                                            message.gold = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaBetInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo} BrZhajinhuaBetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaBetInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaBetInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaBetInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaBetInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo} BrZhajinhuaBetInfo
                                 */
                                BrZhajinhuaBetInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaBetInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo} message BrZhajinhuaBetInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaBetInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaBetInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaBetInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaBetInfo;
                            })();

                            message.BrZhajinhuaBet = (function() {

                                /**
                                 * Properties of a BrZhajinhuaBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaBet
                                 * @property {number|null} [playerId] BrZhajinhuaBet playerId
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo|null} [info] BrZhajinhuaBet info
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaBet.
                                 * @implements IBrZhajinhuaBet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBet=} [properties] Properties to set
                                 */
                                function BrZhajinhuaBet(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaBet playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @instance
                                 */
                                BrZhajinhuaBet.prototype.playerId = 0;

                                /**
                                 * BrZhajinhuaBet info.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBetInfo|null|undefined} info
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @instance
                                 */
                                BrZhajinhuaBet.prototype.info = null;

                                /**
                                 * Creates a new BrZhajinhuaBet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet} BrZhajinhuaBet instance
                                 */
                                BrZhajinhuaBet.create = function create(properties) {
                                    return new BrZhajinhuaBet(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaBet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBet} message BrZhajinhuaBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaBet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaBet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaBet} message BrZhajinhuaBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaBet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaBet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet} BrZhajinhuaBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaBet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.info = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaBet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet} BrZhajinhuaBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaBet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaBet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaBet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.info != null && message.hasOwnProperty("info")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.verify(message.info);
                                        if (error)
                                            return "info." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaBet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet} BrZhajinhuaBet
                                 */
                                BrZhajinhuaBet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.info != null) {
                                        if (typeof object.info !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet.info: object expected");
                                        message.info = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.fromObject(object.info);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaBet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet} message BrZhajinhuaBet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaBet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.info = null;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        object.info = $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBetInfo.toObject(message.info, options);
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaBet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaBet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaBet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaBet;
                            })();

                            message.BrcAward = (function() {

                                /**
                                 * Properties of a BrcAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrcAward
                                 * @property {number|Long|null} [gold] BrcAward gold
                                 * @property {number|Long|null} [winOrLostGold] BrcAward winOrLostGold
                                 */

                                /**
                                 * Constructs a new BrcAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrcAward.
                                 * @implements IBrcAward
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrcAward=} [properties] Properties to set
                                 */
                                function BrcAward(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrcAward gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @instance
                                 */
                                BrcAward.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * BrcAward winOrLostGold.
                                 * @member {number|Long} winOrLostGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @instance
                                 */
                                BrcAward.prototype.winOrLostGold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new BrcAward instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrcAward=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrcAward} BrcAward instance
                                 */
                                BrcAward.create = function create(properties) {
                                    return new BrcAward(properties);
                                };

                                /**
                                 * Encodes the specified BrcAward message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrcAward.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrcAward} message BrcAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrcAward.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gold);
                                    if (message.winOrLostGold != null && message.hasOwnProperty("winOrLostGold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.winOrLostGold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrcAward message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrcAward.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrcAward} message BrcAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrcAward.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrcAward message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrcAward} BrcAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrcAward.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrcAward();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.gold = reader.int64();
                                            break;
                                        case 2:
                                            message.winOrLostGold = reader.sint64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrcAward message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrcAward} BrcAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrcAward.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrcAward message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrcAward.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    if (message.winOrLostGold != null && message.hasOwnProperty("winOrLostGold"))
                                        if (!$util.isInteger(message.winOrLostGold) && !(message.winOrLostGold && $util.isInteger(message.winOrLostGold.low) && $util.isInteger(message.winOrLostGold.high)))
                                            return "winOrLostGold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a BrcAward message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrcAward} BrcAward
                                 */
                                BrcAward.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrcAward)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrcAward();
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    if (object.winOrLostGold != null)
                                        if ($util.Long)
                                            (message.winOrLostGold = $util.Long.fromValue(object.winOrLostGold)).unsigned = false;
                                        else if (typeof object.winOrLostGold === "string")
                                            message.winOrLostGold = parseInt(object.winOrLostGold, 10);
                                        else if (typeof object.winOrLostGold === "number")
                                            message.winOrLostGold = object.winOrLostGold;
                                        else if (typeof object.winOrLostGold === "object")
                                            message.winOrLostGold = new $util.LongBits(object.winOrLostGold.low >>> 0, object.winOrLostGold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrcAward message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrcAward} message BrcAward
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrcAward.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.winOrLostGold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.winOrLostGold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    if (message.winOrLostGold != null && message.hasOwnProperty("winOrLostGold"))
                                        if (typeof message.winOrLostGold === "number")
                                            object.winOrLostGold = options.longs === String ? String(message.winOrLostGold) : message.winOrLostGold;
                                        else
                                            object.winOrLostGold = options.longs === String ? $util.Long.prototype.toString.call(message.winOrLostGold) : options.longs === Number ? new $util.LongBits(message.winOrLostGold.low >>> 0, message.winOrLostGold.high >>> 0).toNumber() : message.winOrLostGold;
                                    return object;
                                };

                                /**
                                 * Converts this BrcAward to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrcAward
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrcAward.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrcAward;
                            })();

                            message.BrZhajinhuaEnd = (function() {

                                /**
                                 * Properties of a BrZhajinhuaEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBrZhajinhuaEnd
                                 * @property {number|Long|null} [gold] BrZhajinhuaEnd gold
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards>|null} [cards] BrZhajinhuaEnd cards
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRankSettlement>|null} [rankSettlements] BrZhajinhuaEnd rankSettlements
                                 * @property {Array.<boolean>|null} [results] BrZhajinhuaEnd results
                                 */

                                /**
                                 * Constructs a new BrZhajinhuaEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BrZhajinhuaEnd.
                                 * @implements IBrZhajinhuaEnd
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaEnd=} [properties] Properties to set
                                 */
                                function BrZhajinhuaEnd(properties) {
                                    this.cards = [];
                                    this.rankSettlements = [];
                                    this.results = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BrZhajinhuaEnd gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @instance
                                 */
                                BrZhajinhuaEnd.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * BrZhajinhuaEnd cards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards>} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @instance
                                 */
                                BrZhajinhuaEnd.prototype.cards = $util.emptyArray;

                                /**
                                 * BrZhajinhuaEnd rankSettlements.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRankSettlement>} rankSettlements
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @instance
                                 */
                                BrZhajinhuaEnd.prototype.rankSettlements = $util.emptyArray;

                                /**
                                 * BrZhajinhuaEnd results.
                                 * @member {Array.<boolean>} results
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @instance
                                 */
                                BrZhajinhuaEnd.prototype.results = $util.emptyArray;

                                /**
                                 * Creates a new BrZhajinhuaEnd instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaEnd=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd} BrZhajinhuaEnd instance
                                 */
                                BrZhajinhuaEnd.create = function create(properties) {
                                    return new BrZhajinhuaEnd(properties);
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaEnd message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaEnd} message BrZhajinhuaEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaEnd.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.gold);
                                    if (message.cards != null && message.cards.length)
                                        for (var i = 0; i < message.cards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.encode(message.cards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.rankSettlements != null && message.rankSettlements.length)
                                        for (var i = 0; i < message.rankSettlements.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.encode(message.rankSettlements[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.results != null && message.results.length) {
                                        writer.uint32(/* id 4, wireType 2 =*/34).fork();
                                        for (var i = 0; i < message.results.length; ++i)
                                            writer.bool(message.results[i]);
                                        writer.ldelim();
                                    }
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BrZhajinhuaEnd message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBrZhajinhuaEnd} message BrZhajinhuaEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BrZhajinhuaEnd.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BrZhajinhuaEnd message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd} BrZhajinhuaEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaEnd.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.gold = reader.sint64();
                                            break;
                                        case 2:
                                            if (!(message.cards && message.cards.length))
                                                message.cards = [];
                                            message.cards.push($root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.decode(reader, reader.uint32()));
                                            break;
                                        case 3:
                                            if (!(message.rankSettlements && message.rankSettlements.length))
                                                message.rankSettlements = [];
                                            message.rankSettlements.push($root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.decode(reader, reader.uint32()));
                                            break;
                                        case 4:
                                            if (!(message.results && message.results.length))
                                                message.results = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.results.push(reader.bool());
                                            } else
                                                message.results.push(reader.bool());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BrZhajinhuaEnd message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd} BrZhajinhuaEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BrZhajinhuaEnd.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BrZhajinhuaEnd message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BrZhajinhuaEnd.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        if (!Array.isArray(message.cards))
                                            return "cards: array expected";
                                        for (var i = 0; i < message.cards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify(message.cards[i]);
                                            if (error)
                                                return "cards." + error;
                                        }
                                    }
                                    if (message.rankSettlements != null && message.hasOwnProperty("rankSettlements")) {
                                        if (!Array.isArray(message.rankSettlements))
                                            return "rankSettlements: array expected";
                                        for (var i = 0; i < message.rankSettlements.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.verify(message.rankSettlements[i]);
                                            if (error)
                                                return "rankSettlements." + error;
                                        }
                                    }
                                    if (message.results != null && message.hasOwnProperty("results")) {
                                        if (!Array.isArray(message.results))
                                            return "results: array expected";
                                        for (var i = 0; i < message.results.length; ++i)
                                            if (typeof message.results[i] !== "boolean")
                                                return "results: boolean[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a BrZhajinhuaEnd message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd} BrZhajinhuaEnd
                                 */
                                BrZhajinhuaEnd.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd();
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    if (object.cards) {
                                        if (!Array.isArray(object.cards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.cards: array expected");
                                        message.cards = [];
                                        for (var i = 0; i < object.cards.length; ++i) {
                                            if (typeof object.cards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.cards: object expected");
                                            message.cards[i] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.fromObject(object.cards[i]);
                                        }
                                    }
                                    if (object.rankSettlements) {
                                        if (!Array.isArray(object.rankSettlements))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.rankSettlements: array expected");
                                        message.rankSettlements = [];
                                        for (var i = 0; i < object.rankSettlements.length; ++i) {
                                            if (typeof object.rankSettlements[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.rankSettlements: object expected");
                                            message.rankSettlements[i] = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.fromObject(object.rankSettlements[i]);
                                        }
                                    }
                                    if (object.results) {
                                        if (!Array.isArray(object.results))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd.results: array expected");
                                        message.results = [];
                                        for (var i = 0; i < object.results.length; ++i)
                                            message.results[i] = Boolean(object.results[i]);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BrZhajinhuaEnd message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd} message BrZhajinhuaEnd
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BrZhajinhuaEnd.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.cards = [];
                                        object.rankSettlements = [];
                                        object.results = [];
                                    }
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    if (message.cards && message.cards.length) {
                                        object.cards = [];
                                        for (var j = 0; j < message.cards.length; ++j)
                                            object.cards[j] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.toObject(message.cards[j], options);
                                    }
                                    if (message.rankSettlements && message.rankSettlements.length) {
                                        object.rankSettlements = [];
                                        for (var j = 0; j < message.rankSettlements.length; ++j)
                                            object.rankSettlements[j] = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.toObject(message.rankSettlements[j], options);
                                    }
                                    if (message.results && message.results.length) {
                                        object.results = [];
                                        for (var j = 0; j < message.results.length; ++j)
                                            object.results[j] = message.results[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this BrZhajinhuaEnd to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BrZhajinhuaEnd
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BrZhajinhuaEnd.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BrZhajinhuaEnd;
                            })();

                            message.GainBrZhajinhuaRoomInfo = (function() {

                                /**
                                 * Properties of a GainBrZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainBrZhajinhuaRoomInfo
                                 * @property {number|null} [playerId] GainBrZhajinhuaRoomInfo playerId
                                 */

                                /**
                                 * Constructs a new GainBrZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainBrZhajinhuaRoomInfo.
                                 * @implements IGainBrZhajinhuaRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainBrZhajinhuaRoomInfo=} [properties] Properties to set
                                 */
                                function GainBrZhajinhuaRoomInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GainBrZhajinhuaRoomInfo playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @instance
                                 */
                                GainBrZhajinhuaRoomInfo.prototype.playerId = 0;

                                /**
                                 * Creates a new GainBrZhajinhuaRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainBrZhajinhuaRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo} GainBrZhajinhuaRoomInfo instance
                                 */
                                GainBrZhajinhuaRoomInfo.create = function create(properties) {
                                    return new GainBrZhajinhuaRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainBrZhajinhuaRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainBrZhajinhuaRoomInfo} message GainBrZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainBrZhajinhuaRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainBrZhajinhuaRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainBrZhajinhuaRoomInfo} message GainBrZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainBrZhajinhuaRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainBrZhajinhuaRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo} GainBrZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainBrZhajinhuaRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainBrZhajinhuaRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo} GainBrZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainBrZhajinhuaRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainBrZhajinhuaRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainBrZhajinhuaRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainBrZhajinhuaRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo} GainBrZhajinhuaRoomInfo
                                 */
                                GainBrZhajinhuaRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GainBrZhajinhuaRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo} message GainBrZhajinhuaRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainBrZhajinhuaRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this GainBrZhajinhuaRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainBrZhajinhuaRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainBrZhajinhuaRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainBrZhajinhuaRoomInfo;
                            })();

                            message.ClientEnterRoom = (function() {

                                /**
                                 * Properties of a ClientEnterRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IClientEnterRoom
                                 * @property {number|null} [roomType] ClientEnterRoom roomType
                                 * @property {number|null} [roomId] ClientEnterRoom roomId
                                 */

                                /**
                                 * Constructs a new ClientEnterRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 客户端发送进入房间
                                 * @implements IClientEnterRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IClientEnterRoom=} [properties] Properties to set
                                 */
                                function ClientEnterRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ClientEnterRoom roomType.
                                 * @member {number} roomType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @instance
                                 */
                                ClientEnterRoom.prototype.roomType = 0;

                                /**
                                 * ClientEnterRoom roomId.
                                 * @member {number} roomId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @instance
                                 */
                                ClientEnterRoom.prototype.roomId = 0;

                                /**
                                 * Creates a new ClientEnterRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IClientEnterRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom} ClientEnterRoom instance
                                 */
                                ClientEnterRoom.create = function create(properties) {
                                    return new ClientEnterRoom(properties);
                                };

                                /**
                                 * Encodes the specified ClientEnterRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IClientEnterRoom} message ClientEnterRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ClientEnterRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.roomType != null && message.hasOwnProperty("roomType"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roomType);
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ClientEnterRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IClientEnterRoom} message ClientEnterRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ClientEnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ClientEnterRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom} ClientEnterRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ClientEnterRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.roomType = reader.int32();
                                            break;
                                        case 2:
                                            message.roomId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ClientEnterRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom} ClientEnterRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ClientEnterRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ClientEnterRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ClientEnterRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.roomType != null && message.hasOwnProperty("roomType"))
                                        if (!$util.isInteger(message.roomType))
                                            return "roomType: integer expected";
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        if (!$util.isInteger(message.roomId))
                                            return "roomId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ClientEnterRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom} ClientEnterRoom
                                 */
                                ClientEnterRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom();
                                    if (object.roomType != null)
                                        message.roomType = object.roomType | 0;
                                    if (object.roomId != null)
                                        message.roomId = object.roomId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ClientEnterRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom} message ClientEnterRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ClientEnterRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.roomType = 0;
                                        object.roomId = 0;
                                    }
                                    if (message.roomType != null && message.hasOwnProperty("roomType"))
                                        object.roomType = message.roomType;
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        object.roomId = message.roomId;
                                    return object;
                                };

                                /**
                                 * Converts this ClientEnterRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ClientEnterRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ClientEnterRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ClientEnterRoom;
                            })();

                            message.EnterRoom = (function() {

                                /**
                                 * Properties of an EnterRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IEnterRoom
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo|null} [info] EnterRoom info
                                 */

                                /**
                                 * Constructs a new EnterRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 进入房间
                                 * @implements IEnterRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IEnterRoom=} [properties] Properties to set
                                 */
                                function EnterRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * EnterRoom info.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo|null|undefined} info
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @instance
                                 */
                                EnterRoom.prototype.info = null;

                                /**
                                 * Creates a new EnterRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IEnterRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.EnterRoom} EnterRoom instance
                                 */
                                EnterRoom.create = function create(properties) {
                                    return new EnterRoom(properties);
                                };

                                /**
                                 * Encodes the specified EnterRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.EnterRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IEnterRoom} message EnterRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EnterRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified EnterRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.EnterRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IEnterRoom} message EnterRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                EnterRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an EnterRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.EnterRoom} EnterRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EnterRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.EnterRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.info = $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an EnterRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.EnterRoom} EnterRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                EnterRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an EnterRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                EnterRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.info != null && message.hasOwnProperty("info")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.verify(message.info);
                                        if (error)
                                            return "info." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates an EnterRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.EnterRoom} EnterRoom
                                 */
                                EnterRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.EnterRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.EnterRoom();
                                    if (object.info != null) {
                                        if (typeof object.info !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.EnterRoom.info: object expected");
                                        message.info = $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.fromObject(object.info);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an EnterRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.EnterRoom} message EnterRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                EnterRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.info = null;
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        object.info = $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.toObject(message.info, options);
                                    return object;
                                };

                                /**
                                 * Converts this EnterRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.EnterRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                EnterRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return EnterRoom;
                            })();

                            message.RoomPlayerInfo = (function() {

                                /**
                                 * Properties of a RoomPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRoomPlayerInfo
                                 * @property {number|null} [id] 玩家编号
                                 * @property {string|null} [name] 名称
                                 * @property {string|null} [icon] 头像
                                 * @property {number|null} [vipPoints] vip积分
                                 * @property {number|null} [winCount] 总胜利场数
                                 * @property {number|null} [totleCount] 总场次
                                 * @property {number|null} [seatNumber] 座位号
                                 * @property {number|null} [state] 玩家状态
                                 * @property {number|null} [betGold] 已下注的金钱
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>|null} [res] 玩家所携带的资源
                                 * @property {boolean|null} [look] 是否看牌
                                 * @property {number|null} [car] 当前座驾
                                 * @property {boolean|null} [sex] 性别
                                 */

                                /**
                                 * Constructs a new RoomPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 房间玩家信息
                                 * @implements IRoomPlayerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo=} [properties] Properties to set
                                 */
                                function RoomPlayerInfo(properties) {
                                    this.res = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 玩家编号
                                 * @member {number} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.id = 0;

                                /**
                                 * 名称
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.name = "";

                                /**
                                 * 头像
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.icon = "";

                                /**
                                 * vip积分
                                 * @member {number} vipPoints
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.vipPoints = 0;

                                /**
                                 * 总胜利场数
                                 * @member {number} winCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.winCount = 0;

                                /**
                                 * 总场次
                                 * @member {number} totleCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.totleCount = 0;

                                /**
                                 * 座位号
                                 * @member {number} seatNumber
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.seatNumber = 0;

                                /**
                                 * 玩家状态
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.state = 0;

                                /**
                                 * 已下注的金钱
                                 * @member {number} betGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.betGold = 0;

                                /**
                                 * 玩家所携带的资源
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>} res
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.res = $util.emptyArray;

                                /**
                                 * 是否看牌
                                 * @member {boolean} look
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.look = false;

                                /**
                                 * 当前座驾
                                 * @member {number} car
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.car = 0;

                                /**
                                 * 性别
                                 * @member {boolean} sex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 */
                                RoomPlayerInfo.prototype.sex = false;

                                /**
                                 * Creates a new RoomPlayerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo} RoomPlayerInfo instance
                                 */
                                RoomPlayerInfo.create = function create(properties) {
                                    return new RoomPlayerInfo(properties);
                                };

                                /**
                                 * Encodes the specified RoomPlayerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo} message RoomPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RoomPlayerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.vipPoints);
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.winCount);
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.totleCount);
                                    if (message.seatNumber != null && message.hasOwnProperty("seatNumber"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.seatNumber);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.state);
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.betGold);
                                    if (message.res != null && message.res.length)
                                        for (var i = 0; i < message.res.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Resources.encode(message.res[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.look);
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.car);
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        writer.uint32(/* id 13, wireType 0 =*/104).bool(message.sex);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RoomPlayerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo} message RoomPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RoomPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RoomPlayerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo} RoomPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RoomPlayerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.icon = reader.string();
                                            break;
                                        case 4:
                                            message.vipPoints = reader.int32();
                                            break;
                                        case 5:
                                            message.winCount = reader.int32();
                                            break;
                                        case 6:
                                            message.totleCount = reader.int32();
                                            break;
                                        case 7:
                                            message.seatNumber = reader.int32();
                                            break;
                                        case 8:
                                            message.state = reader.int32();
                                            break;
                                        case 9:
                                            message.betGold = reader.int32();
                                            break;
                                        case 10:
                                            if (!(message.res && message.res.length))
                                                message.res = [];
                                            message.res.push($root.com.aoo.chess.comms.protocol.proto.message.Resources.decode(reader, reader.uint32()));
                                            break;
                                        case 11:
                                            message.look = reader.bool();
                                            break;
                                        case 12:
                                            message.car = reader.int32();
                                            break;
                                        case 13:
                                            message.sex = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RoomPlayerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo} RoomPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RoomPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RoomPlayerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RoomPlayerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id))
                                            return "id: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        if (!$util.isInteger(message.vipPoints))
                                            return "vipPoints: integer expected";
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        if (!$util.isInteger(message.winCount))
                                            return "winCount: integer expected";
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        if (!$util.isInteger(message.totleCount))
                                            return "totleCount: integer expected";
                                    if (message.seatNumber != null && message.hasOwnProperty("seatNumber"))
                                        if (!$util.isInteger(message.seatNumber))
                                            return "seatNumber: integer expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        if (!$util.isInteger(message.betGold))
                                            return "betGold: integer expected";
                                    if (message.res != null && message.hasOwnProperty("res")) {
                                        if (!Array.isArray(message.res))
                                            return "res: array expected";
                                        for (var i = 0; i < message.res.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Resources.verify(message.res[i]);
                                            if (error)
                                                return "res." + error;
                                        }
                                    }
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        if (typeof message.look !== "boolean")
                                            return "look: boolean expected";
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        if (!$util.isInteger(message.car))
                                            return "car: integer expected";
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        if (typeof message.sex !== "boolean")
                                            return "sex: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a RoomPlayerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo} RoomPlayerInfo
                                 */
                                RoomPlayerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo();
                                    if (object.id != null)
                                        message.id = object.id | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.vipPoints != null)
                                        message.vipPoints = object.vipPoints | 0;
                                    if (object.winCount != null)
                                        message.winCount = object.winCount | 0;
                                    if (object.totleCount != null)
                                        message.totleCount = object.totleCount | 0;
                                    if (object.seatNumber != null)
                                        message.seatNumber = object.seatNumber | 0;
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.betGold != null)
                                        message.betGold = object.betGold | 0;
                                    if (object.res) {
                                        if (!Array.isArray(object.res))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.res: array expected");
                                        message.res = [];
                                        for (var i = 0; i < object.res.length; ++i) {
                                            if (typeof object.res[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.res: object expected");
                                            message.res[i] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.fromObject(object.res[i]);
                                        }
                                    }
                                    if (object.look != null)
                                        message.look = Boolean(object.look);
                                    if (object.car != null)
                                        message.car = object.car | 0;
                                    if (object.sex != null)
                                        message.sex = Boolean(object.sex);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RoomPlayerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo} message RoomPlayerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RoomPlayerInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.res = [];
                                    if (options.defaults) {
                                        object.id = 0;
                                        object.name = "";
                                        object.icon = "";
                                        object.vipPoints = 0;
                                        object.winCount = 0;
                                        object.totleCount = 0;
                                        object.seatNumber = 0;
                                        object.state = 0;
                                        object.betGold = 0;
                                        object.look = false;
                                        object.car = 0;
                                        object.sex = false;
                                    }
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        object.id = message.id;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        object.vipPoints = message.vipPoints;
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        object.winCount = message.winCount;
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        object.totleCount = message.totleCount;
                                    if (message.seatNumber != null && message.hasOwnProperty("seatNumber"))
                                        object.seatNumber = message.seatNumber;
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        object.betGold = message.betGold;
                                    if (message.res && message.res.length) {
                                        object.res = [];
                                        for (var j = 0; j < message.res.length; ++j)
                                            object.res[j] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.toObject(message.res[j], options);
                                    }
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        object.look = message.look;
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        object.car = message.car;
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        object.sex = message.sex;
                                    return object;
                                };

                                /**
                                 * Converts this RoomPlayerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RoomPlayerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RoomPlayerInfo;
                            })();

                            message.LeaveRoom = (function() {

                                /**
                                 * Properties of a LeaveRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILeaveRoom
                                 * @property {number|null} [playerId] LeaveRoom playerId
                                 */

                                /**
                                 * Constructs a new LeaveRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 离开房间
                                 * @implements ILeaveRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILeaveRoom=} [properties] Properties to set
                                 */
                                function LeaveRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LeaveRoom playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @instance
                                 */
                                LeaveRoom.prototype.playerId = 0;

                                /**
                                 * Creates a new LeaveRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILeaveRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LeaveRoom} LeaveRoom instance
                                 */
                                LeaveRoom.create = function create(properties) {
                                    return new LeaveRoom(properties);
                                };

                                /**
                                 * Encodes the specified LeaveRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LeaveRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILeaveRoom} message LeaveRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LeaveRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LeaveRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LeaveRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILeaveRoom} message LeaveRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LeaveRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LeaveRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LeaveRoom} LeaveRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LeaveRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LeaveRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LeaveRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LeaveRoom} LeaveRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LeaveRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LeaveRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LeaveRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a LeaveRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LeaveRoom} LeaveRoom
                                 */
                                LeaveRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LeaveRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LeaveRoom();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LeaveRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LeaveRoom} message LeaveRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LeaveRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this LeaveRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LeaveRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LeaveRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LeaveRoom;
                            })();

                            message.ExitRoom = (function() {

                                /**
                                 * Properties of an ExitRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IExitRoom
                                 * @property {number|null} [roomId] ExitRoom roomId
                                 */

                                /**
                                 * Constructs a new ExitRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 离开房间
                                 * @implements IExitRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExitRoom=} [properties] Properties to set
                                 */
                                function ExitRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ExitRoom roomId.
                                 * @member {number} roomId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @instance
                                 */
                                ExitRoom.prototype.roomId = 0;

                                /**
                                 * Creates a new ExitRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExitRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExitRoom} ExitRoom instance
                                 */
                                ExitRoom.create = function create(properties) {
                                    return new ExitRoom(properties);
                                };

                                /**
                                 * Encodes the specified ExitRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ExitRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExitRoom} message ExitRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ExitRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roomId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ExitRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ExitRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExitRoom} message ExitRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ExitRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an ExitRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExitRoom} ExitRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ExitRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ExitRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.roomId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an ExitRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExitRoom} ExitRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ExitRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an ExitRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ExitRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        if (!$util.isInteger(message.roomId))
                                            return "roomId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates an ExitRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExitRoom} ExitRoom
                                 */
                                ExitRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ExitRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ExitRoom();
                                    if (object.roomId != null)
                                        message.roomId = object.roomId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an ExitRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ExitRoom} message ExitRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ExitRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.roomId = 0;
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        object.roomId = message.roomId;
                                    return object;
                                };

                                /**
                                 * Converts this ExitRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExitRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ExitRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ExitRoom;
                            })();

                            message.ChatMessage = (function() {

                                /**
                                 * Properties of a ChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IChatMessage
                                 * @property {string|null} [name] ChatMessage name
                                 * @property {string|null} [message] ChatMessage message
                                 * @property {number|null} [playerId] ChatMessage playerId
                                 */

                                /**
                                 * Constructs a new ChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 聊天
                                 * @implements IChatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChatMessage=} [properties] Properties to set
                                 */
                                function ChatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ChatMessage name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @instance
                                 */
                                ChatMessage.prototype.name = "";

                                /**
                                 * ChatMessage message.
                                 * @member {string} message
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @instance
                                 */
                                ChatMessage.prototype.message = "";

                                /**
                                 * ChatMessage playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @instance
                                 */
                                ChatMessage.prototype.playerId = 0;

                                /**
                                 * Creates a new ChatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChatMessage} ChatMessage instance
                                 */
                                ChatMessage.create = function create(properties) {
                                    return new ChatMessage(properties);
                                };

                                /**
                                 * Encodes the specified ChatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ChatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChatMessage} message ChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ChatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ChatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ChatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChatMessage} message ChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ChatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChatMessage} ChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ChatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ChatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.name = reader.string();
                                            break;
                                        case 2:
                                            message.message = reader.string();
                                            break;
                                        case 3:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ChatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChatMessage} ChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ChatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ChatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ChatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ChatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChatMessage} ChatMessage
                                 */
                                ChatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ChatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ChatMessage();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ChatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ChatMessage} message ChatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ChatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.name = "";
                                        object.message = "";
                                        object.playerId = 0;
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this ChatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ChatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ChatMessage;
                            })();

                            message.MatchRoom = (function() {

                                /**
                                 * Properties of a MatchRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IMatchRoom
                                 * @property {number|null} [playerId] 玩家编号
                                 * @property {number|null} [roomId] 排除在外的房间编号
                                 */

                                /**
                                 * Constructs a new MatchRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 匹配房间
                                 * @implements IMatchRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMatchRoom=} [properties] Properties to set
                                 */
                                function MatchRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 玩家编号
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @instance
                                 */
                                MatchRoom.prototype.playerId = 0;

                                /**
                                 * 排除在外的房间编号
                                 * @member {number} roomId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @instance
                                 */
                                MatchRoom.prototype.roomId = 0;

                                /**
                                 * Creates a new MatchRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMatchRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MatchRoom} MatchRoom instance
                                 */
                                MatchRoom.create = function create(properties) {
                                    return new MatchRoom(properties);
                                };

                                /**
                                 * Encodes the specified MatchRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.MatchRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMatchRoom} message MatchRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MatchRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MatchRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.MatchRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMatchRoom} message MatchRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MatchRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MatchRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MatchRoom} MatchRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MatchRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.MatchRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.roomId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MatchRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MatchRoom} MatchRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MatchRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MatchRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MatchRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        if (!$util.isInteger(message.roomId))
                                            return "roomId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a MatchRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MatchRoom} MatchRoom
                                 */
                                MatchRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.MatchRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.MatchRoom();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.roomId != null)
                                        message.roomId = object.roomId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MatchRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.MatchRoom} message MatchRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MatchRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.roomId = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        object.roomId = message.roomId;
                                    return object;
                                };

                                /**
                                 * Converts this MatchRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MatchRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MatchRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MatchRoom;
                            })();

                            message.Card = (function() {

                                /**
                                 * Properties of a Card.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ICard
                                 * @property {number|null} [type] Card type
                                 * @property {number|null} [points] Card points
                                 */

                                /**
                                 * Constructs a new Card.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 牌
                                 * @implements ICard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICard=} [properties] Properties to set
                                 */
                                function Card(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Card type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @instance
                                 */
                                Card.prototype.type = 0;

                                /**
                                 * Card points.
                                 * @member {number} points
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @instance
                                 */
                                Card.prototype.points = 0;

                                /**
                                 * Creates a new Card instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Card} Card instance
                                 */
                                Card.create = function create(properties) {
                                    return new Card(properties);
                                };

                                /**
                                 * Encodes the specified Card message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Card.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICard} message Card message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Card.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.points != null && message.hasOwnProperty("points"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.points);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Card message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Card.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICard} message Card message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Card.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Card message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Card} Card
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Card.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.Card();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            message.points = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Card message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Card} Card
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Card.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Card message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Card.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.points != null && message.hasOwnProperty("points"))
                                        if (!$util.isInteger(message.points))
                                            return "points: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Card message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Card} Card
                                 */
                                Card.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.Card)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.Card();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.points != null)
                                        message.points = object.points | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Card message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.Card} message Card
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Card.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = 0;
                                        object.points = 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.points != null && message.hasOwnProperty("points"))
                                        object.points = message.points;
                                    return object;
                                };

                                /**
                                 * Converts this Card to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Card
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Card.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Card;
                            })();

                            message.RoomUpdateResource = (function() {

                                /**
                                 * Properties of a RoomUpdateResource.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRoomUpdateResource
                                 * @property {number|null} [playerId] RoomUpdateResource playerId
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IResources|null} [res] RoomUpdateResource res
                                 */

                                /**
                                 * Constructs a new RoomUpdateResource.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 房间更新资源
                                 * @implements IRoomUpdateResource
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomUpdateResource=} [properties] Properties to set
                                 */
                                function RoomUpdateResource(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * RoomUpdateResource playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @instance
                                 */
                                RoomUpdateResource.prototype.playerId = 0;

                                /**
                                 * RoomUpdateResource res.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IResources|null|undefined} res
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @instance
                                 */
                                RoomUpdateResource.prototype.res = null;

                                /**
                                 * Creates a new RoomUpdateResource instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomUpdateResource=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource} RoomUpdateResource instance
                                 */
                                RoomUpdateResource.create = function create(properties) {
                                    return new RoomUpdateResource(properties);
                                };

                                /**
                                 * Encodes the specified RoomUpdateResource message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomUpdateResource} message RoomUpdateResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RoomUpdateResource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.res != null && message.hasOwnProperty("res"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.Resources.encode(message.res, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RoomUpdateResource message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRoomUpdateResource} message RoomUpdateResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RoomUpdateResource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RoomUpdateResource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource} RoomUpdateResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RoomUpdateResource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.res = $root.com.aoo.chess.comms.protocol.proto.message.Resources.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RoomUpdateResource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource} RoomUpdateResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RoomUpdateResource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RoomUpdateResource message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RoomUpdateResource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.res != null && message.hasOwnProperty("res")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.Resources.verify(message.res);
                                        if (error)
                                            return "res." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a RoomUpdateResource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource} RoomUpdateResource
                                 */
                                RoomUpdateResource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.res != null) {
                                        if (typeof object.res !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource.res: object expected");
                                        message.res = $root.com.aoo.chess.comms.protocol.proto.message.Resources.fromObject(object.res);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RoomUpdateResource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource} message RoomUpdateResource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RoomUpdateResource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.res = null;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.res != null && message.hasOwnProperty("res"))
                                        object.res = $root.com.aoo.chess.comms.protocol.proto.message.Resources.toObject(message.res, options);
                                    return object;
                                };

                                /**
                                 * Converts this RoomUpdateResource to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RoomUpdateResource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RoomUpdateResource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RoomUpdateResource;
                            })();

                            message.RobotEnter = (function() {

                                /**
                                 * Properties of a RobotEnter.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRobotEnter
                                 * @property {number|null} [roomId] RobotEnter roomId
                                 */

                                /**
                                 * Constructs a new RobotEnter.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a RobotEnter.
                                 * @implements IRobotEnter
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRobotEnter=} [properties] Properties to set
                                 */
                                function RobotEnter(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * RobotEnter roomId.
                                 * @member {number} roomId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @instance
                                 */
                                RobotEnter.prototype.roomId = 0;

                                /**
                                 * Creates a new RobotEnter instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRobotEnter=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RobotEnter} RobotEnter instance
                                 */
                                RobotEnter.create = function create(properties) {
                                    return new RobotEnter(properties);
                                };

                                /**
                                 * Encodes the specified RobotEnter message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RobotEnter.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRobotEnter} message RobotEnter message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RobotEnter.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roomId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RobotEnter message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RobotEnter.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRobotEnter} message RobotEnter message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RobotEnter.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RobotEnter message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RobotEnter} RobotEnter
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RobotEnter.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RobotEnter();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.roomId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RobotEnter message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RobotEnter} RobotEnter
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RobotEnter.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RobotEnter message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RobotEnter.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        if (!$util.isInteger(message.roomId))
                                            return "roomId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a RobotEnter message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RobotEnter} RobotEnter
                                 */
                                RobotEnter.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RobotEnter)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RobotEnter();
                                    if (object.roomId != null)
                                        message.roomId = object.roomId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RobotEnter message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RobotEnter} message RobotEnter
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RobotEnter.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.roomId = 0;
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        object.roomId = message.roomId;
                                    return object;
                                };

                                /**
                                 * Converts this RobotEnter to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RobotEnter
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RobotEnter.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RobotEnter;
                            })();

                            /**
                             * ForcedExitType enum.
                             * @name com.aoo.chess.comms.protocol.proto.message.ForcedExitType
                             * @enum {string}
                             * @property {number} LESS_MIN_GOLD=0 小于最小金币
                             * @property {number} MORE_MAX_GOLD=1 大于最大金币
                             * @property {number} DONOT_OPERATE=2 太久不操作
                             * @property {number} KICK_OUT_PLAYER=3 被踢出房间
                             */
                            message.ForcedExitType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "LESS_MIN_GOLD"] = 0;
                                values[valuesById[1] = "MORE_MAX_GOLD"] = 1;
                                values[valuesById[2] = "DONOT_OPERATE"] = 2;
                                values[valuesById[3] = "KICK_OUT_PLAYER"] = 3;
                                return values;
                            })();

                            message.ForcedExitRoom = (function() {

                                /**
                                 * Properties of a ForcedExitRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IForcedExitRoom
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ForcedExitType|null} [type] ForcedExitRoom type
                                 */

                                /**
                                 * Constructs a new ForcedExitRoom.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ForcedExitRoom.
                                 * @implements IForcedExitRoom
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IForcedExitRoom=} [properties] Properties to set
                                 */
                                function ForcedExitRoom(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ForcedExitRoom type.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ForcedExitType} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @instance
                                 */
                                ForcedExitRoom.prototype.type = 0;

                                /**
                                 * Creates a new ForcedExitRoom instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IForcedExitRoom=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom} ForcedExitRoom instance
                                 */
                                ForcedExitRoom.create = function create(properties) {
                                    return new ForcedExitRoom(properties);
                                };

                                /**
                                 * Encodes the specified ForcedExitRoom message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IForcedExitRoom} message ForcedExitRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ForcedExitRoom.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ForcedExitRoom message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IForcedExitRoom} message ForcedExitRoom message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ForcedExitRoom.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ForcedExitRoom message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom} ForcedExitRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ForcedExitRoom.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ForcedExitRoom message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom} ForcedExitRoom
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ForcedExitRoom.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ForcedExitRoom message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ForcedExitRoom.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        switch (message.type) {
                                        default:
                                            return "type: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                        case 3:
                                            break;
                                        }
                                    return null;
                                };

                                /**
                                 * Creates a ForcedExitRoom message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom} ForcedExitRoom
                                 */
                                ForcedExitRoom.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom();
                                    switch (object.type) {
                                    case "LESS_MIN_GOLD":
                                    case 0:
                                        message.type = 0;
                                        break;
                                    case "MORE_MAX_GOLD":
                                    case 1:
                                        message.type = 1;
                                        break;
                                    case "DONOT_OPERATE":
                                    case 2:
                                        message.type = 2;
                                        break;
                                    case "KICK_OUT_PLAYER":
                                    case 3:
                                        message.type = 3;
                                        break;
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ForcedExitRoom message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom} message ForcedExitRoom
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ForcedExitRoom.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.type = options.enums === String ? "LESS_MIN_GOLD" : 0;
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = options.enums === String ? $root.com.aoo.chess.comms.protocol.proto.message.ForcedExitType[message.type] : message.type;
                                    return object;
                                };

                                /**
                                 * Converts this ForcedExitRoom to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ForcedExitRoom
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ForcedExitRoom.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ForcedExitRoom;
                            })();

                            message.PlayerInfo = (function() {

                                /**
                                 * Properties of a PlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerInfo
                                 * @property {number|null} [id] 玩家编号
                                 * @property {string|null} [name] 名称
                                 * @property {string|null} [sign] 签名
                                 * @property {string|null} [icon] 头像
                                 * @property {number|null} [vipPoints] vip积分
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>|null} [res] 资源
                                 * @property {number|null} [winCount] 总胜利场数
                                 * @property {number|null} [totleCount] 总场数
                                 * @property {number|null} [roomId] 房間編號
                                 * @property {number|null} [car] 当前座驾
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IProp>|null} [props] 道具
                                 * @property {boolean|null} [modifyName] 是否改过名字
                                 * @property {boolean|null} [sex] 性別
                                 */

                                /**
                                 * Constructs a new PlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 玩家信息
                                 * @implements IPlayerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerInfo=} [properties] Properties to set
                                 */
                                function PlayerInfo(properties) {
                                    this.res = [];
                                    this.props = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 玩家编号
                                 * @member {number} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.id = 0;

                                /**
                                 * 名称
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.name = "";

                                /**
                                 * 签名
                                 * @member {string} sign
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.sign = "";

                                /**
                                 * 头像
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.icon = "";

                                /**
                                 * vip积分
                                 * @member {number} vipPoints
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.vipPoints = 0;

                                /**
                                 * 资源
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>} res
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.res = $util.emptyArray;

                                /**
                                 * 总胜利场数
                                 * @member {number} winCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.winCount = 0;

                                /**
                                 * 总场数
                                 * @member {number} totleCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.totleCount = 0;

                                /**
                                 * 房間編號
                                 * @member {number} roomId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.roomId = 0;

                                /**
                                 * 当前座驾
                                 * @member {number} car
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.car = 0;

                                /**
                                 * 道具
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IProp>} props
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.props = $util.emptyArray;

                                /**
                                 * 是否改过名字
                                 * @member {boolean} modifyName
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.modifyName = false;

                                /**
                                 * 性別
                                 * @member {boolean} sex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 */
                                PlayerInfo.prototype.sex = false;

                                /**
                                 * Creates a new PlayerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerInfo} PlayerInfo instance
                                 */
                                PlayerInfo.create = function create(properties) {
                                    return new PlayerInfo(properties);
                                };

                                /**
                                 * Encodes the specified PlayerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerInfo} message PlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.sign);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.icon);
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.vipPoints);
                                    if (message.res != null && message.res.length)
                                        for (var i = 0; i < message.res.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Resources.encode(message.res[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.winCount);
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.totleCount);
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.roomId);
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.car);
                                    if (message.props != null && message.props.length)
                                        for (var i = 0; i < message.props.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Prop.encode(message.props[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                                    if (message.modifyName != null && message.hasOwnProperty("modifyName"))
                                        writer.uint32(/* id 12, wireType 0 =*/96).bool(message.modifyName);
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        writer.uint32(/* id 13, wireType 0 =*/104).bool(message.sex);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerInfo} message PlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerInfo} PlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.sign = reader.string();
                                            break;
                                        case 4:
                                            message.icon = reader.string();
                                            break;
                                        case 5:
                                            message.vipPoints = reader.int32();
                                            break;
                                        case 6:
                                            if (!(message.res && message.res.length))
                                                message.res = [];
                                            message.res.push($root.com.aoo.chess.comms.protocol.proto.message.Resources.decode(reader, reader.uint32()));
                                            break;
                                        case 7:
                                            message.winCount = reader.int32();
                                            break;
                                        case 8:
                                            message.totleCount = reader.int32();
                                            break;
                                        case 9:
                                            message.roomId = reader.int32();
                                            break;
                                        case 10:
                                            message.car = reader.int32();
                                            break;
                                        case 11:
                                            if (!(message.props && message.props.length))
                                                message.props = [];
                                            message.props.push($root.com.aoo.chess.comms.protocol.proto.message.Prop.decode(reader, reader.uint32()));
                                            break;
                                        case 12:
                                            message.modifyName = reader.bool();
                                            break;
                                        case 13:
                                            message.sex = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerInfo} PlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id))
                                            return "id: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        if (!$util.isString(message.sign))
                                            return "sign: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        if (!$util.isInteger(message.vipPoints))
                                            return "vipPoints: integer expected";
                                    if (message.res != null && message.hasOwnProperty("res")) {
                                        if (!Array.isArray(message.res))
                                            return "res: array expected";
                                        for (var i = 0; i < message.res.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Resources.verify(message.res[i]);
                                            if (error)
                                                return "res." + error;
                                        }
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        if (!$util.isInteger(message.winCount))
                                            return "winCount: integer expected";
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        if (!$util.isInteger(message.totleCount))
                                            return "totleCount: integer expected";
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        if (!$util.isInteger(message.roomId))
                                            return "roomId: integer expected";
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        if (!$util.isInteger(message.car))
                                            return "car: integer expected";
                                    if (message.props != null && message.hasOwnProperty("props")) {
                                        if (!Array.isArray(message.props))
                                            return "props: array expected";
                                        for (var i = 0; i < message.props.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Prop.verify(message.props[i]);
                                            if (error)
                                                return "props." + error;
                                        }
                                    }
                                    if (message.modifyName != null && message.hasOwnProperty("modifyName"))
                                        if (typeof message.modifyName !== "boolean")
                                            return "modifyName: boolean expected";
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        if (typeof message.sex !== "boolean")
                                            return "sex: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerInfo} PlayerInfo
                                 */
                                PlayerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerInfo();
                                    if (object.id != null)
                                        message.id = object.id | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.sign != null)
                                        message.sign = String(object.sign);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.vipPoints != null)
                                        message.vipPoints = object.vipPoints | 0;
                                    if (object.res) {
                                        if (!Array.isArray(object.res))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerInfo.res: array expected");
                                        message.res = [];
                                        for (var i = 0; i < object.res.length; ++i) {
                                            if (typeof object.res[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerInfo.res: object expected");
                                            message.res[i] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.fromObject(object.res[i]);
                                        }
                                    }
                                    if (object.winCount != null)
                                        message.winCount = object.winCount | 0;
                                    if (object.totleCount != null)
                                        message.totleCount = object.totleCount | 0;
                                    if (object.roomId != null)
                                        message.roomId = object.roomId | 0;
                                    if (object.car != null)
                                        message.car = object.car | 0;
                                    if (object.props) {
                                        if (!Array.isArray(object.props))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerInfo.props: array expected");
                                        message.props = [];
                                        for (var i = 0; i < object.props.length; ++i) {
                                            if (typeof object.props[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerInfo.props: object expected");
                                            message.props[i] = $root.com.aoo.chess.comms.protocol.proto.message.Prop.fromObject(object.props[i]);
                                        }
                                    }
                                    if (object.modifyName != null)
                                        message.modifyName = Boolean(object.modifyName);
                                    if (object.sex != null)
                                        message.sex = Boolean(object.sex);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerInfo} message PlayerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.res = [];
                                        object.props = [];
                                    }
                                    if (options.defaults) {
                                        object.id = 0;
                                        object.name = "";
                                        object.sign = "";
                                        object.icon = "";
                                        object.vipPoints = 0;
                                        object.winCount = 0;
                                        object.totleCount = 0;
                                        object.roomId = 0;
                                        object.car = 0;
                                        object.modifyName = false;
                                        object.sex = false;
                                    }
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        object.id = message.id;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        object.sign = message.sign;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        object.vipPoints = message.vipPoints;
                                    if (message.res && message.res.length) {
                                        object.res = [];
                                        for (var j = 0; j < message.res.length; ++j)
                                            object.res[j] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.toObject(message.res[j], options);
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        object.winCount = message.winCount;
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        object.totleCount = message.totleCount;
                                    if (message.roomId != null && message.hasOwnProperty("roomId"))
                                        object.roomId = message.roomId;
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        object.car = message.car;
                                    if (message.props && message.props.length) {
                                        object.props = [];
                                        for (var j = 0; j < message.props.length; ++j)
                                            object.props[j] = $root.com.aoo.chess.comms.protocol.proto.message.Prop.toObject(message.props[j], options);
                                    }
                                    if (message.modifyName != null && message.hasOwnProperty("modifyName"))
                                        object.modifyName = message.modifyName;
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        object.sex = message.sex;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerInfo;
                            })();

                            message.Resources = (function() {

                                /**
                                 * Properties of a Resources.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IResources
                                 * @property {number|null} [resourceId] 资源编号
                                 * @property {number|Long|null} [val] 资源编号
                                 */

                                /**
                                 * Constructs a new Resources.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 玩家资源
                                 * @implements IResources
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IResources=} [properties] Properties to set
                                 */
                                function Resources(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 资源编号
                                 * @member {number} resourceId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @instance
                                 */
                                Resources.prototype.resourceId = 0;

                                /**
                                 * 资源编号
                                 * @member {number|Long} val
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @instance
                                 */
                                Resources.prototype.val = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new Resources instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IResources=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Resources} Resources instance
                                 */
                                Resources.create = function create(properties) {
                                    return new Resources(properties);
                                };

                                /**
                                 * Encodes the specified Resources message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Resources.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IResources} message Resources message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resources.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.resourceId);
                                    if (message.val != null && message.hasOwnProperty("val"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.val);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Resources message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Resources.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IResources} message Resources message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Resources.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Resources message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Resources} Resources
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resources.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.Resources();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.resourceId = reader.int32();
                                            break;
                                        case 2:
                                            message.val = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Resources message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Resources} Resources
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Resources.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Resources message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Resources.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        if (!$util.isInteger(message.resourceId))
                                            return "resourceId: integer expected";
                                    if (message.val != null && message.hasOwnProperty("val"))
                                        if (!$util.isInteger(message.val) && !(message.val && $util.isInteger(message.val.low) && $util.isInteger(message.val.high)))
                                            return "val: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a Resources message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Resources} Resources
                                 */
                                Resources.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.Resources)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.Resources();
                                    if (object.resourceId != null)
                                        message.resourceId = object.resourceId | 0;
                                    if (object.val != null)
                                        if ($util.Long)
                                            (message.val = $util.Long.fromValue(object.val)).unsigned = false;
                                        else if (typeof object.val === "string")
                                            message.val = parseInt(object.val, 10);
                                        else if (typeof object.val === "number")
                                            message.val = object.val;
                                        else if (typeof object.val === "object")
                                            message.val = new $util.LongBits(object.val.low >>> 0, object.val.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Resources message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.Resources} message Resources
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Resources.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.resourceId = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.val = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.val = options.longs === String ? "0" : 0;
                                    }
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        object.resourceId = message.resourceId;
                                    if (message.val != null && message.hasOwnProperty("val"))
                                        if (typeof message.val === "number")
                                            object.val = options.longs === String ? String(message.val) : message.val;
                                        else
                                            object.val = options.longs === String ? $util.Long.prototype.toString.call(message.val) : options.longs === Number ? new $util.LongBits(message.val.low >>> 0, message.val.high >>> 0).toNumber() : message.val;
                                    return object;
                                };

                                /**
                                 * Converts this Resources to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Resources
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Resources.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Resources;
                            })();

                            message.PlayerSimpleInfo = (function() {

                                /**
                                 * Properties of a PlayerSimpleInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerSimpleInfo
                                 * @property {number|null} [id] 编号
                                 * @property {string|null} [name] 名称
                                 * @property {string|null} [icon] 头像
                                 * @property {number|null} [vipPoints] PlayerSimpleInfo vipPoints
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>|null} [res] 资源
                                 * @property {number|null} [winCount] 总胜利场数
                                 * @property {number|null} [totleCount] 总场数
                                 * @property {number|null} [car] 当前座驾
                                 * @property {boolean|null} [sex] PlayerSimpleInfo sex
                                 */

                                /**
                                 * Constructs a new PlayerSimpleInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerSimpleInfo.
                                 * @implements IPlayerSimpleInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo=} [properties] Properties to set
                                 */
                                function PlayerSimpleInfo(properties) {
                                    this.res = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 编号
                                 * @member {number} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.id = 0;

                                /**
                                 * 名称
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.name = "";

                                /**
                                 * 头像
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.icon = "";

                                /**
                                 * PlayerSimpleInfo vipPoints.
                                 * @member {number} vipPoints
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.vipPoints = 0;

                                /**
                                 * 资源
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>} res
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.res = $util.emptyArray;

                                /**
                                 * 总胜利场数
                                 * @member {number} winCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.winCount = 0;

                                /**
                                 * 总场数
                                 * @member {number} totleCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.totleCount = 0;

                                /**
                                 * 当前座驾
                                 * @member {number} car
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.car = 0;

                                /**
                                 * PlayerSimpleInfo sex.
                                 * @member {boolean} sex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 */
                                PlayerSimpleInfo.prototype.sex = false;

                                /**
                                 * Creates a new PlayerSimpleInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo} PlayerSimpleInfo instance
                                 */
                                PlayerSimpleInfo.create = function create(properties) {
                                    return new PlayerSimpleInfo(properties);
                                };

                                /**
                                 * Encodes the specified PlayerSimpleInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo} message PlayerSimpleInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerSimpleInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.vipPoints);
                                    if (message.res != null && message.res.length)
                                        for (var i = 0; i < message.res.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Resources.encode(message.res[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.winCount);
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.totleCount);
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.car);
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.sex);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerSimpleInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerSimpleInfo} message PlayerSimpleInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerSimpleInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerSimpleInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo} PlayerSimpleInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerSimpleInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.icon = reader.string();
                                            break;
                                        case 4:
                                            message.vipPoints = reader.int32();
                                            break;
                                        case 5:
                                            if (!(message.res && message.res.length))
                                                message.res = [];
                                            message.res.push($root.com.aoo.chess.comms.protocol.proto.message.Resources.decode(reader, reader.uint32()));
                                            break;
                                        case 6:
                                            message.winCount = reader.int32();
                                            break;
                                        case 7:
                                            message.totleCount = reader.int32();
                                            break;
                                        case 8:
                                            message.car = reader.int32();
                                            break;
                                        case 9:
                                            message.sex = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerSimpleInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo} PlayerSimpleInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerSimpleInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerSimpleInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerSimpleInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id))
                                            return "id: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        if (!$util.isInteger(message.vipPoints))
                                            return "vipPoints: integer expected";
                                    if (message.res != null && message.hasOwnProperty("res")) {
                                        if (!Array.isArray(message.res))
                                            return "res: array expected";
                                        for (var i = 0; i < message.res.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Resources.verify(message.res[i]);
                                            if (error)
                                                return "res." + error;
                                        }
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        if (!$util.isInteger(message.winCount))
                                            return "winCount: integer expected";
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        if (!$util.isInteger(message.totleCount))
                                            return "totleCount: integer expected";
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        if (!$util.isInteger(message.car))
                                            return "car: integer expected";
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        if (typeof message.sex !== "boolean")
                                            return "sex: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerSimpleInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo} PlayerSimpleInfo
                                 */
                                PlayerSimpleInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo();
                                    if (object.id != null)
                                        message.id = object.id | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.vipPoints != null)
                                        message.vipPoints = object.vipPoints | 0;
                                    if (object.res) {
                                        if (!Array.isArray(object.res))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.res: array expected");
                                        message.res = [];
                                        for (var i = 0; i < object.res.length; ++i) {
                                            if (typeof object.res[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo.res: object expected");
                                            message.res[i] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.fromObject(object.res[i]);
                                        }
                                    }
                                    if (object.winCount != null)
                                        message.winCount = object.winCount | 0;
                                    if (object.totleCount != null)
                                        message.totleCount = object.totleCount | 0;
                                    if (object.car != null)
                                        message.car = object.car | 0;
                                    if (object.sex != null)
                                        message.sex = Boolean(object.sex);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerSimpleInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo} message PlayerSimpleInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerSimpleInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.res = [];
                                    if (options.defaults) {
                                        object.id = 0;
                                        object.name = "";
                                        object.icon = "";
                                        object.vipPoints = 0;
                                        object.winCount = 0;
                                        object.totleCount = 0;
                                        object.car = 0;
                                        object.sex = false;
                                    }
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        object.id = message.id;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        object.vipPoints = message.vipPoints;
                                    if (message.res && message.res.length) {
                                        object.res = [];
                                        for (var j = 0; j < message.res.length; ++j)
                                            object.res[j] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.toObject(message.res[j], options);
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        object.winCount = message.winCount;
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        object.totleCount = message.totleCount;
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        object.car = message.car;
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        object.sex = message.sex;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerSimpleInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerSimpleInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerSimpleInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerSimpleInfo;
                            })();

                            message.ModifyPlayerInfo = (function() {

                                /**
                                 * Properties of a ModifyPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IModifyPlayerInfo
                                 * @property {string|null} [name] ModifyPlayerInfo name
                                 * @property {string|null} [sign] ModifyPlayerInfo sign
                                 * @property {boolean|null} [sex] ModifyPlayerInfo sex
                                 */

                                /**
                                 * Constructs a new ModifyPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ModifyPlayerInfo.
                                 * @implements IModifyPlayerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IModifyPlayerInfo=} [properties] Properties to set
                                 */
                                function ModifyPlayerInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ModifyPlayerInfo name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @instance
                                 */
                                ModifyPlayerInfo.prototype.name = "";

                                /**
                                 * ModifyPlayerInfo sign.
                                 * @member {string} sign
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @instance
                                 */
                                ModifyPlayerInfo.prototype.sign = "";

                                /**
                                 * ModifyPlayerInfo sex.
                                 * @member {boolean} sex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @instance
                                 */
                                ModifyPlayerInfo.prototype.sex = false;

                                /**
                                 * Creates a new ModifyPlayerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IModifyPlayerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo} ModifyPlayerInfo instance
                                 */
                                ModifyPlayerInfo.create = function create(properties) {
                                    return new ModifyPlayerInfo(properties);
                                };

                                /**
                                 * Encodes the specified ModifyPlayerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IModifyPlayerInfo} message ModifyPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ModifyPlayerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sign);
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.sex);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ModifyPlayerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IModifyPlayerInfo} message ModifyPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ModifyPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ModifyPlayerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo} ModifyPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ModifyPlayerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.name = reader.string();
                                            break;
                                        case 2:
                                            message.sign = reader.string();
                                            break;
                                        case 3:
                                            message.sex = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ModifyPlayerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo} ModifyPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ModifyPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ModifyPlayerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ModifyPlayerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        if (!$util.isString(message.sign))
                                            return "sign: string expected";
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        if (typeof message.sex !== "boolean")
                                            return "sex: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a ModifyPlayerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo} ModifyPlayerInfo
                                 */
                                ModifyPlayerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo();
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.sign != null)
                                        message.sign = String(object.sign);
                                    if (object.sex != null)
                                        message.sex = Boolean(object.sex);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ModifyPlayerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo} message ModifyPlayerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ModifyPlayerInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.name = "";
                                        object.sign = "";
                                        object.sex = false;
                                    }
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        object.sign = message.sign;
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        object.sex = message.sex;
                                    return object;
                                };

                                /**
                                 * Converts this ModifyPlayerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ModifyPlayerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ModifyPlayerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ModifyPlayerInfo;
                            })();

                            message.GainOtherPlayerInfo = (function() {

                                /**
                                 * Properties of a GainOtherPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainOtherPlayerInfo
                                 * @property {number|null} [playerId] GainOtherPlayerInfo playerId
                                 */

                                /**
                                 * Constructs a new GainOtherPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainOtherPlayerInfo.
                                 * @implements IGainOtherPlayerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOtherPlayerInfo=} [properties] Properties to set
                                 */
                                function GainOtherPlayerInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GainOtherPlayerInfo playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @instance
                                 */
                                GainOtherPlayerInfo.prototype.playerId = 0;

                                /**
                                 * Creates a new GainOtherPlayerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOtherPlayerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo} GainOtherPlayerInfo instance
                                 */
                                GainOtherPlayerInfo.create = function create(properties) {
                                    return new GainOtherPlayerInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainOtherPlayerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOtherPlayerInfo} message GainOtherPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainOtherPlayerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainOtherPlayerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOtherPlayerInfo} message GainOtherPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainOtherPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainOtherPlayerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo} GainOtherPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainOtherPlayerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainOtherPlayerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo} GainOtherPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainOtherPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainOtherPlayerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainOtherPlayerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainOtherPlayerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo} GainOtherPlayerInfo
                                 */
                                GainOtherPlayerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GainOtherPlayerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo} message GainOtherPlayerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainOtherPlayerInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this GainOtherPlayerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOtherPlayerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainOtherPlayerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainOtherPlayerInfo;
                            })();

                            message.OtherPlayerInfo = (function() {

                                /**
                                 * Properties of an OtherPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IOtherPlayerInfo
                                 * @property {number|null} [id] 玩家编号
                                 * @property {string|null} [name] 名称
                                 * @property {string|null} [sign] 签名
                                 * @property {string|null} [icon] 头像
                                 * @property {number|null} [vipPoints] vip积分
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>|null} [res] 资源
                                 * @property {number|null} [winCount] 总胜利场数
                                 * @property {number|null} [totleCount] 总场数
                                 * @property {number|null} [car] 当前座驾
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IProp>|null} [props] 道具
                                 * @property {boolean|null} [sex] 性別
                                 */

                                /**
                                 * Constructs a new OtherPlayerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents an OtherPlayerInfo.
                                 * @implements IOtherPlayerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOtherPlayerInfo=} [properties] Properties to set
                                 */
                                function OtherPlayerInfo(properties) {
                                    this.res = [];
                                    this.props = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 玩家编号
                                 * @member {number} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.id = 0;

                                /**
                                 * 名称
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.name = "";

                                /**
                                 * 签名
                                 * @member {string} sign
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.sign = "";

                                /**
                                 * 头像
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.icon = "";

                                /**
                                 * vip积分
                                 * @member {number} vipPoints
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.vipPoints = 0;

                                /**
                                 * 资源
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IResources>} res
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.res = $util.emptyArray;

                                /**
                                 * 总胜利场数
                                 * @member {number} winCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.winCount = 0;

                                /**
                                 * 总场数
                                 * @member {number} totleCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.totleCount = 0;

                                /**
                                 * 当前座驾
                                 * @member {number} car
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.car = 0;

                                /**
                                 * 道具
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IProp>} props
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.props = $util.emptyArray;

                                /**
                                 * 性別
                                 * @member {boolean} sex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 */
                                OtherPlayerInfo.prototype.sex = false;

                                /**
                                 * Creates a new OtherPlayerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOtherPlayerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo} OtherPlayerInfo instance
                                 */
                                OtherPlayerInfo.create = function create(properties) {
                                    return new OtherPlayerInfo(properties);
                                };

                                /**
                                 * Encodes the specified OtherPlayerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOtherPlayerInfo} message OtherPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OtherPlayerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.sign);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.icon);
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.vipPoints);
                                    if (message.res != null && message.res.length)
                                        for (var i = 0; i < message.res.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Resources.encode(message.res[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.winCount);
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.totleCount);
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.car);
                                    if (message.props != null && message.props.length)
                                        for (var i = 0; i < message.props.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Prop.encode(message.props[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.sex);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified OtherPlayerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOtherPlayerInfo} message OtherPlayerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OtherPlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an OtherPlayerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo} OtherPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OtherPlayerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.sign = reader.string();
                                            break;
                                        case 4:
                                            message.icon = reader.string();
                                            break;
                                        case 5:
                                            message.vipPoints = reader.int32();
                                            break;
                                        case 6:
                                            if (!(message.res && message.res.length))
                                                message.res = [];
                                            message.res.push($root.com.aoo.chess.comms.protocol.proto.message.Resources.decode(reader, reader.uint32()));
                                            break;
                                        case 7:
                                            message.winCount = reader.int32();
                                            break;
                                        case 8:
                                            message.totleCount = reader.int32();
                                            break;
                                        case 9:
                                            message.car = reader.int32();
                                            break;
                                        case 10:
                                            if (!(message.props && message.props.length))
                                                message.props = [];
                                            message.props.push($root.com.aoo.chess.comms.protocol.proto.message.Prop.decode(reader, reader.uint32()));
                                            break;
                                        case 11:
                                            message.sex = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an OtherPlayerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo} OtherPlayerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OtherPlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an OtherPlayerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                OtherPlayerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id))
                                            return "id: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        if (!$util.isString(message.sign))
                                            return "sign: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        if (!$util.isInteger(message.vipPoints))
                                            return "vipPoints: integer expected";
                                    if (message.res != null && message.hasOwnProperty("res")) {
                                        if (!Array.isArray(message.res))
                                            return "res: array expected";
                                        for (var i = 0; i < message.res.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Resources.verify(message.res[i]);
                                            if (error)
                                                return "res." + error;
                                        }
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        if (!$util.isInteger(message.winCount))
                                            return "winCount: integer expected";
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        if (!$util.isInteger(message.totleCount))
                                            return "totleCount: integer expected";
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        if (!$util.isInteger(message.car))
                                            return "car: integer expected";
                                    if (message.props != null && message.hasOwnProperty("props")) {
                                        if (!Array.isArray(message.props))
                                            return "props: array expected";
                                        for (var i = 0; i < message.props.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Prop.verify(message.props[i]);
                                            if (error)
                                                return "props." + error;
                                        }
                                    }
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        if (typeof message.sex !== "boolean")
                                            return "sex: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates an OtherPlayerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo} OtherPlayerInfo
                                 */
                                OtherPlayerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo();
                                    if (object.id != null)
                                        message.id = object.id | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.sign != null)
                                        message.sign = String(object.sign);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.vipPoints != null)
                                        message.vipPoints = object.vipPoints | 0;
                                    if (object.res) {
                                        if (!Array.isArray(object.res))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.res: array expected");
                                        message.res = [];
                                        for (var i = 0; i < object.res.length; ++i) {
                                            if (typeof object.res[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.res: object expected");
                                            message.res[i] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.fromObject(object.res[i]);
                                        }
                                    }
                                    if (object.winCount != null)
                                        message.winCount = object.winCount | 0;
                                    if (object.totleCount != null)
                                        message.totleCount = object.totleCount | 0;
                                    if (object.car != null)
                                        message.car = object.car | 0;
                                    if (object.props) {
                                        if (!Array.isArray(object.props))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.props: array expected");
                                        message.props = [];
                                        for (var i = 0; i < object.props.length; ++i) {
                                            if (typeof object.props[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo.props: object expected");
                                            message.props[i] = $root.com.aoo.chess.comms.protocol.proto.message.Prop.fromObject(object.props[i]);
                                        }
                                    }
                                    if (object.sex != null)
                                        message.sex = Boolean(object.sex);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an OtherPlayerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo} message OtherPlayerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                OtherPlayerInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.res = [];
                                        object.props = [];
                                    }
                                    if (options.defaults) {
                                        object.id = 0;
                                        object.name = "";
                                        object.sign = "";
                                        object.icon = "";
                                        object.vipPoints = 0;
                                        object.winCount = 0;
                                        object.totleCount = 0;
                                        object.car = 0;
                                        object.sex = false;
                                    }
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        object.id = message.id;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.sign != null && message.hasOwnProperty("sign"))
                                        object.sign = message.sign;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        object.vipPoints = message.vipPoints;
                                    if (message.res && message.res.length) {
                                        object.res = [];
                                        for (var j = 0; j < message.res.length; ++j)
                                            object.res[j] = $root.com.aoo.chess.comms.protocol.proto.message.Resources.toObject(message.res[j], options);
                                    }
                                    if (message.winCount != null && message.hasOwnProperty("winCount"))
                                        object.winCount = message.winCount;
                                    if (message.totleCount != null && message.hasOwnProperty("totleCount"))
                                        object.totleCount = message.totleCount;
                                    if (message.car != null && message.hasOwnProperty("car"))
                                        object.car = message.car;
                                    if (message.props && message.props.length) {
                                        object.props = [];
                                        for (var j = 0; j < message.props.length; ++j)
                                            object.props[j] = $root.com.aoo.chess.comms.protocol.proto.message.Prop.toObject(message.props[j], options);
                                    }
                                    if (message.sex != null && message.hasOwnProperty("sex"))
                                        object.sex = message.sex;
                                    return object;
                                };

                                /**
                                 * Converts this OtherPlayerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OtherPlayerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                OtherPlayerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return OtherPlayerInfo;
                            })();

                            message.PlayerOpt = (function() {

                                /**
                                 * Properties of a PlayerOpt.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerOpt
                                 * @property {number|null} [optType] PlayerOpt optType
                                 * @property {number|null} [playerId] PlayerOpt playerId
                                 */

                                /**
                                 * Constructs a new PlayerOpt.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerOpt.
                                 * @implements IPlayerOpt
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerOpt=} [properties] Properties to set
                                 */
                                function PlayerOpt(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerOpt optType.
                                 * @member {number} optType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @instance
                                 */
                                PlayerOpt.prototype.optType = 0;

                                /**
                                 * PlayerOpt playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @instance
                                 */
                                PlayerOpt.prototype.playerId = 0;

                                /**
                                 * Creates a new PlayerOpt instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerOpt=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerOpt} PlayerOpt instance
                                 */
                                PlayerOpt.create = function create(properties) {
                                    return new PlayerOpt(properties);
                                };

                                /**
                                 * Encodes the specified PlayerOpt message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerOpt.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerOpt} message PlayerOpt message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerOpt.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.optType != null && message.hasOwnProperty("optType"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.optType);
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerOpt message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerOpt.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerOpt} message PlayerOpt message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerOpt.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerOpt message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerOpt} PlayerOpt
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerOpt.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerOpt();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.optType = reader.int32();
                                            break;
                                        case 2:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerOpt message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerOpt} PlayerOpt
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerOpt.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerOpt message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerOpt.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.optType != null && message.hasOwnProperty("optType"))
                                        if (!$util.isInteger(message.optType))
                                            return "optType: integer expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerOpt message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerOpt} PlayerOpt
                                 */
                                PlayerOpt.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerOpt)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerOpt();
                                    if (object.optType != null)
                                        message.optType = object.optType | 0;
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerOpt message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerOpt} message PlayerOpt
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerOpt.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.optType = 0;
                                        object.playerId = 0;
                                    }
                                    if (message.optType != null && message.hasOwnProperty("optType"))
                                        object.optType = message.optType;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerOpt to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerOpt
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerOpt.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerOpt;
                            })();

                            message.OffLinePlayer = (function() {

                                /**
                                 * Properties of an OffLinePlayer.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IOffLinePlayer
                                 */

                                /**
                                 * Constructs a new OffLinePlayer.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents an OffLinePlayer.
                                 * @implements IOffLinePlayer
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOffLinePlayer=} [properties] Properties to set
                                 */
                                function OffLinePlayer(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new OffLinePlayer instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOffLinePlayer=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OffLinePlayer} OffLinePlayer instance
                                 */
                                OffLinePlayer.create = function create(properties) {
                                    return new OffLinePlayer(properties);
                                };

                                /**
                                 * Encodes the specified OffLinePlayer message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OffLinePlayer.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOffLinePlayer} message OffLinePlayer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OffLinePlayer.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified OffLinePlayer message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OffLinePlayer.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOffLinePlayer} message OffLinePlayer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OffLinePlayer.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an OffLinePlayer message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OffLinePlayer} OffLinePlayer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OffLinePlayer.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.OffLinePlayer();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an OffLinePlayer message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OffLinePlayer} OffLinePlayer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OffLinePlayer.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an OffLinePlayer message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                OffLinePlayer.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates an OffLinePlayer message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OffLinePlayer} OffLinePlayer
                                 */
                                OffLinePlayer.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.OffLinePlayer)
                                        return object;
                                    return new $root.com.aoo.chess.comms.protocol.proto.message.OffLinePlayer();
                                };

                                /**
                                 * Creates a plain object from an OffLinePlayer message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.OffLinePlayer} message OffLinePlayer
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                OffLinePlayer.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this OffLinePlayer to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OffLinePlayer
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                OffLinePlayer.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return OffLinePlayer;
                            })();

                            message.ChangeSafeMoney = (function() {

                                /**
                                 * Properties of a ChangeSafeMoney.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IChangeSafeMoney
                                 * @property {number|null} [type] ChangeSafeMoney type
                                 * @property {number|null} [gold] ChangeSafeMoney gold
                                 */

                                /**
                                 * Constructs a new ChangeSafeMoney.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ChangeSafeMoney.
                                 * @implements IChangeSafeMoney
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChangeSafeMoney=} [properties] Properties to set
                                 */
                                function ChangeSafeMoney(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ChangeSafeMoney type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @instance
                                 */
                                ChangeSafeMoney.prototype.type = 0;

                                /**
                                 * ChangeSafeMoney gold.
                                 * @member {number} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @instance
                                 */
                                ChangeSafeMoney.prototype.gold = 0;

                                /**
                                 * Creates a new ChangeSafeMoney instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChangeSafeMoney=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney} ChangeSafeMoney instance
                                 */
                                ChangeSafeMoney.create = function create(properties) {
                                    return new ChangeSafeMoney(properties);
                                };

                                /**
                                 * Encodes the specified ChangeSafeMoney message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChangeSafeMoney} message ChangeSafeMoney message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ChangeSafeMoney.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ChangeSafeMoney message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IChangeSafeMoney} message ChangeSafeMoney message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ChangeSafeMoney.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ChangeSafeMoney message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney} ChangeSafeMoney
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ChangeSafeMoney.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            message.gold = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ChangeSafeMoney message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney} ChangeSafeMoney
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ChangeSafeMoney.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ChangeSafeMoney message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ChangeSafeMoney.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold))
                                            return "gold: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ChangeSafeMoney message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney} ChangeSafeMoney
                                 */
                                ChangeSafeMoney.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.gold != null)
                                        message.gold = object.gold | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ChangeSafeMoney message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney} message ChangeSafeMoney
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ChangeSafeMoney.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = 0;
                                        object.gold = 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        object.gold = message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this ChangeSafeMoney to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ChangeSafeMoney
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ChangeSafeMoney.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ChangeSafeMoney;
                            })();

                            message.PlayerStatMessage = (function() {

                                /**
                                 * Properties of a PlayerStatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerStatMessage
                                 * @property {number|null} [kickOutCount] PlayerStatMessage kickOutCount
                                 */

                                /**
                                 * Constructs a new PlayerStatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerStatMessage.
                                 * @implements IPlayerStatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerStatMessage=} [properties] Properties to set
                                 */
                                function PlayerStatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerStatMessage kickOutCount.
                                 * @member {number} kickOutCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @instance
                                 */
                                PlayerStatMessage.prototype.kickOutCount = 0;

                                /**
                                 * Creates a new PlayerStatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerStatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage} PlayerStatMessage instance
                                 */
                                PlayerStatMessage.create = function create(properties) {
                                    return new PlayerStatMessage(properties);
                                };

                                /**
                                 * Encodes the specified PlayerStatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerStatMessage} message PlayerStatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerStatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.kickOutCount != null && message.hasOwnProperty("kickOutCount"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.kickOutCount);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerStatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerStatMessage} message PlayerStatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerStatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerStatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage} PlayerStatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerStatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.kickOutCount = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerStatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage} PlayerStatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerStatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerStatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerStatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.kickOutCount != null && message.hasOwnProperty("kickOutCount"))
                                        if (!$util.isInteger(message.kickOutCount))
                                            return "kickOutCount: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerStatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage} PlayerStatMessage
                                 */
                                PlayerStatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage();
                                    if (object.kickOutCount != null)
                                        message.kickOutCount = object.kickOutCount | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerStatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage} message PlayerStatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerStatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.kickOutCount = 0;
                                    if (message.kickOutCount != null && message.hasOwnProperty("kickOutCount"))
                                        object.kickOutCount = message.kickOutCount;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerStatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerStatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerStatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerStatMessage;
                            })();

                            message.GiftGiving = (function() {

                                /**
                                 * Properties of a GiftGiving.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGiftGiving
                                 * @property {number|null} [playerId] GiftGiving playerId
                                 * @property {number|null} [givingPlayerId] GiftGiving givingPlayerId
                                 * @property {number|null} [resourcesId] GiftGiving resourcesId
                                 */

                                /**
                                 * Constructs a new GiftGiving.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GiftGiving.
                                 * @implements IGiftGiving
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGiftGiving=} [properties] Properties to set
                                 */
                                function GiftGiving(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GiftGiving playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @instance
                                 */
                                GiftGiving.prototype.playerId = 0;

                                /**
                                 * GiftGiving givingPlayerId.
                                 * @member {number} givingPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @instance
                                 */
                                GiftGiving.prototype.givingPlayerId = 0;

                                /**
                                 * GiftGiving resourcesId.
                                 * @member {number} resourcesId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @instance
                                 */
                                GiftGiving.prototype.resourcesId = 0;

                                /**
                                 * Creates a new GiftGiving instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGiftGiving=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GiftGiving} GiftGiving instance
                                 */
                                GiftGiving.create = function create(properties) {
                                    return new GiftGiving(properties);
                                };

                                /**
                                 * Encodes the specified GiftGiving message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GiftGiving.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGiftGiving} message GiftGiving message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GiftGiving.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.givingPlayerId != null && message.hasOwnProperty("givingPlayerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.givingPlayerId);
                                    if (message.resourcesId != null && message.hasOwnProperty("resourcesId"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.resourcesId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GiftGiving message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GiftGiving.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGiftGiving} message GiftGiving message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GiftGiving.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GiftGiving message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GiftGiving} GiftGiving
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GiftGiving.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GiftGiving();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.givingPlayerId = reader.int32();
                                            break;
                                        case 3:
                                            message.resourcesId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GiftGiving message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GiftGiving} GiftGiving
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GiftGiving.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GiftGiving message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GiftGiving.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.givingPlayerId != null && message.hasOwnProperty("givingPlayerId"))
                                        if (!$util.isInteger(message.givingPlayerId))
                                            return "givingPlayerId: integer expected";
                                    if (message.resourcesId != null && message.hasOwnProperty("resourcesId"))
                                        if (!$util.isInteger(message.resourcesId))
                                            return "resourcesId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a GiftGiving message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GiftGiving} GiftGiving
                                 */
                                GiftGiving.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GiftGiving)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.GiftGiving();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.givingPlayerId != null)
                                        message.givingPlayerId = object.givingPlayerId | 0;
                                    if (object.resourcesId != null)
                                        message.resourcesId = object.resourcesId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GiftGiving message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GiftGiving} message GiftGiving
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GiftGiving.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.givingPlayerId = 0;
                                        object.resourcesId = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.givingPlayerId != null && message.hasOwnProperty("givingPlayerId"))
                                        object.givingPlayerId = message.givingPlayerId;
                                    if (message.resourcesId != null && message.hasOwnProperty("resourcesId"))
                                        object.resourcesId = message.resourcesId;
                                    return object;
                                };

                                /**
                                 * Converts this GiftGiving to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GiftGiving
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GiftGiving.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GiftGiving;
                            })();

                            message.DrawMoneyTreeResult = (function() {

                                /**
                                 * Properties of a DrawMoneyTreeResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IDrawMoneyTreeResult
                                 * @property {number|Long|null} [gold] DrawMoneyTreeResult gold
                                 * @property {number|Long|null} [time] DrawMoneyTreeResult time
                                 */

                                /**
                                 * Constructs a new DrawMoneyTreeResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a DrawMoneyTreeResult.
                                 * @implements IDrawMoneyTreeResult
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDrawMoneyTreeResult=} [properties] Properties to set
                                 */
                                function DrawMoneyTreeResult(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * DrawMoneyTreeResult gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @instance
                                 */
                                DrawMoneyTreeResult.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * DrawMoneyTreeResult time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @instance
                                 */
                                DrawMoneyTreeResult.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new DrawMoneyTreeResult instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDrawMoneyTreeResult=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult} DrawMoneyTreeResult instance
                                 */
                                DrawMoneyTreeResult.create = function create(properties) {
                                    return new DrawMoneyTreeResult(properties);
                                };

                                /**
                                 * Encodes the specified DrawMoneyTreeResult message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDrawMoneyTreeResult} message DrawMoneyTreeResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DrawMoneyTreeResult.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gold);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified DrawMoneyTreeResult message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDrawMoneyTreeResult} message DrawMoneyTreeResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DrawMoneyTreeResult.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a DrawMoneyTreeResult message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult} DrawMoneyTreeResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DrawMoneyTreeResult.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.gold = reader.int64();
                                            break;
                                        case 2:
                                            message.time = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a DrawMoneyTreeResult message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult} DrawMoneyTreeResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DrawMoneyTreeResult.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a DrawMoneyTreeResult message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                DrawMoneyTreeResult.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a DrawMoneyTreeResult message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult} DrawMoneyTreeResult
                                 */
                                DrawMoneyTreeResult.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult();
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a DrawMoneyTreeResult message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult} message DrawMoneyTreeResult
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                DrawMoneyTreeResult.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    }
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    return object;
                                };

                                /**
                                 * Converts this DrawMoneyTreeResult to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DrawMoneyTreeResult
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                DrawMoneyTreeResult.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return DrawMoneyTreeResult;
                            })();

                            message.ExchangeResource = (function() {

                                /**
                                 * Properties of an ExchangeResource.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IExchangeResource
                                 * @property {number|null} [resourceId] ExchangeResource resourceId
                                 * @property {number|null} [num] ExchangeResource num
                                 */

                                /**
                                 * Constructs a new ExchangeResource.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents an ExchangeResource.
                                 * @implements IExchangeResource
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExchangeResource=} [properties] Properties to set
                                 */
                                function ExchangeResource(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ExchangeResource resourceId.
                                 * @member {number} resourceId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @instance
                                 */
                                ExchangeResource.prototype.resourceId = 0;

                                /**
                                 * ExchangeResource num.
                                 * @member {number} num
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @instance
                                 */
                                ExchangeResource.prototype.num = 0;

                                /**
                                 * Creates a new ExchangeResource instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExchangeResource=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExchangeResource} ExchangeResource instance
                                 */
                                ExchangeResource.create = function create(properties) {
                                    return new ExchangeResource(properties);
                                };

                                /**
                                 * Encodes the specified ExchangeResource message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ExchangeResource.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExchangeResource} message ExchangeResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ExchangeResource.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.resourceId);
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ExchangeResource message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ExchangeResource.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IExchangeResource} message ExchangeResource message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ExchangeResource.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an ExchangeResource message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExchangeResource} ExchangeResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ExchangeResource.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ExchangeResource();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.resourceId = reader.int32();
                                            break;
                                        case 2:
                                            message.num = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an ExchangeResource message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExchangeResource} ExchangeResource
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ExchangeResource.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an ExchangeResource message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ExchangeResource.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        if (!$util.isInteger(message.resourceId))
                                            return "resourceId: integer expected";
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        if (!$util.isInteger(message.num))
                                            return "num: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates an ExchangeResource message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ExchangeResource} ExchangeResource
                                 */
                                ExchangeResource.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ExchangeResource)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ExchangeResource();
                                    if (object.resourceId != null)
                                        message.resourceId = object.resourceId | 0;
                                    if (object.num != null)
                                        message.num = object.num | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an ExchangeResource message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ExchangeResource} message ExchangeResource
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ExchangeResource.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.resourceId = 0;
                                        object.num = 0;
                                    }
                                    if (message.resourceId != null && message.hasOwnProperty("resourceId"))
                                        object.resourceId = message.resourceId;
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        object.num = message.num;
                                    return object;
                                };

                                /**
                                 * Converts this ExchangeResource to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ExchangeResource
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ExchangeResource.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ExchangeResource;
                            })();

                            message.ReCustomerMsg = (function() {

                                /**
                                 * Properties of a ReCustomerMsg.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IReCustomerMsg
                                 * @property {number|null} [playerId] ReCustomerMsg playerId
                                 * @property {number|Long|null} [id] ReCustomerMsg id
                                 * @property {string|null} [msg] ReCustomerMsg msg
                                 * @property {number|Long|null} [time] ReCustomerMsg time
                                 */

                                /**
                                 * Constructs a new ReCustomerMsg.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ReCustomerMsg.
                                 * @implements IReCustomerMsg
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReCustomerMsg=} [properties] Properties to set
                                 */
                                function ReCustomerMsg(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ReCustomerMsg playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @instance
                                 */
                                ReCustomerMsg.prototype.playerId = 0;

                                /**
                                 * ReCustomerMsg id.
                                 * @member {number|Long} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @instance
                                 */
                                ReCustomerMsg.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ReCustomerMsg msg.
                                 * @member {string} msg
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @instance
                                 */
                                ReCustomerMsg.prototype.msg = "";

                                /**
                                 * ReCustomerMsg time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @instance
                                 */
                                ReCustomerMsg.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new ReCustomerMsg instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReCustomerMsg=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg} ReCustomerMsg instance
                                 */
                                ReCustomerMsg.create = function create(properties) {
                                    return new ReCustomerMsg(properties);
                                };

                                /**
                                 * Encodes the specified ReCustomerMsg message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReCustomerMsg} message ReCustomerMsg message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReCustomerMsg.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.time);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ReCustomerMsg message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReCustomerMsg} message ReCustomerMsg message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ReCustomerMsg.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ReCustomerMsg message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg} ReCustomerMsg
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReCustomerMsg.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.id = reader.int64();
                                            break;
                                        case 3:
                                            message.msg = reader.string();
                                            break;
                                        case 4:
                                            message.time = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ReCustomerMsg message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg} ReCustomerMsg
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ReCustomerMsg.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ReCustomerMsg message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ReCustomerMsg.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                            return "id: integer|Long expected";
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        if (!$util.isString(message.msg))
                                            return "msg: string expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a ReCustomerMsg message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg} ReCustomerMsg
                                 */
                                ReCustomerMsg.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.id != null)
                                        if ($util.Long)
                                            (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                        else if (typeof object.id === "string")
                                            message.id = parseInt(object.id, 10);
                                        else if (typeof object.id === "number")
                                            message.id = object.id;
                                        else if (typeof object.id === "object")
                                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                                    if (object.msg != null)
                                        message.msg = String(object.msg);
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ReCustomerMsg message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg} message ReCustomerMsg
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ReCustomerMsg.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.id = options.longs === String ? "0" : 0;
                                        object.msg = "";
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (typeof message.id === "number")
                                            object.id = options.longs === String ? String(message.id) : message.id;
                                        else
                                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        object.msg = message.msg;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    return object;
                                };

                                /**
                                 * Converts this ReCustomerMsg to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ReCustomerMsg
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ReCustomerMsg.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ReCustomerMsg;
                            })();

                            message.CustomerMsgInfoList = (function() {

                                /**
                                 * Properties of a CustomerMsgInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ICustomerMsgInfoList
                                 * @property {number|Long|null} [lastSendTime] CustomerMsgInfoList lastSendTime
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo>|null} [infos] CustomerMsgInfoList infos
                                 */

                                /**
                                 * Constructs a new CustomerMsgInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a CustomerMsgInfoList.
                                 * @implements ICustomerMsgInfoList
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfoList=} [properties] Properties to set
                                 */
                                function CustomerMsgInfoList(properties) {
                                    this.infos = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * CustomerMsgInfoList lastSendTime.
                                 * @member {number|Long} lastSendTime
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @instance
                                 */
                                CustomerMsgInfoList.prototype.lastSendTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * CustomerMsgInfoList infos.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @instance
                                 */
                                CustomerMsgInfoList.prototype.infos = $util.emptyArray;

                                /**
                                 * Creates a new CustomerMsgInfoList instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfoList=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList} CustomerMsgInfoList instance
                                 */
                                CustomerMsgInfoList.create = function create(properties) {
                                    return new CustomerMsgInfoList(properties);
                                };

                                /**
                                 * Encodes the specified CustomerMsgInfoList message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfoList} message CustomerMsgInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CustomerMsgInfoList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.lastSendTime != null && message.hasOwnProperty("lastSendTime"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.lastSendTime);
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.encode(message.infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified CustomerMsgInfoList message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfoList} message CustomerMsgInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CustomerMsgInfoList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a CustomerMsgInfoList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList} CustomerMsgInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CustomerMsgInfoList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.lastSendTime = reader.int64();
                                            break;
                                        case 2:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a CustomerMsgInfoList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList} CustomerMsgInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CustomerMsgInfoList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a CustomerMsgInfoList message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                CustomerMsgInfoList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.lastSendTime != null && message.hasOwnProperty("lastSendTime"))
                                        if (!$util.isInteger(message.lastSendTime) && !(message.lastSendTime && $util.isInteger(message.lastSendTime.low) && $util.isInteger(message.lastSendTime.high)))
                                            return "lastSendTime: integer|Long expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a CustomerMsgInfoList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList} CustomerMsgInfoList
                                 */
                                CustomerMsgInfoList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList();
                                    if (object.lastSendTime != null)
                                        if ($util.Long)
                                            (message.lastSendTime = $util.Long.fromValue(object.lastSendTime)).unsigned = false;
                                        else if (typeof object.lastSendTime === "string")
                                            message.lastSendTime = parseInt(object.lastSendTime, 10);
                                        else if (typeof object.lastSendTime === "number")
                                            message.lastSendTime = object.lastSendTime;
                                        else if (typeof object.lastSendTime === "object")
                                            message.lastSendTime = new $util.LongBits(object.lastSendTime.low >>> 0, object.lastSendTime.high >>> 0).toNumber();
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.fromObject(object.infos[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a CustomerMsgInfoList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList} message CustomerMsgInfoList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                CustomerMsgInfoList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.infos = [];
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.lastSendTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.lastSendTime = options.longs === String ? "0" : 0;
                                    if (message.lastSendTime != null && message.hasOwnProperty("lastSendTime"))
                                        if (typeof message.lastSendTime === "number")
                                            object.lastSendTime = options.longs === String ? String(message.lastSendTime) : message.lastSendTime;
                                        else
                                            object.lastSendTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastSendTime) : options.longs === Number ? new $util.LongBits(message.lastSendTime.low >>> 0, message.lastSendTime.high >>> 0).toNumber() : message.lastSendTime;
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.toObject(message.infos[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this CustomerMsgInfoList to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfoList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                CustomerMsgInfoList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return CustomerMsgInfoList;
                            })();

                            /**
                             * CustomerMsgType enum.
                             * @name com.aoo.chess.comms.protocol.proto.message.CustomerMsgType
                             * @enum {string}
                             * @property {number} TYPE_PLAYER=0 TYPE_PLAYER value
                             * @property {number} TYPE_CUSTOMER=1 TYPE_CUSTOMER value
                             */
                            message.CustomerMsgType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "TYPE_PLAYER"] = 0;
                                values[valuesById[1] = "TYPE_CUSTOMER"] = 1;
                                return values;
                            })();

                            message.CustomerMsgInfo = (function() {

                                /**
                                 * Properties of a CustomerMsgInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ICustomerMsgInfo
                                 * @property {com.aoo.chess.comms.protocol.proto.message.CustomerMsgType|null} [type] CustomerMsgInfo type
                                 * @property {string|null} [msg] CustomerMsgInfo msg
                                 * @property {number|Long|null} [time] CustomerMsgInfo time
                                 */

                                /**
                                 * Constructs a new CustomerMsgInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a CustomerMsgInfo.
                                 * @implements ICustomerMsgInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo=} [properties] Properties to set
                                 */
                                function CustomerMsgInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * CustomerMsgInfo type.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.CustomerMsgType} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @instance
                                 */
                                CustomerMsgInfo.prototype.type = 0;

                                /**
                                 * CustomerMsgInfo msg.
                                 * @member {string} msg
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @instance
                                 */
                                CustomerMsgInfo.prototype.msg = "";

                                /**
                                 * CustomerMsgInfo time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @instance
                                 */
                                CustomerMsgInfo.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new CustomerMsgInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo} CustomerMsgInfo instance
                                 */
                                CustomerMsgInfo.create = function create(properties) {
                                    return new CustomerMsgInfo(properties);
                                };

                                /**
                                 * Encodes the specified CustomerMsgInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo} message CustomerMsgInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CustomerMsgInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.time);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified CustomerMsgInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ICustomerMsgInfo} message CustomerMsgInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                CustomerMsgInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a CustomerMsgInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo} CustomerMsgInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CustomerMsgInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            message.msg = reader.string();
                                            break;
                                        case 4:
                                            message.time = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a CustomerMsgInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo} CustomerMsgInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                CustomerMsgInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a CustomerMsgInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                CustomerMsgInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        switch (message.type) {
                                        default:
                                            return "type: enum value expected";
                                        case 0:
                                        case 1:
                                            break;
                                        }
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        if (!$util.isString(message.msg))
                                            return "msg: string expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a CustomerMsgInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo} CustomerMsgInfo
                                 */
                                CustomerMsgInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo();
                                    switch (object.type) {
                                    case "TYPE_PLAYER":
                                    case 0:
                                        message.type = 0;
                                        break;
                                    case "TYPE_CUSTOMER":
                                    case 1:
                                        message.type = 1;
                                        break;
                                    }
                                    if (object.msg != null)
                                        message.msg = String(object.msg);
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a CustomerMsgInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo} message CustomerMsgInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                CustomerMsgInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = options.enums === String ? "TYPE_PLAYER" : 0;
                                        object.msg = "";
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = options.enums === String ? $root.com.aoo.chess.comms.protocol.proto.message.CustomerMsgType[message.type] : message.type;
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        object.msg = message.msg;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    return object;
                                };

                                /**
                                 * Converts this CustomerMsgInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.CustomerMsgInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                CustomerMsgInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return CustomerMsgInfo;
                            })();

                            message.PlayerLoginAwardMessage = (function() {

                                /**
                                 * Properties of a PlayerLoginAwardMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerLoginAwardMessage
                                 * @property {number|null} [day] PlayerLoginAwardMessage day
                                 * @property {boolean|null} [draw] PlayerLoginAwardMessage draw
                                 */

                                /**
                                 * Constructs a new PlayerLoginAwardMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerLoginAwardMessage.
                                 * @implements IPlayerLoginAwardMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLoginAwardMessage=} [properties] Properties to set
                                 */
                                function PlayerLoginAwardMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerLoginAwardMessage day.
                                 * @member {number} day
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @instance
                                 */
                                PlayerLoginAwardMessage.prototype.day = 0;

                                /**
                                 * PlayerLoginAwardMessage draw.
                                 * @member {boolean} draw
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @instance
                                 */
                                PlayerLoginAwardMessage.prototype.draw = false;

                                /**
                                 * Creates a new PlayerLoginAwardMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLoginAwardMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage} PlayerLoginAwardMessage instance
                                 */
                                PlayerLoginAwardMessage.create = function create(properties) {
                                    return new PlayerLoginAwardMessage(properties);
                                };

                                /**
                                 * Encodes the specified PlayerLoginAwardMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLoginAwardMessage} message PlayerLoginAwardMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerLoginAwardMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.day != null && message.hasOwnProperty("day"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.day);
                                    if (message.draw != null && message.hasOwnProperty("draw"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.draw);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerLoginAwardMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLoginAwardMessage} message PlayerLoginAwardMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerLoginAwardMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerLoginAwardMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage} PlayerLoginAwardMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerLoginAwardMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.day = reader.int32();
                                            break;
                                        case 2:
                                            message.draw = reader.bool();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerLoginAwardMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage} PlayerLoginAwardMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerLoginAwardMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerLoginAwardMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerLoginAwardMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.day != null && message.hasOwnProperty("day"))
                                        if (!$util.isInteger(message.day))
                                            return "day: integer expected";
                                    if (message.draw != null && message.hasOwnProperty("draw"))
                                        if (typeof message.draw !== "boolean")
                                            return "draw: boolean expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerLoginAwardMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage} PlayerLoginAwardMessage
                                 */
                                PlayerLoginAwardMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage();
                                    if (object.day != null)
                                        message.day = object.day | 0;
                                    if (object.draw != null)
                                        message.draw = Boolean(object.draw);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerLoginAwardMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage} message PlayerLoginAwardMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerLoginAwardMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.day = 0;
                                        object.draw = false;
                                    }
                                    if (message.day != null && message.hasOwnProperty("day"))
                                        object.day = message.day;
                                    if (message.draw != null && message.hasOwnProperty("draw"))
                                        object.draw = message.draw;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerLoginAwardMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLoginAwardMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerLoginAwardMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerLoginAwardMessage;
                            })();

                            message.Prop = (function() {

                                /**
                                 * Properties of a Prop.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IProp
                                 * @property {number|null} [propId] Prop propId
                                 * @property {number|null} [num] Prop num
                                 */

                                /**
                                 * Constructs a new Prop.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a Prop.
                                 * @implements IProp
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IProp=} [properties] Properties to set
                                 */
                                function Prop(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Prop propId.
                                 * @member {number} propId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @instance
                                 */
                                Prop.prototype.propId = 0;

                                /**
                                 * Prop num.
                                 * @member {number} num
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @instance
                                 */
                                Prop.prototype.num = 0;

                                /**
                                 * Creates a new Prop instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IProp=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Prop} Prop instance
                                 */
                                Prop.create = function create(properties) {
                                    return new Prop(properties);
                                };

                                /**
                                 * Encodes the specified Prop message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Prop.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IProp} message Prop message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Prop.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.propId != null && message.hasOwnProperty("propId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.propId);
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Prop message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Prop.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IProp} message Prop message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Prop.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Prop message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Prop} Prop
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Prop.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.Prop();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.propId = reader.int32();
                                            break;
                                        case 2:
                                            message.num = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Prop message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Prop} Prop
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Prop.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Prop message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Prop.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.propId != null && message.hasOwnProperty("propId"))
                                        if (!$util.isInteger(message.propId))
                                            return "propId: integer expected";
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        if (!$util.isInteger(message.num))
                                            return "num: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Prop message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Prop} Prop
                                 */
                                Prop.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.Prop)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.Prop();
                                    if (object.propId != null)
                                        message.propId = object.propId | 0;
                                    if (object.num != null)
                                        message.num = object.num | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Prop message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.Prop} message Prop
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Prop.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.propId = 0;
                                        object.num = 0;
                                    }
                                    if (message.propId != null && message.hasOwnProperty("propId"))
                                        object.propId = message.propId;
                                    if (message.num != null && message.hasOwnProperty("num"))
                                        object.num = message.num;
                                    return object;
                                };

                                /**
                                 * Converts this Prop to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Prop
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Prop.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Prop;
                            })();

                            message.Ready = (function() {

                                /**
                                 * Properties of a Ready.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IReady
                                 * @property {number|null} [playerId] Ready playerId
                                 */

                                /**
                                 * Constructs a new Ready.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 玩家准备
                                 * @implements IReady
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReady=} [properties] Properties to set
                                 */
                                function Ready(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Ready playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @instance
                                 */
                                Ready.prototype.playerId = 0;

                                /**
                                 * Creates a new Ready instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReady=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Ready} Ready instance
                                 */
                                Ready.create = function create(properties) {
                                    return new Ready(properties);
                                };

                                /**
                                 * Encodes the specified Ready message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Ready.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReady} message Ready message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Ready.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Ready message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Ready.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IReady} message Ready message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Ready.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Ready message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Ready} Ready
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Ready.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.Ready();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Ready message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Ready} Ready
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Ready.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Ready message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Ready.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Ready message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Ready} Ready
                                 */
                                Ready.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.Ready)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.Ready();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Ready message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.Ready} message Ready
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Ready.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this Ready to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Ready
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Ready.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Ready;
                            })();

                            message.ZhajinhuaRoomInfo = (function() {

                                /**
                                 * Properties of a ZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaRoomInfo
                                 * @property {number|null} [round] 当前轮数
                                 * @property {number|null} [times] 时间
                                 * @property {number|null} [totleBetGold] 总押注金额
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>|null} [infos] 房间中的玩家信息
                                 * @property {number|null} [bankerIndex] 庄家位置
                                 * @property {number|null} [state] 当前状态
                                 * @property {boolean|null} [look] ZhajinhuaRoomInfo look
                                 * @property {number|null} [lastBetGold] 最后押注的金额
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards|null} [cards] 自己的牌 如果看牌了就会发送
                                 * @property {number|null} [currPlayerId] 当前出售的玩家编号
                                 */

                                /**
                                 * Constructs a new ZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花房间信息
                                 * @implements IZhajinhuaRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaRoomInfo=} [properties] Properties to set
                                 */
                                function ZhajinhuaRoomInfo(properties) {
                                    this.infos = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 当前轮数
                                 * @member {number} round
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.round = 0;

                                /**
                                 * 时间
                                 * @member {number} times
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.times = 0;

                                /**
                                 * 总押注金额
                                 * @member {number} totleBetGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.totleBetGold = 0;

                                /**
                                 * 房间中的玩家信息
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.infos = $util.emptyArray;

                                /**
                                 * 庄家位置
                                 * @member {number} bankerIndex
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.bankerIndex = 0;

                                /**
                                 * 当前状态
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.state = 0;

                                /**
                                 * ZhajinhuaRoomInfo look.
                                 * @member {boolean} look
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.look = false;

                                /**
                                 * 最后押注的金额
                                 * @member {number} lastBetGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.lastBetGold = 0;

                                /**
                                 * 自己的牌 如果看牌了就会发送
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards|null|undefined} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.cards = null;

                                /**
                                 * 当前出售的玩家编号
                                 * @member {number} currPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 */
                                ZhajinhuaRoomInfo.prototype.currPlayerId = 0;

                                /**
                                 * Creates a new ZhajinhuaRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo} ZhajinhuaRoomInfo instance
                                 */
                                ZhajinhuaRoomInfo.create = function create(properties) {
                                    return new ZhajinhuaRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaRoomInfo} message ZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.round != null && message.hasOwnProperty("round"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.round);
                                    if (message.times != null && message.hasOwnProperty("times"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.times);
                                    if (message.totleBetGold != null && message.hasOwnProperty("totleBetGold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totleBetGold);
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.encode(message.infos[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.bankerIndex != null && message.hasOwnProperty("bankerIndex"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.bankerIndex);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.look);
                                    if (message.lastBetGold != null && message.hasOwnProperty("lastBetGold"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.lastBetGold);
                                    if (message.cards != null && message.hasOwnProperty("cards"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.encode(message.cards, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                                    if (message.currPlayerId != null && message.hasOwnProperty("currPlayerId"))
                                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.currPlayerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaRoomInfo} message ZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo} ZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.round = reader.int32();
                                            break;
                                        case 2:
                                            message.times = reader.int32();
                                            break;
                                        case 3:
                                            message.totleBetGold = reader.int32();
                                            break;
                                        case 4:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            message.bankerIndex = reader.int32();
                                            break;
                                        case 6:
                                            message.state = reader.int32();
                                            break;
                                        case 7:
                                            message.look = reader.bool();
                                            break;
                                        case 8:
                                            message.lastBetGold = reader.int32();
                                            break;
                                        case 9:
                                            message.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.decode(reader, reader.uint32());
                                            break;
                                        case 10:
                                            message.currPlayerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo} ZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.round != null && message.hasOwnProperty("round"))
                                        if (!$util.isInteger(message.round))
                                            return "round: integer expected";
                                    if (message.times != null && message.hasOwnProperty("times"))
                                        if (!$util.isInteger(message.times))
                                            return "times: integer expected";
                                    if (message.totleBetGold != null && message.hasOwnProperty("totleBetGold"))
                                        if (!$util.isInteger(message.totleBetGold))
                                            return "totleBetGold: integer expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    if (message.bankerIndex != null && message.hasOwnProperty("bankerIndex"))
                                        if (!$util.isInteger(message.bankerIndex))
                                            return "bankerIndex: integer expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        if (typeof message.look !== "boolean")
                                            return "look: boolean expected";
                                    if (message.lastBetGold != null && message.hasOwnProperty("lastBetGold"))
                                        if (!$util.isInteger(message.lastBetGold))
                                            return "lastBetGold: integer expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify(message.cards);
                                        if (error)
                                            return "cards." + error;
                                    }
                                    if (message.currPlayerId != null && message.hasOwnProperty("currPlayerId"))
                                        if (!$util.isInteger(message.currPlayerId))
                                            return "currPlayerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo} ZhajinhuaRoomInfo
                                 */
                                ZhajinhuaRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo();
                                    if (object.round != null)
                                        message.round = object.round | 0;
                                    if (object.times != null)
                                        message.times = object.times | 0;
                                    if (object.totleBetGold != null)
                                        message.totleBetGold = object.totleBetGold | 0;
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.fromObject(object.infos[i]);
                                        }
                                    }
                                    if (object.bankerIndex != null)
                                        message.bankerIndex = object.bankerIndex | 0;
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.look != null)
                                        message.look = Boolean(object.look);
                                    if (object.lastBetGold != null)
                                        message.lastBetGold = object.lastBetGold | 0;
                                    if (object.cards != null) {
                                        if (typeof object.cards !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo.cards: object expected");
                                        message.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.fromObject(object.cards);
                                    }
                                    if (object.currPlayerId != null)
                                        message.currPlayerId = object.currPlayerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo} message ZhajinhuaRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.infos = [];
                                    if (options.defaults) {
                                        object.round = 0;
                                        object.times = 0;
                                        object.totleBetGold = 0;
                                        object.bankerIndex = 0;
                                        object.state = 0;
                                        object.look = false;
                                        object.lastBetGold = 0;
                                        object.cards = null;
                                        object.currPlayerId = 0;
                                    }
                                    if (message.round != null && message.hasOwnProperty("round"))
                                        object.round = message.round;
                                    if (message.times != null && message.hasOwnProperty("times"))
                                        object.times = message.times;
                                    if (message.totleBetGold != null && message.hasOwnProperty("totleBetGold"))
                                        object.totleBetGold = message.totleBetGold;
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.toObject(message.infos[j], options);
                                    }
                                    if (message.bankerIndex != null && message.hasOwnProperty("bankerIndex"))
                                        object.bankerIndex = message.bankerIndex;
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.look != null && message.hasOwnProperty("look"))
                                        object.look = message.look;
                                    if (message.lastBetGold != null && message.hasOwnProperty("lastBetGold"))
                                        object.lastBetGold = message.lastBetGold;
                                    if (message.cards != null && message.hasOwnProperty("cards"))
                                        object.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.toObject(message.cards, options);
                                    if (message.currPlayerId != null && message.hasOwnProperty("currPlayerId"))
                                        object.currPlayerId = message.currPlayerId;
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaRoomInfo;
                            })();

                            message.LookCard = (function() {

                                /**
                                 * Properties of a LookCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILookCard
                                 * @property {number|null} [playerId] LookCard playerId
                                 */

                                /**
                                 * Constructs a new LookCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LookCard.
                                 * @implements ILookCard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILookCard=} [properties] Properties to set
                                 */
                                function LookCard(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LookCard playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @instance
                                 */
                                LookCard.prototype.playerId = 0;

                                /**
                                 * Creates a new LookCard instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILookCard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LookCard} LookCard instance
                                 */
                                LookCard.create = function create(properties) {
                                    return new LookCard(properties);
                                };

                                /**
                                 * Encodes the specified LookCard message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LookCard.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILookCard} message LookCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LookCard.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LookCard message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LookCard.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILookCard} message LookCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LookCard.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LookCard message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LookCard} LookCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LookCard.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LookCard();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LookCard message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LookCard} LookCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LookCard.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LookCard message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LookCard.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a LookCard message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LookCard} LookCard
                                 */
                                LookCard.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LookCard)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LookCard();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LookCard message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LookCard} message LookCard
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LookCard.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this LookCard to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LookCard
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LookCard.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LookCard;
                            })();

                            message.ZhajinhuaCards = (function() {

                                /**
                                 * Properties of a ZhajinhuaCards.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaCards
                                 * @property {number|null} [type] ZhajinhuaCards type
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>|null} [card] ZhajinhuaCards card
                                 */

                                /**
                                 * Constructs a new ZhajinhuaCards.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花牌組
                                 * @implements IZhajinhuaCards
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards=} [properties] Properties to set
                                 */
                                function ZhajinhuaCards(properties) {
                                    this.card = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaCards type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @instance
                                 */
                                ZhajinhuaCards.prototype.type = 0;

                                /**
                                 * ZhajinhuaCards card.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>} card
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @instance
                                 */
                                ZhajinhuaCards.prototype.card = $util.emptyArray;

                                /**
                                 * Creates a new ZhajinhuaCards instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards} ZhajinhuaCards instance
                                 */
                                ZhajinhuaCards.create = function create(properties) {
                                    return new ZhajinhuaCards(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaCards message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards} message ZhajinhuaCards message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaCards.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.card != null && message.card.length)
                                        for (var i = 0; i < message.card.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Card.encode(message.card[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaCards message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards} message ZhajinhuaCards message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaCards.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaCards message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards} ZhajinhuaCards
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaCards.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            if (!(message.card && message.card.length))
                                                message.card = [];
                                            message.card.push($root.com.aoo.chess.comms.protocol.proto.message.Card.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaCards message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards} ZhajinhuaCards
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaCards.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaCards message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaCards.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.card != null && message.hasOwnProperty("card")) {
                                        if (!Array.isArray(message.card))
                                            return "card: array expected";
                                        for (var i = 0; i < message.card.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Card.verify(message.card[i]);
                                            if (error)
                                                return "card." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaCards message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards} ZhajinhuaCards
                                 */
                                ZhajinhuaCards.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.card) {
                                        if (!Array.isArray(object.card))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.card: array expected");
                                        message.card = [];
                                        for (var i = 0; i < object.card.length; ++i) {
                                            if (typeof object.card[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.card: object expected");
                                            message.card[i] = $root.com.aoo.chess.comms.protocol.proto.message.Card.fromObject(object.card[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaCards message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards} message ZhajinhuaCards
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaCards.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.card = [];
                                    if (options.defaults)
                                        object.type = 0;
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.card && message.card.length) {
                                        object.card = [];
                                        for (var j = 0; j < message.card.length; ++j)
                                            object.card[j] = $root.com.aoo.chess.comms.protocol.proto.message.Card.toObject(message.card[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaCards to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaCards.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaCards;
                            })();

                            message.ZhajinhuaGameStart = (function() {

                                /**
                                 * Properties of a ZhajinhuaGameStart.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaGameStart
                                 * @property {number|null} [money] ZhajinhuaGameStart money
                                 */

                                /**
                                 * Constructs a new ZhajinhuaGameStart.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花游戏开始
                                 * @implements IZhajinhuaGameStart
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaGameStart=} [properties] Properties to set
                                 */
                                function ZhajinhuaGameStart(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaGameStart money.
                                 * @member {number} money
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @instance
                                 */
                                ZhajinhuaGameStart.prototype.money = 0;

                                /**
                                 * Creates a new ZhajinhuaGameStart instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaGameStart=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart} ZhajinhuaGameStart instance
                                 */
                                ZhajinhuaGameStart.create = function create(properties) {
                                    return new ZhajinhuaGameStart(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaGameStart message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaGameStart} message ZhajinhuaGameStart message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaGameStart.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.money);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaGameStart message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaGameStart} message ZhajinhuaGameStart message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaGameStart.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaGameStart message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart} ZhajinhuaGameStart
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaGameStart.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.money = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaGameStart message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart} ZhajinhuaGameStart
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaGameStart.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaGameStart message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaGameStart.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        if (!$util.isInteger(message.money))
                                            return "money: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaGameStart message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart} ZhajinhuaGameStart
                                 */
                                ZhajinhuaGameStart.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart();
                                    if (object.money != null)
                                        message.money = object.money | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaGameStart message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart} message ZhajinhuaGameStart
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaGameStart.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.money = 0;
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        object.money = message.money;
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaGameStart to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaGameStart
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaGameStart.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaGameStart;
                            })();

                            message.ZhajinhuaStartResult = (function() {

                                /**
                                 * Properties of a ZhajinhuaStartResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaStartResult
                                 * @property {boolean|null} [sucess] ZhajinhuaStartResult sucess
                                 * @property {number|null} [playerId] ZhajinhuaStartResult playerId
                                 * @property {number|Long|null} [currentGold] ZhajinhuaStartResult currentGold
                                 */

                                /**
                                 * Constructs a new ZhajinhuaStartResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花开始结果
                                 * @implements IZhajinhuaStartResult
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult=} [properties] Properties to set
                                 */
                                function ZhajinhuaStartResult(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaStartResult sucess.
                                 * @member {boolean} sucess
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @instance
                                 */
                                ZhajinhuaStartResult.prototype.sucess = false;

                                /**
                                 * ZhajinhuaStartResult playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @instance
                                 */
                                ZhajinhuaStartResult.prototype.playerId = 0;

                                /**
                                 * ZhajinhuaStartResult currentGold.
                                 * @member {number|Long} currentGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @instance
                                 */
                                ZhajinhuaStartResult.prototype.currentGold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new ZhajinhuaStartResult instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult} ZhajinhuaStartResult instance
                                 */
                                ZhajinhuaStartResult.create = function create(properties) {
                                    return new ZhajinhuaStartResult(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaStartResult message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult} message ZhajinhuaStartResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaStartResult.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.sucess);
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.playerId);
                                    if (message.currentGold != null && message.hasOwnProperty("currentGold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.currentGold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaStartResult message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult} message ZhajinhuaStartResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaStartResult.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaStartResult message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult} ZhajinhuaStartResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaStartResult.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.sucess = reader.bool();
                                            break;
                                        case 2:
                                            message.playerId = reader.int32();
                                            break;
                                        case 3:
                                            message.currentGold = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaStartResult message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult} ZhajinhuaStartResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaStartResult.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaStartResult message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaStartResult.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        if (typeof message.sucess !== "boolean")
                                            return "sucess: boolean expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.currentGold != null && message.hasOwnProperty("currentGold"))
                                        if (!$util.isInteger(message.currentGold) && !(message.currentGold && $util.isInteger(message.currentGold.low) && $util.isInteger(message.currentGold.high)))
                                            return "currentGold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaStartResult message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult} ZhajinhuaStartResult
                                 */
                                ZhajinhuaStartResult.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult();
                                    if (object.sucess != null)
                                        message.sucess = Boolean(object.sucess);
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.currentGold != null)
                                        if ($util.Long)
                                            (message.currentGold = $util.Long.fromValue(object.currentGold)).unsigned = false;
                                        else if (typeof object.currentGold === "string")
                                            message.currentGold = parseInt(object.currentGold, 10);
                                        else if (typeof object.currentGold === "number")
                                            message.currentGold = object.currentGold;
                                        else if (typeof object.currentGold === "object")
                                            message.currentGold = new $util.LongBits(object.currentGold.low >>> 0, object.currentGold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaStartResult message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult} message ZhajinhuaStartResult
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaStartResult.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.sucess = false;
                                        object.playerId = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.currentGold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.currentGold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.sucess != null && message.hasOwnProperty("sucess"))
                                        object.sucess = message.sucess;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.currentGold != null && message.hasOwnProperty("currentGold"))
                                        if (typeof message.currentGold === "number")
                                            object.currentGold = options.longs === String ? String(message.currentGold) : message.currentGold;
                                        else
                                            object.currentGold = options.longs === String ? $util.Long.prototype.toString.call(message.currentGold) : options.longs === Number ? new $util.LongBits(message.currentGold.low >>> 0, message.currentGold.high >>> 0).toNumber() : message.currentGold;
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaStartResult to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaStartResult.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaStartResult;
                            })();

                            message.ZhajinhuaStartResultSet = (function() {

                                /**
                                 * Properties of a ZhajinhuaStartResultSet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaStartResultSet
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult>|null} [results] ZhajinhuaStartResultSet results
                                 */

                                /**
                                 * Constructs a new ZhajinhuaStartResultSet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花开始结果
                                 * @implements IZhajinhuaStartResultSet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResultSet=} [properties] Properties to set
                                 */
                                function ZhajinhuaStartResultSet(properties) {
                                    this.results = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaStartResultSet results.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResult>} results
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @instance
                                 */
                                ZhajinhuaStartResultSet.prototype.results = $util.emptyArray;

                                /**
                                 * Creates a new ZhajinhuaStartResultSet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResultSet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet} ZhajinhuaStartResultSet instance
                                 */
                                ZhajinhuaStartResultSet.create = function create(properties) {
                                    return new ZhajinhuaStartResultSet(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaStartResultSet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResultSet} message ZhajinhuaStartResultSet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaStartResultSet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.results != null && message.results.length)
                                        for (var i = 0; i < message.results.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaStartResultSet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaStartResultSet} message ZhajinhuaStartResultSet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaStartResultSet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaStartResultSet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet} ZhajinhuaStartResultSet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaStartResultSet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.results && message.results.length))
                                                message.results = [];
                                            message.results.push($root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaStartResultSet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet} ZhajinhuaStartResultSet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaStartResultSet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaStartResultSet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaStartResultSet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.results != null && message.hasOwnProperty("results")) {
                                        if (!Array.isArray(message.results))
                                            return "results: array expected";
                                        for (var i = 0; i < message.results.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.verify(message.results[i]);
                                            if (error)
                                                return "results." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaStartResultSet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet} ZhajinhuaStartResultSet
                                 */
                                ZhajinhuaStartResultSet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet();
                                    if (object.results) {
                                        if (!Array.isArray(object.results))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet.results: array expected");
                                        message.results = [];
                                        for (var i = 0; i < object.results.length; ++i) {
                                            if (typeof object.results[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet.results: object expected");
                                            message.results[i] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.fromObject(object.results[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaStartResultSet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet} message ZhajinhuaStartResultSet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaStartResultSet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.results = [];
                                    if (message.results && message.results.length) {
                                        object.results = [];
                                        for (var j = 0; j < message.results.length; ++j)
                                            object.results[j] = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResult.toObject(message.results[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaStartResultSet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaStartResultSet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaStartResultSet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaStartResultSet;
                            })();

                            message.ZhajinhuaBet = (function() {

                                /**
                                 * Properties of a ZhajinhuaBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaBet
                                 * @property {number|null} [playerId] ZhajinhuaBet playerId
                                 * @property {number|null} [gold] ZhajinhuaBet gold
                                 */

                                /**
                                 * Constructs a new ZhajinhuaBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 扎金花压住
                                 * @implements IZhajinhuaBet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaBet=} [properties] Properties to set
                                 */
                                function ZhajinhuaBet(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaBet playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @instance
                                 */
                                ZhajinhuaBet.prototype.playerId = 0;

                                /**
                                 * ZhajinhuaBet gold.
                                 * @member {number} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @instance
                                 */
                                ZhajinhuaBet.prototype.gold = 0;

                                /**
                                 * Creates a new ZhajinhuaBet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaBet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet} ZhajinhuaBet instance
                                 */
                                ZhajinhuaBet.create = function create(properties) {
                                    return new ZhajinhuaBet(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaBet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaBet} message ZhajinhuaBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaBet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaBet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaBet} message ZhajinhuaBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaBet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaBet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet} ZhajinhuaBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaBet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.gold = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaBet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet} ZhajinhuaBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaBet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaBet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaBet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold))
                                            return "gold: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaBet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet} ZhajinhuaBet
                                 */
                                ZhajinhuaBet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.gold != null)
                                        message.gold = object.gold | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaBet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet} message ZhajinhuaBet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaBet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.gold = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        object.gold = message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaBet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaBet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaBet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaBet;
                            })();

                            message.ThanCard = (function() {

                                /**
                                 * Properties of a ThanCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IThanCard
                                 * @property {number|null} [playerId] ThanCard playerId
                                 * @property {number|null} [thanPlayerId] ThanCard thanPlayerId
                                 * @property {number|null} [gold] ThanCard gold
                                 */

                                /**
                                 * Constructs a new ThanCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 比牌
                                 * @implements IThanCard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCard=} [properties] Properties to set
                                 */
                                function ThanCard(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ThanCard playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @instance
                                 */
                                ThanCard.prototype.playerId = 0;

                                /**
                                 * ThanCard thanPlayerId.
                                 * @member {number} thanPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @instance
                                 */
                                ThanCard.prototype.thanPlayerId = 0;

                                /**
                                 * ThanCard gold.
                                 * @member {number} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @instance
                                 */
                                ThanCard.prototype.gold = 0;

                                /**
                                 * Creates a new ThanCard instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCard} ThanCard instance
                                 */
                                ThanCard.create = function create(properties) {
                                    return new ThanCard(properties);
                                };

                                /**
                                 * Encodes the specified ThanCard message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ThanCard.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCard} message ThanCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ThanCard.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.thanPlayerId != null && message.hasOwnProperty("thanPlayerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.thanPlayerId);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ThanCard message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ThanCard.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCard} message ThanCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ThanCard.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ThanCard message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCard} ThanCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ThanCard.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ThanCard();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.thanPlayerId = reader.int32();
                                            break;
                                        case 3:
                                            message.gold = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ThanCard message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCard} ThanCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ThanCard.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ThanCard message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ThanCard.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.thanPlayerId != null && message.hasOwnProperty("thanPlayerId"))
                                        if (!$util.isInteger(message.thanPlayerId))
                                            return "thanPlayerId: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold))
                                            return "gold: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ThanCard message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCard} ThanCard
                                 */
                                ThanCard.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ThanCard)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ThanCard();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.thanPlayerId != null)
                                        message.thanPlayerId = object.thanPlayerId | 0;
                                    if (object.gold != null)
                                        message.gold = object.gold | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ThanCard message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ThanCard} message ThanCard
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ThanCard.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.thanPlayerId = 0;
                                        object.gold = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.thanPlayerId != null && message.hasOwnProperty("thanPlayerId"))
                                        object.thanPlayerId = message.thanPlayerId;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        object.gold = message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this ThanCard to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCard
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ThanCard.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ThanCard;
                            })();

                            message.ThanCardResult = (function() {

                                /**
                                 * Properties of a ThanCardResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IThanCardResult
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IThanCard|null} [thanCard] ThanCardResult thanCard
                                 * @property {number|null} [winPlayerId] ThanCardResult winPlayerId
                                 */

                                /**
                                 * Constructs a new ThanCardResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 比牌结果
                                 * @implements IThanCardResult
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCardResult=} [properties] Properties to set
                                 */
                                function ThanCardResult(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ThanCardResult thanCard.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IThanCard|null|undefined} thanCard
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @instance
                                 */
                                ThanCardResult.prototype.thanCard = null;

                                /**
                                 * ThanCardResult winPlayerId.
                                 * @member {number} winPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @instance
                                 */
                                ThanCardResult.prototype.winPlayerId = 0;

                                /**
                                 * Creates a new ThanCardResult instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCardResult=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCardResult} ThanCardResult instance
                                 */
                                ThanCardResult.create = function create(properties) {
                                    return new ThanCardResult(properties);
                                };

                                /**
                                 * Encodes the specified ThanCardResult message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ThanCardResult.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCardResult} message ThanCardResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ThanCardResult.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.thanCard != null && message.hasOwnProperty("thanCard"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.ThanCard.encode(message.thanCard, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.winPlayerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ThanCardResult message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ThanCardResult.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IThanCardResult} message ThanCardResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ThanCardResult.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ThanCardResult message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCardResult} ThanCardResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ThanCardResult.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ThanCardResult();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.thanCard = $root.com.aoo.chess.comms.protocol.proto.message.ThanCard.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.winPlayerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ThanCardResult message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCardResult} ThanCardResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ThanCardResult.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ThanCardResult message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ThanCardResult.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.thanCard != null && message.hasOwnProperty("thanCard")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.ThanCard.verify(message.thanCard);
                                        if (error)
                                            return "thanCard." + error;
                                    }
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        if (!$util.isInteger(message.winPlayerId))
                                            return "winPlayerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ThanCardResult message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ThanCardResult} ThanCardResult
                                 */
                                ThanCardResult.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ThanCardResult)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ThanCardResult();
                                    if (object.thanCard != null) {
                                        if (typeof object.thanCard !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ThanCardResult.thanCard: object expected");
                                        message.thanCard = $root.com.aoo.chess.comms.protocol.proto.message.ThanCard.fromObject(object.thanCard);
                                    }
                                    if (object.winPlayerId != null)
                                        message.winPlayerId = object.winPlayerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ThanCardResult message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ThanCardResult} message ThanCardResult
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ThanCardResult.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.thanCard = null;
                                        object.winPlayerId = 0;
                                    }
                                    if (message.thanCard != null && message.hasOwnProperty("thanCard"))
                                        object.thanCard = $root.com.aoo.chess.comms.protocol.proto.message.ThanCard.toObject(message.thanCard, options);
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        object.winPlayerId = message.winPlayerId;
                                    return object;
                                };

                                /**
                                 * Converts this ThanCardResult to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ThanCardResult
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ThanCardResult.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ThanCardResult;
                            })();

                            message.GainZhajinhuaRoomInfo = (function() {

                                /**
                                 * Properties of a GainZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainZhajinhuaRoomInfo
                                 * @property {number|null} [playerId] GainZhajinhuaRoomInfo playerId
                                 */

                                /**
                                 * Constructs a new GainZhajinhuaRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainZhajinhuaRoomInfo.
                                 * @implements IGainZhajinhuaRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainZhajinhuaRoomInfo=} [properties] Properties to set
                                 */
                                function GainZhajinhuaRoomInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GainZhajinhuaRoomInfo playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @instance
                                 */
                                GainZhajinhuaRoomInfo.prototype.playerId = 0;

                                /**
                                 * Creates a new GainZhajinhuaRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainZhajinhuaRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo} GainZhajinhuaRoomInfo instance
                                 */
                                GainZhajinhuaRoomInfo.create = function create(properties) {
                                    return new GainZhajinhuaRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainZhajinhuaRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainZhajinhuaRoomInfo} message GainZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainZhajinhuaRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainZhajinhuaRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainZhajinhuaRoomInfo} message GainZhajinhuaRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainZhajinhuaRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainZhajinhuaRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo} GainZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainZhajinhuaRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainZhajinhuaRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo} GainZhajinhuaRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainZhajinhuaRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainZhajinhuaRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainZhajinhuaRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainZhajinhuaRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo} GainZhajinhuaRoomInfo
                                 */
                                GainZhajinhuaRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GainZhajinhuaRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo} message GainZhajinhuaRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainZhajinhuaRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this GainZhajinhuaRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainZhajinhuaRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainZhajinhuaRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainZhajinhuaRoomInfo;
                            })();

                            message.Discard = (function() {

                                /**
                                 * Properties of a Discard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IDiscard
                                 * @property {number|null} [playerId] Discard playerId
                                 */

                                /**
                                 * Constructs a new Discard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a Discard.
                                 * @implements IDiscard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDiscard=} [properties] Properties to set
                                 */
                                function Discard(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Discard playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @instance
                                 */
                                Discard.prototype.playerId = 0;

                                /**
                                 * Creates a new Discard instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDiscard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Discard} Discard instance
                                 */
                                Discard.create = function create(properties) {
                                    return new Discard(properties);
                                };

                                /**
                                 * Encodes the specified Discard message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Discard.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDiscard} message Discard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Discard.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Discard message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.Discard.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDiscard} message Discard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Discard.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Discard message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Discard} Discard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Discard.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.Discard();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Discard message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Discard} Discard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Discard.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Discard message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Discard.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a Discard message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.Discard} Discard
                                 */
                                Discard.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.Discard)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.Discard();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Discard message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.Discard} message Discard
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Discard.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this Discard to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.Discard
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Discard.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Discard;
                            })();

                            message.ZhajinhuaEnd = (function() {

                                /**
                                 * Properties of a ZhajinhuaEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IZhajinhuaEnd
                                 * @property {number|null} [winPlayerId] ZhajinhuaEnd winPlayerId
                                 * @property {number|null} [winGold] ZhajinhuaEnd winGold
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerCard>|null} [playerCards] ZhajinhuaEnd playerCards
                                 */

                                /**
                                 * Constructs a new ZhajinhuaEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ZhajinhuaEnd.
                                 * @implements IZhajinhuaEnd
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaEnd=} [properties] Properties to set
                                 */
                                function ZhajinhuaEnd(properties) {
                                    this.playerCards = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZhajinhuaEnd winPlayerId.
                                 * @member {number} winPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @instance
                                 */
                                ZhajinhuaEnd.prototype.winPlayerId = 0;

                                /**
                                 * ZhajinhuaEnd winGold.
                                 * @member {number} winGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @instance
                                 */
                                ZhajinhuaEnd.prototype.winGold = 0;

                                /**
                                 * ZhajinhuaEnd playerCards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerCard>} playerCards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @instance
                                 */
                                ZhajinhuaEnd.prototype.playerCards = $util.emptyArray;

                                /**
                                 * Creates a new ZhajinhuaEnd instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaEnd=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd} ZhajinhuaEnd instance
                                 */
                                ZhajinhuaEnd.create = function create(properties) {
                                    return new ZhajinhuaEnd(properties);
                                };

                                /**
                                 * Encodes the specified ZhajinhuaEnd message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaEnd} message ZhajinhuaEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaEnd.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.winPlayerId);
                                    if (message.winGold != null && message.hasOwnProperty("winGold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.winGold);
                                    if (message.playerCards != null && message.playerCards.length)
                                        for (var i = 0; i < message.playerCards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard.encode(message.playerCards[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ZhajinhuaEnd message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaEnd} message ZhajinhuaEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ZhajinhuaEnd.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ZhajinhuaEnd message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd} ZhajinhuaEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaEnd.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.winPlayerId = reader.int32();
                                            break;
                                        case 2:
                                            message.winGold = reader.int32();
                                            break;
                                        case 3:
                                            if (!(message.playerCards && message.playerCards.length))
                                                message.playerCards = [];
                                            message.playerCards.push($root.com.aoo.chess.comms.protocol.proto.message.PlayerCard.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ZhajinhuaEnd message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd} ZhajinhuaEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZhajinhuaEnd.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ZhajinhuaEnd message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ZhajinhuaEnd.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        if (!$util.isInteger(message.winPlayerId))
                                            return "winPlayerId: integer expected";
                                    if (message.winGold != null && message.hasOwnProperty("winGold"))
                                        if (!$util.isInteger(message.winGold))
                                            return "winGold: integer expected";
                                    if (message.playerCards != null && message.hasOwnProperty("playerCards")) {
                                        if (!Array.isArray(message.playerCards))
                                            return "playerCards: array expected";
                                        for (var i = 0; i < message.playerCards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard.verify(message.playerCards[i]);
                                            if (error)
                                                return "playerCards." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ZhajinhuaEnd message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd} ZhajinhuaEnd
                                 */
                                ZhajinhuaEnd.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd();
                                    if (object.winPlayerId != null)
                                        message.winPlayerId = object.winPlayerId | 0;
                                    if (object.winGold != null)
                                        message.winGold = object.winGold | 0;
                                    if (object.playerCards) {
                                        if (!Array.isArray(object.playerCards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd.playerCards: array expected");
                                        message.playerCards = [];
                                        for (var i = 0; i < object.playerCards.length; ++i) {
                                            if (typeof object.playerCards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd.playerCards: object expected");
                                            message.playerCards[i] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard.fromObject(object.playerCards[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ZhajinhuaEnd message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd} message ZhajinhuaEnd
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ZhajinhuaEnd.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.playerCards = [];
                                    if (options.defaults) {
                                        object.winPlayerId = 0;
                                        object.winGold = 0;
                                    }
                                    if (message.winPlayerId != null && message.hasOwnProperty("winPlayerId"))
                                        object.winPlayerId = message.winPlayerId;
                                    if (message.winGold != null && message.hasOwnProperty("winGold"))
                                        object.winGold = message.winGold;
                                    if (message.playerCards && message.playerCards.length) {
                                        object.playerCards = [];
                                        for (var j = 0; j < message.playerCards.length; ++j)
                                            object.playerCards[j] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard.toObject(message.playerCards[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ZhajinhuaEnd to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ZhajinhuaEnd
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ZhajinhuaEnd.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ZhajinhuaEnd;
                            })();

                            message.PlayerCard = (function() {

                                /**
                                 * Properties of a PlayerCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerCard
                                 * @property {number|null} [playerId] PlayerCard playerId
                                 * @property {string|null} [name] PlayerCard name
                                 * @property {string|null} [icon] PlayerCard icon
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards|null} [cards] PlayerCard cards
                                 * @property {number|null} [betGold] PlayerCard betGold
                                 */

                                /**
                                 * Constructs a new PlayerCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerCard.
                                 * @implements IPlayerCard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerCard=} [properties] Properties to set
                                 */
                                function PlayerCard(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerCard playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 */
                                PlayerCard.prototype.playerId = 0;

                                /**
                                 * PlayerCard name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 */
                                PlayerCard.prototype.name = "";

                                /**
                                 * PlayerCard icon.
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 */
                                PlayerCard.prototype.icon = "";

                                /**
                                 * PlayerCard cards.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IZhajinhuaCards|null|undefined} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 */
                                PlayerCard.prototype.cards = null;

                                /**
                                 * PlayerCard betGold.
                                 * @member {number} betGold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 */
                                PlayerCard.prototype.betGold = 0;

                                /**
                                 * Creates a new PlayerCard instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerCard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerCard} PlayerCard instance
                                 */
                                PlayerCard.create = function create(properties) {
                                    return new PlayerCard(properties);
                                };

                                /**
                                 * Encodes the specified PlayerCard message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerCard.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerCard} message PlayerCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerCard.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.icon);
                                    if (message.cards != null && message.hasOwnProperty("cards"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.encode(message.cards, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.betGold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerCard message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerCard.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerCard} message PlayerCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerCard.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerCard message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerCard} PlayerCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerCard.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.icon = reader.string();
                                            break;
                                        case 4:
                                            message.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.decode(reader, reader.uint32());
                                            break;
                                        case 5:
                                            message.betGold = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerCard message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerCard} PlayerCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerCard.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerCard message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerCard.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.verify(message.cards);
                                        if (error)
                                            return "cards." + error;
                                    }
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        if (!$util.isInteger(message.betGold))
                                            return "betGold: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerCard message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerCard} PlayerCard
                                 */
                                PlayerCard.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerCard();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.cards != null) {
                                        if (typeof object.cards !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerCard.cards: object expected");
                                        message.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.fromObject(object.cards);
                                    }
                                    if (object.betGold != null)
                                        message.betGold = object.betGold | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerCard message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerCard} message PlayerCard
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerCard.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.name = "";
                                        object.icon = "";
                                        object.cards = null;
                                        object.betGold = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.cards != null && message.hasOwnProperty("cards"))
                                        object.cards = $root.com.aoo.chess.comms.protocol.proto.message.ZhajinhuaCards.toObject(message.cards, options);
                                    if (message.betGold != null && message.hasOwnProperty("betGold"))
                                        object.betGold = message.betGold;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerCard to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerCard
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerCard.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerCard;
                            })();

                            message.StartFail = (function() {

                                /**
                                 * Properties of a StartFail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IStartFail
                                 * @property {number|null} [money] StartFail money
                                 */

                                /**
                                 * Constructs a new StartFail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a StartFail.
                                 * @implements IStartFail
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IStartFail=} [properties] Properties to set
                                 */
                                function StartFail(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * StartFail money.
                                 * @member {number} money
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @instance
                                 */
                                StartFail.prototype.money = 0;

                                /**
                                 * Creates a new StartFail instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IStartFail=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.StartFail} StartFail instance
                                 */
                                StartFail.create = function create(properties) {
                                    return new StartFail(properties);
                                };

                                /**
                                 * Encodes the specified StartFail message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.StartFail.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IStartFail} message StartFail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StartFail.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.money);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified StartFail message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.StartFail.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IStartFail} message StartFail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                StartFail.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a StartFail message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.StartFail} StartFail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StartFail.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.StartFail();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.money = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a StartFail message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.StartFail} StartFail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                StartFail.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a StartFail message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                StartFail.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        if (!$util.isInteger(message.money))
                                            return "money: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a StartFail message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.StartFail} StartFail
                                 */
                                StartFail.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.StartFail)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.StartFail();
                                    if (object.money != null)
                                        message.money = object.money | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a StartFail message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.StartFail} message StartFail
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                StartFail.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.money = 0;
                                    if (message.money != null && message.hasOwnProperty("money"))
                                        object.money = message.money;
                                    return object;
                                };

                                /**
                                 * Converts this StartFail to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.StartFail
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                StartFail.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return StartFail;
                            })();

                            message.KickOutPlayer = (function() {

                                /**
                                 * Properties of a KickOutPlayer.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IKickOutPlayer
                                 * @property {number|null} [playerId] KickOutPlayer playerId
                                 * @property {number|null} [checkOutPlayerId] KickOutPlayer checkOutPlayerId
                                 */

                                /**
                                 * Constructs a new KickOutPlayer.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a KickOutPlayer.
                                 * @implements IKickOutPlayer
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IKickOutPlayer=} [properties] Properties to set
                                 */
                                function KickOutPlayer(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * KickOutPlayer playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @instance
                                 */
                                KickOutPlayer.prototype.playerId = 0;

                                /**
                                 * KickOutPlayer checkOutPlayerId.
                                 * @member {number} checkOutPlayerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @instance
                                 */
                                KickOutPlayer.prototype.checkOutPlayerId = 0;

                                /**
                                 * Creates a new KickOutPlayer instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IKickOutPlayer=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.KickOutPlayer} KickOutPlayer instance
                                 */
                                KickOutPlayer.create = function create(properties) {
                                    return new KickOutPlayer(properties);
                                };

                                /**
                                 * Encodes the specified KickOutPlayer message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.KickOutPlayer.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IKickOutPlayer} message KickOutPlayer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KickOutPlayer.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.checkOutPlayerId != null && message.hasOwnProperty("checkOutPlayerId"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.checkOutPlayerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified KickOutPlayer message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.KickOutPlayer.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IKickOutPlayer} message KickOutPlayer message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                KickOutPlayer.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a KickOutPlayer message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.KickOutPlayer} KickOutPlayer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KickOutPlayer.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.KickOutPlayer();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.checkOutPlayerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a KickOutPlayer message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.KickOutPlayer} KickOutPlayer
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                KickOutPlayer.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a KickOutPlayer message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                KickOutPlayer.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.checkOutPlayerId != null && message.hasOwnProperty("checkOutPlayerId"))
                                        if (!$util.isInteger(message.checkOutPlayerId))
                                            return "checkOutPlayerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a KickOutPlayer message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.KickOutPlayer} KickOutPlayer
                                 */
                                KickOutPlayer.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.KickOutPlayer)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.KickOutPlayer();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.checkOutPlayerId != null)
                                        message.checkOutPlayerId = object.checkOutPlayerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a KickOutPlayer message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.KickOutPlayer} message KickOutPlayer
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                KickOutPlayer.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.checkOutPlayerId = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.checkOutPlayerId != null && message.hasOwnProperty("checkOutPlayerId"))
                                        object.checkOutPlayerId = message.checkOutPlayerId;
                                    return object;
                                };

                                /**
                                 * Converts this KickOutPlayer to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.KickOutPlayer
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                KickOutPlayer.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return KickOutPlayer;
                            })();

                            message.LongHuDouRoomInfo = (function() {

                                /**
                                 * Properties of a LongHuDouRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouRoomInfo
                                 * @property {number|null} [playerSize] LongHuDouRoomInfo playerSize
                                 * @property {number|null} [state] LongHuDouRoomInfo state
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo>|null} [infos] LongHuDouRoomInfo infos
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo|null} [myBetInfo] LongHuDouRoomInfo myBetInfo
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>|null} [ranks] LongHuDouRoomInfo ranks
                                 * @property {Array.<number>|null} [history] LongHuDouRoomInfo history
                                 * @property {number|null} [time] LongHuDouRoomInfo time
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>|null} [cards] LongHuDouRoomInfo cards
                                 */

                                /**
                                 * Constructs a new LongHuDouRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouRoomInfo.
                                 * @implements ILongHuDouRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRoomInfo=} [properties] Properties to set
                                 */
                                function LongHuDouRoomInfo(properties) {
                                    this.infos = [];
                                    this.ranks = [];
                                    this.history = [];
                                    this.cards = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouRoomInfo playerSize.
                                 * @member {number} playerSize
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.playerSize = 0;

                                /**
                                 * LongHuDouRoomInfo state.
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.state = 0;

                                /**
                                 * LongHuDouRoomInfo infos.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.infos = $util.emptyArray;

                                /**
                                 * LongHuDouRoomInfo myBetInfo.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo|null|undefined} myBetInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.myBetInfo = null;

                                /**
                                 * LongHuDouRoomInfo ranks.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>} ranks
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.ranks = $util.emptyArray;

                                /**
                                 * LongHuDouRoomInfo history.
                                 * @member {Array.<number>} history
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.history = $util.emptyArray;

                                /**
                                 * LongHuDouRoomInfo time.
                                 * @member {number} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.time = 0;

                                /**
                                 * LongHuDouRoomInfo cards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 */
                                LongHuDouRoomInfo.prototype.cards = $util.emptyArray;

                                /**
                                 * Creates a new LongHuDouRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo} LongHuDouRoomInfo instance
                                 */
                                LongHuDouRoomInfo.create = function create(properties) {
                                    return new LongHuDouRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRoomInfo} message LongHuDouRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerSize);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.encode(message.infos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.myBetInfo != null && message.hasOwnProperty("myBetInfo"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.encode(message.myBetInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.ranks != null && message.ranks.length)
                                        for (var i = 0; i < message.ranks.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.encode(message.ranks[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    if (message.history != null && message.history.length) {
                                        writer.uint32(/* id 6, wireType 2 =*/50).fork();
                                        for (var i = 0; i < message.history.length; ++i)
                                            writer.int32(message.history[i]);
                                        writer.ldelim();
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.time);
                                    if (message.cards != null && message.cards.length)
                                        for (var i = 0; i < message.cards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Card.encode(message.cards[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRoomInfo} message LongHuDouRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo} LongHuDouRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerSize = reader.int32();
                                            break;
                                        case 2:
                                            message.state = reader.int32();
                                            break;
                                        case 3:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 4:
                                            message.myBetInfo = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.decode(reader, reader.uint32());
                                            break;
                                        case 5:
                                            if (!(message.ranks && message.ranks.length))
                                                message.ranks = [];
                                            message.ranks.push($root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.decode(reader, reader.uint32()));
                                            break;
                                        case 6:
                                            if (!(message.history && message.history.length))
                                                message.history = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.history.push(reader.int32());
                                            } else
                                                message.history.push(reader.int32());
                                            break;
                                        case 7:
                                            message.time = reader.int32();
                                            break;
                                        case 8:
                                            if (!(message.cards && message.cards.length))
                                                message.cards = [];
                                            message.cards.push($root.com.aoo.chess.comms.protocol.proto.message.Card.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo} LongHuDouRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        if (!$util.isInteger(message.playerSize))
                                            return "playerSize: integer expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    if (message.myBetInfo != null && message.hasOwnProperty("myBetInfo")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.verify(message.myBetInfo);
                                        if (error)
                                            return "myBetInfo." + error;
                                    }
                                    if (message.ranks != null && message.hasOwnProperty("ranks")) {
                                        if (!Array.isArray(message.ranks))
                                            return "ranks: array expected";
                                        for (var i = 0; i < message.ranks.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify(message.ranks[i]);
                                            if (error)
                                                return "ranks." + error;
                                        }
                                    }
                                    if (message.history != null && message.hasOwnProperty("history")) {
                                        if (!Array.isArray(message.history))
                                            return "history: array expected";
                                        for (var i = 0; i < message.history.length; ++i)
                                            if (!$util.isInteger(message.history[i]))
                                                return "history: integer[] expected";
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time))
                                            return "time: integer expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        if (!Array.isArray(message.cards))
                                            return "cards: array expected";
                                        for (var i = 0; i < message.cards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Card.verify(message.cards[i]);
                                            if (error)
                                                return "cards." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo} LongHuDouRoomInfo
                                 */
                                LongHuDouRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo();
                                    if (object.playerSize != null)
                                        message.playerSize = object.playerSize | 0;
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.fromObject(object.infos[i]);
                                        }
                                    }
                                    if (object.myBetInfo != null) {
                                        if (typeof object.myBetInfo !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.myBetInfo: object expected");
                                        message.myBetInfo = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.fromObject(object.myBetInfo);
                                    }
                                    if (object.ranks) {
                                        if (!Array.isArray(object.ranks))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.ranks: array expected");
                                        message.ranks = [];
                                        for (var i = 0; i < object.ranks.length; ++i) {
                                            if (typeof object.ranks[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.ranks: object expected");
                                            message.ranks[i] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.fromObject(object.ranks[i]);
                                        }
                                    }
                                    if (object.history) {
                                        if (!Array.isArray(object.history))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.history: array expected");
                                        message.history = [];
                                        for (var i = 0; i < object.history.length; ++i)
                                            message.history[i] = object.history[i] | 0;
                                    }
                                    if (object.time != null)
                                        message.time = object.time | 0;
                                    if (object.cards) {
                                        if (!Array.isArray(object.cards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.cards: array expected");
                                        message.cards = [];
                                        for (var i = 0; i < object.cards.length; ++i) {
                                            if (typeof object.cards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo.cards: object expected");
                                            message.cards[i] = $root.com.aoo.chess.comms.protocol.proto.message.Card.fromObject(object.cards[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo} message LongHuDouRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.infos = [];
                                        object.ranks = [];
                                        object.history = [];
                                        object.cards = [];
                                    }
                                    if (options.defaults) {
                                        object.playerSize = 0;
                                        object.state = 0;
                                        object.myBetInfo = null;
                                        object.time = 0;
                                    }
                                    if (message.playerSize != null && message.hasOwnProperty("playerSize"))
                                        object.playerSize = message.playerSize;
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.toObject(message.infos[j], options);
                                    }
                                    if (message.myBetInfo != null && message.hasOwnProperty("myBetInfo"))
                                        object.myBetInfo = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.toObject(message.myBetInfo, options);
                                    if (message.ranks && message.ranks.length) {
                                        object.ranks = [];
                                        for (var j = 0; j < message.ranks.length; ++j)
                                            object.ranks[j] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.toObject(message.ranks[j], options);
                                    }
                                    if (message.history && message.history.length) {
                                        object.history = [];
                                        for (var j = 0; j < message.history.length; ++j)
                                            object.history[j] = message.history[j];
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        object.time = message.time;
                                    if (message.cards && message.cards.length) {
                                        object.cards = [];
                                        for (var j = 0; j < message.cards.length; ++j)
                                            object.cards[j] = $root.com.aoo.chess.comms.protocol.proto.message.Card.toObject(message.cards[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouRoomInfo;
                            })();

                            message.LongHuDouRankUpdate = (function() {

                                /**
                                 * Properties of a LongHuDouRankUpdate.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouRankUpdate
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>|null} [ranks] LongHuDouRankUpdate ranks
                                 */

                                /**
                                 * Constructs a new LongHuDouRankUpdate.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouRankUpdate.
                                 * @implements ILongHuDouRankUpdate
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRankUpdate=} [properties] Properties to set
                                 */
                                function LongHuDouRankUpdate(properties) {
                                    this.ranks = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouRankUpdate ranks.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRoomPlayerInfo>} ranks
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @instance
                                 */
                                LongHuDouRankUpdate.prototype.ranks = $util.emptyArray;

                                /**
                                 * Creates a new LongHuDouRankUpdate instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRankUpdate=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate} LongHuDouRankUpdate instance
                                 */
                                LongHuDouRankUpdate.create = function create(properties) {
                                    return new LongHuDouRankUpdate(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouRankUpdate message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRankUpdate} message LongHuDouRankUpdate message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouRankUpdate.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.ranks != null && message.ranks.length)
                                        for (var i = 0; i < message.ranks.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.encode(message.ranks[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouRankUpdate message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouRankUpdate} message LongHuDouRankUpdate message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouRankUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouRankUpdate message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate} LongHuDouRankUpdate
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouRankUpdate.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 5:
                                            if (!(message.ranks && message.ranks.length))
                                                message.ranks = [];
                                            message.ranks.push($root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouRankUpdate message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate} LongHuDouRankUpdate
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouRankUpdate.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouRankUpdate message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouRankUpdate.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.ranks != null && message.hasOwnProperty("ranks")) {
                                        if (!Array.isArray(message.ranks))
                                            return "ranks: array expected";
                                        for (var i = 0; i < message.ranks.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.verify(message.ranks[i]);
                                            if (error)
                                                return "ranks." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouRankUpdate message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate} LongHuDouRankUpdate
                                 */
                                LongHuDouRankUpdate.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate();
                                    if (object.ranks) {
                                        if (!Array.isArray(object.ranks))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate.ranks: array expected");
                                        message.ranks = [];
                                        for (var i = 0; i < object.ranks.length; ++i) {
                                            if (typeof object.ranks[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate.ranks: object expected");
                                            message.ranks[i] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.fromObject(object.ranks[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouRankUpdate message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate} message LongHuDouRankUpdate
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouRankUpdate.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.ranks = [];
                                    if (message.ranks && message.ranks.length) {
                                        object.ranks = [];
                                        for (var j = 0; j < message.ranks.length; ++j)
                                            object.ranks[j] = $root.com.aoo.chess.comms.protocol.proto.message.RoomPlayerInfo.toObject(message.ranks[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouRankUpdate to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouRankUpdate
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouRankUpdate.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouRankUpdate;
                            })();

                            message.LongHuDouBetInfo = (function() {

                                /**
                                 * Properties of a LongHuDouBetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouBetInfo
                                 * @property {number|null} [type] LongHuDouBetInfo type
                                 * @property {number|Long|null} [gold] LongHuDouBetInfo gold
                                 */

                                /**
                                 * Constructs a new LongHuDouBetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouBetInfo.
                                 * @implements ILongHuDouBetInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo=} [properties] Properties to set
                                 */
                                function LongHuDouBetInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouBetInfo type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @instance
                                 */
                                LongHuDouBetInfo.prototype.type = 0;

                                /**
                                 * LongHuDouBetInfo gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @instance
                                 */
                                LongHuDouBetInfo.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new LongHuDouBetInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo} LongHuDouBetInfo instance
                                 */
                                LongHuDouBetInfo.create = function create(properties) {
                                    return new LongHuDouBetInfo(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouBetInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo} message LongHuDouBetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBetInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouBetInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo} message LongHuDouBetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBetInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouBetInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo} LongHuDouBetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBetInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 2:
                                            message.type = reader.int32();
                                            break;
                                        case 3:
                                            message.gold = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouBetInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo} LongHuDouBetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBetInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouBetInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouBetInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouBetInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo} LongHuDouBetInfo
                                 */
                                LongHuDouBetInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouBetInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo} message LongHuDouBetInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouBetInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouBetInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouBetInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouBetInfo;
                            })();

                            message.LongHuDouBet = (function() {

                                /**
                                 * Properties of a LongHuDouBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouBet
                                 * @property {number|null} [playerId] LongHuDouBet playerId
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo|null} [info] LongHuDouBet info
                                 */

                                /**
                                 * Constructs a new LongHuDouBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouBet.
                                 * @implements ILongHuDouBet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBet=} [properties] Properties to set
                                 */
                                function LongHuDouBet(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouBet playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @instance
                                 */
                                LongHuDouBet.prototype.playerId = 0;

                                /**
                                 * LongHuDouBet info.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetInfo|null|undefined} info
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @instance
                                 */
                                LongHuDouBet.prototype.info = null;

                                /**
                                 * Creates a new LongHuDouBet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBet} LongHuDouBet instance
                                 */
                                LongHuDouBet.create = function create(properties) {
                                    return new LongHuDouBet(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouBet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBet} message LongHuDouBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.encode(message.info, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouBet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBet} message LongHuDouBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouBet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBet} LongHuDouBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.info = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouBet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBet} LongHuDouBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouBet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouBet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.info != null && message.hasOwnProperty("info")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.verify(message.info);
                                        if (error)
                                            return "info." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouBet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBet} LongHuDouBet
                                 */
                                LongHuDouBet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBet();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.info != null) {
                                        if (typeof object.info !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouBet.info: object expected");
                                        message.info = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.fromObject(object.info);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouBet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouBet} message LongHuDouBet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouBet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.info = null;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        object.info = $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetInfo.toObject(message.info, options);
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouBet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouBet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouBet;
                            })();

                            message.LongHuDouBetStar = (function() {

                                /**
                                 * Properties of a LongHuDouBetStar.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouBetStar
                                 */

                                /**
                                 * Constructs a new LongHuDouBetStar.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouBetStar.
                                 * @implements ILongHuDouBetStar
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetStar=} [properties] Properties to set
                                 */
                                function LongHuDouBetStar(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new LongHuDouBetStar instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetStar=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar} LongHuDouBetStar instance
                                 */
                                LongHuDouBetStar.create = function create(properties) {
                                    return new LongHuDouBetStar(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouBetStar message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetStar} message LongHuDouBetStar message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBetStar.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouBetStar message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouBetStar} message LongHuDouBetStar message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouBetStar.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouBetStar message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar} LongHuDouBetStar
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBetStar.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouBetStar message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar} LongHuDouBetStar
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouBetStar.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouBetStar message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouBetStar.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouBetStar message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar} LongHuDouBetStar
                                 */
                                LongHuDouBetStar.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar)
                                        return object;
                                    return new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar();
                                };

                                /**
                                 * Creates a plain object from a LongHuDouBetStar message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar} message LongHuDouBetStar
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouBetStar.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this LongHuDouBetStar to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouBetStar
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouBetStar.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouBetStar;
                            })();

                            message.LongHuDouEnd = (function() {

                                /**
                                 * Properties of a LongHuDouEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouEnd
                                 * @property {string|null} [icon] LongHuDouEnd icon
                                 * @property {string|null} [name] LongHuDouEnd name
                                 * @property {number|Long|null} [gold] LongHuDouEnd gold
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>|null} [cards] LongHuDouEnd cards
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IRankSettlement>|null} [rankSettlements] LongHuDouEnd rankSettlements
                                 */

                                /**
                                 * Constructs a new LongHuDouEnd.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouEnd.
                                 * @implements ILongHuDouEnd
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouEnd=} [properties] Properties to set
                                 */
                                function LongHuDouEnd(properties) {
                                    this.cards = [];
                                    this.rankSettlements = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouEnd icon.
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 */
                                LongHuDouEnd.prototype.icon = "";

                                /**
                                 * LongHuDouEnd name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 */
                                LongHuDouEnd.prototype.name = "";

                                /**
                                 * LongHuDouEnd gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 */
                                LongHuDouEnd.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * LongHuDouEnd cards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 */
                                LongHuDouEnd.prototype.cards = $util.emptyArray;

                                /**
                                 * LongHuDouEnd rankSettlements.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IRankSettlement>} rankSettlements
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 */
                                LongHuDouEnd.prototype.rankSettlements = $util.emptyArray;

                                /**
                                 * Creates a new LongHuDouEnd instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouEnd=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd} LongHuDouEnd instance
                                 */
                                LongHuDouEnd.create = function create(properties) {
                                    return new LongHuDouEnd(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouEnd message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouEnd} message LongHuDouEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouEnd.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.icon);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.gold);
                                    if (message.cards != null && message.cards.length)
                                        for (var i = 0; i < message.cards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Card.encode(message.cards[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    if (message.rankSettlements != null && message.rankSettlements.length)
                                        for (var i = 0; i < message.rankSettlements.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.encode(message.rankSettlements[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouEnd message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouEnd} message LongHuDouEnd message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouEnd.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouEnd message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd} LongHuDouEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouEnd.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.icon = reader.string();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.gold = reader.int64();
                                            break;
                                        case 4:
                                            if (!(message.cards && message.cards.length))
                                                message.cards = [];
                                            message.cards.push($root.com.aoo.chess.comms.protocol.proto.message.Card.decode(reader, reader.uint32()));
                                            break;
                                        case 5:
                                            if (!(message.rankSettlements && message.rankSettlements.length))
                                                message.rankSettlements = [];
                                            message.rankSettlements.push($root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouEnd message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd} LongHuDouEnd
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouEnd.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouEnd message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouEnd.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        if (!Array.isArray(message.cards))
                                            return "cards: array expected";
                                        for (var i = 0; i < message.cards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Card.verify(message.cards[i]);
                                            if (error)
                                                return "cards." + error;
                                        }
                                    }
                                    if (message.rankSettlements != null && message.hasOwnProperty("rankSettlements")) {
                                        if (!Array.isArray(message.rankSettlements))
                                            return "rankSettlements: array expected";
                                        for (var i = 0; i < message.rankSettlements.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.verify(message.rankSettlements[i]);
                                            if (error)
                                                return "rankSettlements." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouEnd message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd} LongHuDouEnd
                                 */
                                LongHuDouEnd.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd();
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    if (object.cards) {
                                        if (!Array.isArray(object.cards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.cards: array expected");
                                        message.cards = [];
                                        for (var i = 0; i < object.cards.length; ++i) {
                                            if (typeof object.cards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.cards: object expected");
                                            message.cards[i] = $root.com.aoo.chess.comms.protocol.proto.message.Card.fromObject(object.cards[i]);
                                        }
                                    }
                                    if (object.rankSettlements) {
                                        if (!Array.isArray(object.rankSettlements))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.rankSettlements: array expected");
                                        message.rankSettlements = [];
                                        for (var i = 0; i < object.rankSettlements.length; ++i) {
                                            if (typeof object.rankSettlements[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd.rankSettlements: object expected");
                                            message.rankSettlements[i] = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.fromObject(object.rankSettlements[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouEnd message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd} message LongHuDouEnd
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouEnd.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults) {
                                        object.cards = [];
                                        object.rankSettlements = [];
                                    }
                                    if (options.defaults) {
                                        object.icon = "";
                                        object.name = "";
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    if (message.cards && message.cards.length) {
                                        object.cards = [];
                                        for (var j = 0; j < message.cards.length; ++j)
                                            object.cards[j] = $root.com.aoo.chess.comms.protocol.proto.message.Card.toObject(message.cards[j], options);
                                    }
                                    if (message.rankSettlements && message.rankSettlements.length) {
                                        object.rankSettlements = [];
                                        for (var j = 0; j < message.rankSettlements.length; ++j)
                                            object.rankSettlements[j] = $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement.toObject(message.rankSettlements[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouEnd to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouEnd
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouEnd.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouEnd;
                            })();

                            message.RankSettlement = (function() {

                                /**
                                 * Properties of a RankSettlement.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRankSettlement
                                 * @property {number|null} [playerId] RankSettlement playerId
                                 * @property {number|Long|null} [gold] RankSettlement gold
                                 */

                                /**
                                 * Constructs a new RankSettlement.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a RankSettlement.
                                 * @implements IRankSettlement
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRankSettlement=} [properties] Properties to set
                                 */
                                function RankSettlement(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * RankSettlement playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @instance
                                 */
                                RankSettlement.prototype.playerId = 0;

                                /**
                                 * RankSettlement gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @instance
                                 */
                                RankSettlement.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new RankSettlement instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRankSettlement=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RankSettlement} RankSettlement instance
                                 */
                                RankSettlement.create = function create(properties) {
                                    return new RankSettlement(properties);
                                };

                                /**
                                 * Encodes the specified RankSettlement message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RankSettlement.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRankSettlement} message RankSettlement message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RankSettlement.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RankSettlement message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RankSettlement.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRankSettlement} message RankSettlement message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RankSettlement.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RankSettlement message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RankSettlement} RankSettlement
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RankSettlement.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.gold = reader.sint64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RankSettlement message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RankSettlement} RankSettlement
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RankSettlement.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RankSettlement message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RankSettlement.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a RankSettlement message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RankSettlement} RankSettlement
                                 */
                                RankSettlement.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RankSettlement();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RankSettlement message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RankSettlement} message RankSettlement
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RankSettlement.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this RankSettlement to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RankSettlement
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RankSettlement.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RankSettlement;
                            })();

                            message.LongHuDouAward = (function() {

                                /**
                                 * Properties of a LongHuDouAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILongHuDouAward
                                 * @property {number|null} [type] LongHuDouAward type
                                 * @property {number|Long|null} [gold] LongHuDouAward gold
                                 * @property {number|Long|null} [profit] LongHuDouAward profit
                                 */

                                /**
                                 * Constructs a new LongHuDouAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LongHuDouAward.
                                 * @implements ILongHuDouAward
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouAward=} [properties] Properties to set
                                 */
                                function LongHuDouAward(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LongHuDouAward type.
                                 * @member {number} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @instance
                                 */
                                LongHuDouAward.prototype.type = 0;

                                /**
                                 * LongHuDouAward gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @instance
                                 */
                                LongHuDouAward.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * LongHuDouAward profit.
                                 * @member {number|Long} profit
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @instance
                                 */
                                LongHuDouAward.prototype.profit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new LongHuDouAward instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouAward=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouAward} LongHuDouAward instance
                                 */
                                LongHuDouAward.create = function create(properties) {
                                    return new LongHuDouAward(properties);
                                };

                                /**
                                 * Encodes the specified LongHuDouAward message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouAward.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouAward} message LongHuDouAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouAward.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gold);
                                    if (message.profit != null && message.hasOwnProperty("profit"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.profit);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LongHuDouAward message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LongHuDouAward.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILongHuDouAward} message LongHuDouAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LongHuDouAward.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LongHuDouAward message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouAward} LongHuDouAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouAward.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouAward();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            message.gold = reader.int64();
                                            break;
                                        case 3:
                                            message.profit = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LongHuDouAward message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouAward} LongHuDouAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LongHuDouAward.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LongHuDouAward message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LongHuDouAward.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        if (!$util.isInteger(message.type))
                                            return "type: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    if (message.profit != null && message.hasOwnProperty("profit"))
                                        if (!$util.isInteger(message.profit) && !(message.profit && $util.isInteger(message.profit.low) && $util.isInteger(message.profit.high)))
                                            return "profit: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a LongHuDouAward message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LongHuDouAward} LongHuDouAward
                                 */
                                LongHuDouAward.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouAward)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LongHuDouAward();
                                    if (object.type != null)
                                        message.type = object.type | 0;
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    if (object.profit != null)
                                        if ($util.Long)
                                            (message.profit = $util.Long.fromValue(object.profit)).unsigned = false;
                                        else if (typeof object.profit === "string")
                                            message.profit = parseInt(object.profit, 10);
                                        else if (typeof object.profit === "number")
                                            message.profit = object.profit;
                                        else if (typeof object.profit === "object")
                                            message.profit = new $util.LongBits(object.profit.low >>> 0, object.profit.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LongHuDouAward message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LongHuDouAward} message LongHuDouAward
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LongHuDouAward.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.profit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.profit = options.longs === String ? "0" : 0;
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = message.type;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    if (message.profit != null && message.hasOwnProperty("profit"))
                                        if (typeof message.profit === "number")
                                            object.profit = options.longs === String ? String(message.profit) : message.profit;
                                        else
                                            object.profit = options.longs === String ? $util.Long.prototype.toString.call(message.profit) : options.longs === Number ? new $util.LongBits(message.profit.low >>> 0, message.profit.high >>> 0).toNumber() : message.profit;
                                    return object;
                                };

                                /**
                                 * Converts this LongHuDouAward to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LongHuDouAward
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LongHuDouAward.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LongHuDouAward;
                            })();

                            message.GainLongHuDouRoomInfo = (function() {

                                /**
                                 * Properties of a GainLongHuDouRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainLongHuDouRoomInfo
                                 * @property {number|null} [playerId] GainLongHuDouRoomInfo playerId
                                 */

                                /**
                                 * Constructs a new GainLongHuDouRoomInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainLongHuDouRoomInfo.
                                 * @implements IGainLongHuDouRoomInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainLongHuDouRoomInfo=} [properties] Properties to set
                                 */
                                function GainLongHuDouRoomInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * GainLongHuDouRoomInfo playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @instance
                                 */
                                GainLongHuDouRoomInfo.prototype.playerId = 0;

                                /**
                                 * Creates a new GainLongHuDouRoomInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainLongHuDouRoomInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo} GainLongHuDouRoomInfo instance
                                 */
                                GainLongHuDouRoomInfo.create = function create(properties) {
                                    return new GainLongHuDouRoomInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainLongHuDouRoomInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainLongHuDouRoomInfo} message GainLongHuDouRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainLongHuDouRoomInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainLongHuDouRoomInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainLongHuDouRoomInfo} message GainLongHuDouRoomInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainLongHuDouRoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainLongHuDouRoomInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo} GainLongHuDouRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainLongHuDouRoomInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainLongHuDouRoomInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo} GainLongHuDouRoomInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainLongHuDouRoomInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainLongHuDouRoomInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainLongHuDouRoomInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainLongHuDouRoomInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo} GainLongHuDouRoomInfo
                                 */
                                GainLongHuDouRoomInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a GainLongHuDouRoomInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo} message GainLongHuDouRoomInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainLongHuDouRoomInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.playerId = 0;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this GainLongHuDouRoomInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainLongHuDouRoomInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainLongHuDouRoomInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainLongHuDouRoomInfo;
                            })();

                            message.WorldChatMessage = (function() {

                                /**
                                 * Properties of a WorldChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IWorldChatMessage
                                 * @property {string|null} [playerName] WorldChatMessage playerName
                                 * @property {string|null} [message] WorldChatMessage message
                                 * @property {number|null} [playerId] WorldChatMessage playerId
                                 */

                                /**
                                 * Constructs a new WorldChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a WorldChatMessage.
                                 * @implements IWorldChatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IWorldChatMessage=} [properties] Properties to set
                                 */
                                function WorldChatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * WorldChatMessage playerName.
                                 * @member {string} playerName
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @instance
                                 */
                                WorldChatMessage.prototype.playerName = "";

                                /**
                                 * WorldChatMessage message.
                                 * @member {string} message
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @instance
                                 */
                                WorldChatMessage.prototype.message = "";

                                /**
                                 * WorldChatMessage playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @instance
                                 */
                                WorldChatMessage.prototype.playerId = 0;

                                /**
                                 * Creates a new WorldChatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IWorldChatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.WorldChatMessage} WorldChatMessage instance
                                 */
                                WorldChatMessage.create = function create(properties) {
                                    return new WorldChatMessage(properties);
                                };

                                /**
                                 * Encodes the specified WorldChatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.WorldChatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IWorldChatMessage} message WorldChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WorldChatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerName != null && message.hasOwnProperty("playerName"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.playerName);
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.playerId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified WorldChatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.WorldChatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IWorldChatMessage} message WorldChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                WorldChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a WorldChatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.WorldChatMessage} WorldChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WorldChatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.WorldChatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerName = reader.string();
                                            break;
                                        case 2:
                                            message.message = reader.string();
                                            break;
                                        case 3:
                                            message.playerId = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a WorldChatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.WorldChatMessage} WorldChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                WorldChatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a WorldChatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                WorldChatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerName != null && message.hasOwnProperty("playerName"))
                                        if (!$util.isString(message.playerName))
                                            return "playerName: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a WorldChatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.WorldChatMessage} WorldChatMessage
                                 */
                                WorldChatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.WorldChatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.WorldChatMessage();
                                    if (object.playerName != null)
                                        message.playerName = String(object.playerName);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a WorldChatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.WorldChatMessage} message WorldChatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                WorldChatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerName = "";
                                        object.message = "";
                                        object.playerId = 0;
                                    }
                                    if (message.playerName != null && message.hasOwnProperty("playerName"))
                                        object.playerName = message.playerName;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    return object;
                                };

                                /**
                                 * Converts this WorldChatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.WorldChatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                WorldChatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return WorldChatMessage;
                            })();

                            /**
                             * RollType enum.
                             * @name com.aoo.chess.comms.protocol.proto.message.RollType
                             * @enum {string}
                             * @property {number} SYSTEM=0 SYSTEM value
                             * @property {number} ROOM=1 ROOM value
                             * @property {number} LOTTERY=2 LOTTERY value
                             */
                            message.RollType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "SYSTEM"] = 0;
                                values[valuesById[1] = "ROOM"] = 1;
                                values[valuesById[2] = "LOTTERY"] = 2;
                                return values;
                            })();

                            message.RollMessage = (function() {

                                /**
                                 * Properties of a RollMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRollMessage
                                 * @property {com.aoo.chess.comms.protocol.proto.message.RollType|null} [type] RollMessage type
                                 * @property {string|null} [message] RollMessage message
                                 */

                                /**
                                 * Constructs a new RollMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a RollMessage.
                                 * @implements IRollMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRollMessage=} [properties] Properties to set
                                 */
                                function RollMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * RollMessage type.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.RollType} type
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @instance
                                 */
                                RollMessage.prototype.type = 0;

                                /**
                                 * RollMessage message.
                                 * @member {string} message
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @instance
                                 */
                                RollMessage.prototype.message = "";

                                /**
                                 * Creates a new RollMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRollMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RollMessage} RollMessage instance
                                 */
                                RollMessage.create = function create(properties) {
                                    return new RollMessage(properties);
                                };

                                /**
                                 * Encodes the specified RollMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RollMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRollMessage} message RollMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RollMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RollMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RollMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRollMessage} message RollMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RollMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RollMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RollMessage} RollMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RollMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RollMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.type = reader.int32();
                                            break;
                                        case 2:
                                            message.message = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RollMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RollMessage} RollMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RollMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RollMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RollMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        switch (message.type) {
                                        default:
                                            return "type: enum value expected";
                                        case 0:
                                        case 1:
                                        case 2:
                                            break;
                                        }
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a RollMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RollMessage} RollMessage
                                 */
                                RollMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RollMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RollMessage();
                                    switch (object.type) {
                                    case "SYSTEM":
                                    case 0:
                                        message.type = 0;
                                        break;
                                    case "ROOM":
                                    case 1:
                                        message.type = 1;
                                        break;
                                    case "LOTTERY":
                                    case 2:
                                        message.type = 2;
                                        break;
                                    }
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RollMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RollMessage} message RollMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RollMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.type = options.enums === String ? "SYSTEM" : 0;
                                        object.message = "";
                                    }
                                    if (message.type != null && message.hasOwnProperty("type"))
                                        object.type = options.enums === String ? $root.com.aoo.chess.comms.protocol.proto.message.RollType[message.type] : message.type;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    return object;
                                };

                                /**
                                 * Converts this RollMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RollMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RollMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RollMessage;
                            })();

                            message.SendPriveteChatMessage = (function() {

                                /**
                                 * Properties of a SendPriveteChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ISendPriveteChatMessage
                                 * @property {number|null} [playerId] SendPriveteChatMessage playerId
                                 * @property {string|null} [message] SendPriveteChatMessage message
                                 */

                                /**
                                 * Constructs a new SendPriveteChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a SendPriveteChatMessage.
                                 * @implements ISendPriveteChatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendPriveteChatMessage=} [properties] Properties to set
                                 */
                                function SendPriveteChatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * SendPriveteChatMessage playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @instance
                                 */
                                SendPriveteChatMessage.prototype.playerId = 0;

                                /**
                                 * SendPriveteChatMessage message.
                                 * @member {string} message
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @instance
                                 */
                                SendPriveteChatMessage.prototype.message = "";

                                /**
                                 * Creates a new SendPriveteChatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendPriveteChatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage} SendPriveteChatMessage instance
                                 */
                                SendPriveteChatMessage.create = function create(properties) {
                                    return new SendPriveteChatMessage(properties);
                                };

                                /**
                                 * Encodes the specified SendPriveteChatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendPriveteChatMessage} message SendPriveteChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                SendPriveteChatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified SendPriveteChatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendPriveteChatMessage} message SendPriveteChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                SendPriveteChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a SendPriveteChatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage} SendPriveteChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                SendPriveteChatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.message = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a SendPriveteChatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage} SendPriveteChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                SendPriveteChatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a SendPriveteChatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                SendPriveteChatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a SendPriveteChatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage} SendPriveteChatMessage
                                 */
                                SendPriveteChatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a SendPriveteChatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage} message SendPriveteChatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                SendPriveteChatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.message = "";
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    return object;
                                };

                                /**
                                 * Converts this SendPriveteChatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendPriveteChatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                SendPriveteChatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return SendPriveteChatMessage;
                            })();

                            message.ServerPrivateChatMessage = (function() {

                                /**
                                 * Properties of a ServerPrivateChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IServerPrivateChatMessage
                                 * @property {number|null} [playerId] ServerPrivateChatMessage playerId
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage|null} [msg] ServerPrivateChatMessage msg
                                 */

                                /**
                                 * Constructs a new ServerPrivateChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ServerPrivateChatMessage.
                                 * @implements IServerPrivateChatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPrivateChatMessage=} [properties] Properties to set
                                 */
                                function ServerPrivateChatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ServerPrivateChatMessage playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @instance
                                 */
                                ServerPrivateChatMessage.prototype.playerId = 0;

                                /**
                                 * ServerPrivateChatMessage msg.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage|null|undefined} msg
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @instance
                                 */
                                ServerPrivateChatMessage.prototype.msg = null;

                                /**
                                 * Creates a new ServerPrivateChatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPrivateChatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage} ServerPrivateChatMessage instance
                                 */
                                ServerPrivateChatMessage.create = function create(properties) {
                                    return new ServerPrivateChatMessage(properties);
                                };

                                /**
                                 * Encodes the specified ServerPrivateChatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPrivateChatMessage} message ServerPrivateChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerPrivateChatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.encode(message.msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerPrivateChatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerPrivateChatMessage} message ServerPrivateChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerPrivateChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerPrivateChatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage} ServerPrivateChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerPrivateChatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.msg = $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerPrivateChatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage} ServerPrivateChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerPrivateChatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerPrivateChatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerPrivateChatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.msg != null && message.hasOwnProperty("msg")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.verify(message.msg);
                                        if (error)
                                            return "msg." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ServerPrivateChatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage} ServerPrivateChatMessage
                                 */
                                ServerPrivateChatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.msg != null) {
                                        if (typeof object.msg !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage.msg: object expected");
                                        message.msg = $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.fromObject(object.msg);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerPrivateChatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage} message ServerPrivateChatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerPrivateChatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.msg = null;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.msg != null && message.hasOwnProperty("msg"))
                                        object.msg = $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.toObject(message.msg, options);
                                    return object;
                                };

                                /**
                                 * Converts this ServerPrivateChatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerPrivateChatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerPrivateChatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ServerPrivateChatMessage;
                            })();

                            message.PrivateChatMessage = (function() {

                                /**
                                 * Properties of a PrivateChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPrivateChatMessage
                                 * @property {number|null} [playerId] PrivateChatMessage playerId
                                 * @property {string|null} [name] PrivateChatMessage name
                                 * @property {string|null} [message] PrivateChatMessage message
                                 * @property {string|null} [icon] PrivateChatMessage icon
                                 * @property {number|null} [vipPoints] PrivateChatMessage vipPoints
                                 */

                                /**
                                 * Constructs a new PrivateChatMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PrivateChatMessage.
                                 * @implements IPrivateChatMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage=} [properties] Properties to set
                                 */
                                function PrivateChatMessage(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PrivateChatMessage playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 */
                                PrivateChatMessage.prototype.playerId = 0;

                                /**
                                 * PrivateChatMessage name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 */
                                PrivateChatMessage.prototype.name = "";

                                /**
                                 * PrivateChatMessage message.
                                 * @member {string} message
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 */
                                PrivateChatMessage.prototype.message = "";

                                /**
                                 * PrivateChatMessage icon.
                                 * @member {string} icon
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 */
                                PrivateChatMessage.prototype.icon = "";

                                /**
                                 * PrivateChatMessage vipPoints.
                                 * @member {number} vipPoints
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 */
                                PrivateChatMessage.prototype.vipPoints = 0;

                                /**
                                 * Creates a new PrivateChatMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage} PrivateChatMessage instance
                                 */
                                PrivateChatMessage.create = function create(properties) {
                                    return new PrivateChatMessage(properties);
                                };

                                /**
                                 * Encodes the specified PrivateChatMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage} message PrivateChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PrivateChatMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.icon);
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.vipPoints);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PrivateChatMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPrivateChatMessage} message PrivateChatMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PrivateChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PrivateChatMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage} PrivateChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PrivateChatMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        case 3:
                                            message.message = reader.string();
                                            break;
                                        case 4:
                                            message.icon = reader.string();
                                            break;
                                        case 5:
                                            message.vipPoints = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PrivateChatMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage} PrivateChatMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PrivateChatMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PrivateChatMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PrivateChatMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        if (!$util.isString(message.message))
                                            return "message: string expected";
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        if (!$util.isString(message.icon))
                                            return "icon: string expected";
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        if (!$util.isInteger(message.vipPoints))
                                            return "vipPoints: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PrivateChatMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage} PrivateChatMessage
                                 */
                                PrivateChatMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    if (object.message != null)
                                        message.message = String(object.message);
                                    if (object.icon != null)
                                        message.icon = String(object.icon);
                                    if (object.vipPoints != null)
                                        message.vipPoints = object.vipPoints | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PrivateChatMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage} message PrivateChatMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PrivateChatMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.name = "";
                                        object.message = "";
                                        object.icon = "";
                                        object.vipPoints = 0;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    if (message.message != null && message.hasOwnProperty("message"))
                                        object.message = message.message;
                                    if (message.icon != null && message.hasOwnProperty("icon"))
                                        object.icon = message.icon;
                                    if (message.vipPoints != null && message.hasOwnProperty("vipPoints"))
                                        object.vipPoints = message.vipPoints;
                                    return object;
                                };

                                /**
                                 * Converts this PrivateChatMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PrivateChatMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PrivateChatMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PrivateChatMessage;
                            })();

                            message.ErrorCode = (function() {

                                /**
                                 * Properties of an ErrorCode.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IErrorCode
                                 * @property {number|null} [code] ErrorCode code
                                 * @property {string|null} [description] ErrorCode description
                                 */

                                /**
                                 * Constructs a new ErrorCode.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents an ErrorCode.
                                 * @implements IErrorCode
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IErrorCode=} [properties] Properties to set
                                 */
                                function ErrorCode(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ErrorCode code.
                                 * @member {number} code
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @instance
                                 */
                                ErrorCode.prototype.code = 0;

                                /**
                                 * ErrorCode description.
                                 * @member {string} description
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @instance
                                 */
                                ErrorCode.prototype.description = "";

                                /**
                                 * Creates a new ErrorCode instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IErrorCode=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ErrorCode} ErrorCode instance
                                 */
                                ErrorCode.create = function create(properties) {
                                    return new ErrorCode(properties);
                                };

                                /**
                                 * Encodes the specified ErrorCode message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ErrorCode.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IErrorCode} message ErrorCode message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ErrorCode.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                                    if (message.description != null && message.hasOwnProperty("description"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ErrorCode message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ErrorCode.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IErrorCode} message ErrorCode message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ErrorCode.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an ErrorCode message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ErrorCode} ErrorCode
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ErrorCode.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ErrorCode();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.code = reader.int32();
                                            break;
                                        case 2:
                                            message.description = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an ErrorCode message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ErrorCode} ErrorCode
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ErrorCode.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an ErrorCode message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ErrorCode.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        if (!$util.isInteger(message.code))
                                            return "code: integer expected";
                                    if (message.description != null && message.hasOwnProperty("description"))
                                        if (!$util.isString(message.description))
                                            return "description: string expected";
                                    return null;
                                };

                                /**
                                 * Creates an ErrorCode message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ErrorCode} ErrorCode
                                 */
                                ErrorCode.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ErrorCode)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ErrorCode();
                                    if (object.code != null)
                                        message.code = object.code | 0;
                                    if (object.description != null)
                                        message.description = String(object.description);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an ErrorCode message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ErrorCode} message ErrorCode
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ErrorCode.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.code = 0;
                                        object.description = "";
                                    }
                                    if (message.code != null && message.hasOwnProperty("code"))
                                        object.code = message.code;
                                    if (message.description != null && message.hasOwnProperty("description"))
                                        object.description = message.description;
                                    return object;
                                };

                                /**
                                 * Converts this ErrorCode to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ErrorCode
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ErrorCode.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ErrorCode;
                            })();

                            message.LoginRequest = (function() {

                                /**
                                 * Properties of a LoginRequest.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILoginRequest
                                 * @property {string|null} [username] 用户名
                                 * @property {string|null} [password] 密码
                                 * @property {string|null} [channelId] 渠道编号
                                 */

                                /**
                                 * Constructs a new LoginRequest.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 登录请求
                                 * @implements ILoginRequest
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginRequest=} [properties] Properties to set
                                 */
                                function LoginRequest(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 用户名
                                 * @member {string} username
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @instance
                                 */
                                LoginRequest.prototype.username = "";

                                /**
                                 * 密码
                                 * @member {string} password
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @instance
                                 */
                                LoginRequest.prototype.password = "";

                                /**
                                 * 渠道编号
                                 * @member {string} channelId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @instance
                                 */
                                LoginRequest.prototype.channelId = "";

                                /**
                                 * Creates a new LoginRequest instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginRequest=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginRequest} LoginRequest instance
                                 */
                                LoginRequest.create = function create(properties) {
                                    return new LoginRequest(properties);
                                };

                                /**
                                 * Encodes the specified LoginRequest message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LoginRequest.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginRequest} message LoginRequest message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LoginRequest.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.channelId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LoginRequest.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginRequest} message LoginRequest message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LoginRequest message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginRequest} LoginRequest
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LoginRequest.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LoginRequest();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.username = reader.string();
                                            break;
                                        case 2:
                                            message.password = reader.string();
                                            break;
                                        case 3:
                                            message.channelId = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LoginRequest message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginRequest} LoginRequest
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LoginRequest.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LoginRequest message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LoginRequest.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        if (!$util.isString(message.username))
                                            return "username: string expected";
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        if (!$util.isString(message.password))
                                            return "password: string expected";
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        if (!$util.isString(message.channelId))
                                            return "channelId: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginRequest} LoginRequest
                                 */
                                LoginRequest.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LoginRequest)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LoginRequest();
                                    if (object.username != null)
                                        message.username = String(object.username);
                                    if (object.password != null)
                                        message.password = String(object.password);
                                    if (object.channelId != null)
                                        message.channelId = String(object.channelId);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LoginRequest} message LoginRequest
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LoginRequest.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.username = "";
                                        object.password = "";
                                        object.channelId = "";
                                    }
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        object.username = message.username;
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        object.password = message.password;
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        object.channelId = message.channelId;
                                    return object;
                                };

                                /**
                                 * Converts this LoginRequest to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginRequest
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LoginRequest.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LoginRequest;
                            })();

                            message.LoginResult = (function() {

                                /**
                                 * Properties of a LoginResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILoginResult
                                 * @property {string|null} [ip] 游戏服务器IP
                                 * @property {number|null} [port] 游戏服务器端口
                                 * @property {number|Long|null} [sessionId] 会话编号
                                 */

                                /**
                                 * Constructs a new LoginResult.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 登录结果
                                 * @implements ILoginResult
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginResult=} [properties] Properties to set
                                 */
                                function LoginResult(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 游戏服务器IP
                                 * @member {string} ip
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @instance
                                 */
                                LoginResult.prototype.ip = "";

                                /**
                                 * 游戏服务器端口
                                 * @member {number} port
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @instance
                                 */
                                LoginResult.prototype.port = 0;

                                /**
                                 * 会话编号
                                 * @member {number|Long} sessionId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @instance
                                 */
                                LoginResult.prototype.sessionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new LoginResult instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginResult=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginResult} LoginResult instance
                                 */
                                LoginResult.create = function create(properties) {
                                    return new LoginResult(properties);
                                };

                                /**
                                 * Encodes the specified LoginResult message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LoginResult.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginResult} message LoginResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LoginResult.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.port);
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.sessionId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LoginResult message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LoginResult.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILoginResult} message LoginResult message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LoginResult.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LoginResult message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginResult} LoginResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LoginResult.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LoginResult();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.ip = reader.string();
                                            break;
                                        case 2:
                                            message.port = reader.int32();
                                            break;
                                        case 3:
                                            message.sessionId = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LoginResult message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginResult} LoginResult
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LoginResult.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LoginResult message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LoginResult.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        if (!$util.isString(message.ip))
                                            return "ip: string expected";
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (!$util.isInteger(message.port))
                                            return "port: integer expected";
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        if (!$util.isInteger(message.sessionId) && !(message.sessionId && $util.isInteger(message.sessionId.low) && $util.isInteger(message.sessionId.high)))
                                            return "sessionId: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a LoginResult message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LoginResult} LoginResult
                                 */
                                LoginResult.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LoginResult)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LoginResult();
                                    if (object.ip != null)
                                        message.ip = String(object.ip);
                                    if (object.port != null)
                                        message.port = object.port | 0;
                                    if (object.sessionId != null)
                                        if ($util.Long)
                                            (message.sessionId = $util.Long.fromValue(object.sessionId)).unsigned = false;
                                        else if (typeof object.sessionId === "string")
                                            message.sessionId = parseInt(object.sessionId, 10);
                                        else if (typeof object.sessionId === "number")
                                            message.sessionId = object.sessionId;
                                        else if (typeof object.sessionId === "object")
                                            message.sessionId = new $util.LongBits(object.sessionId.low >>> 0, object.sessionId.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LoginResult message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LoginResult} message LoginResult
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LoginResult.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.ip = "";
                                        object.port = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.sessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.sessionId = options.longs === String ? "0" : 0;
                                    }
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        object.ip = message.ip;
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        object.port = message.port;
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        if (typeof message.sessionId === "number")
                                            object.sessionId = options.longs === String ? String(message.sessionId) : message.sessionId;
                                        else
                                            object.sessionId = options.longs === String ? $util.Long.prototype.toString.call(message.sessionId) : options.longs === Number ? new $util.LongBits(message.sessionId.low >>> 0, message.sessionId.high >>> 0).toNumber() : message.sessionId;
                                    return object;
                                };

                                /**
                                 * Converts this LoginResult to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LoginResult
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LoginResult.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LoginResult;
                            })();

                            message.RegisterRequest = (function() {

                                /**
                                 * Properties of a RegisterRequest.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IRegisterRequest
                                 * @property {string|null} [username] 用户名
                                 * @property {string|null} [password] 密码
                                 * @property {string|null} [channelId] 渠道编号
                                 * @property {number|null} [authCode] 验证码
                                 */

                                /**
                                 * Constructs a new RegisterRequest.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 注册请求
                                 * @implements IRegisterRequest
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRegisterRequest=} [properties] Properties to set
                                 */
                                function RegisterRequest(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 用户名
                                 * @member {string} username
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @instance
                                 */
                                RegisterRequest.prototype.username = "";

                                /**
                                 * 密码
                                 * @member {string} password
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @instance
                                 */
                                RegisterRequest.prototype.password = "";

                                /**
                                 * 渠道编号
                                 * @member {string} channelId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @instance
                                 */
                                RegisterRequest.prototype.channelId = "";

                                /**
                                 * 验证码
                                 * @member {number} authCode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @instance
                                 */
                                RegisterRequest.prototype.authCode = 0;

                                /**
                                 * Creates a new RegisterRequest instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRegisterRequest=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RegisterRequest} RegisterRequest instance
                                 */
                                RegisterRequest.create = function create(properties) {
                                    return new RegisterRequest(properties);
                                };

                                /**
                                 * Encodes the specified RegisterRequest message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RegisterRequest.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRegisterRequest} message RegisterRequest message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RegisterRequest.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.channelId);
                                    if (message.authCode != null && message.hasOwnProperty("authCode"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.authCode);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified RegisterRequest message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.RegisterRequest.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IRegisterRequest} message RegisterRequest message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                RegisterRequest.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a RegisterRequest message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RegisterRequest} RegisterRequest
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RegisterRequest.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.RegisterRequest();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.username = reader.string();
                                            break;
                                        case 2:
                                            message.password = reader.string();
                                            break;
                                        case 3:
                                            message.channelId = reader.string();
                                            break;
                                        case 4:
                                            message.authCode = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a RegisterRequest message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RegisterRequest} RegisterRequest
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                RegisterRequest.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a RegisterRequest message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                RegisterRequest.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        if (!$util.isString(message.username))
                                            return "username: string expected";
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        if (!$util.isString(message.password))
                                            return "password: string expected";
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        if (!$util.isString(message.channelId))
                                            return "channelId: string expected";
                                    if (message.authCode != null && message.hasOwnProperty("authCode"))
                                        if (!$util.isInteger(message.authCode))
                                            return "authCode: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a RegisterRequest message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.RegisterRequest} RegisterRequest
                                 */
                                RegisterRequest.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.RegisterRequest)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.RegisterRequest();
                                    if (object.username != null)
                                        message.username = String(object.username);
                                    if (object.password != null)
                                        message.password = String(object.password);
                                    if (object.channelId != null)
                                        message.channelId = String(object.channelId);
                                    if (object.authCode != null)
                                        message.authCode = object.authCode | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a RegisterRequest message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.RegisterRequest} message RegisterRequest
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                RegisterRequest.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.username = "";
                                        object.password = "";
                                        object.channelId = "";
                                        object.authCode = 0;
                                    }
                                    if (message.username != null && message.hasOwnProperty("username"))
                                        object.username = message.username;
                                    if (message.password != null && message.hasOwnProperty("password"))
                                        object.password = message.password;
                                    if (message.channelId != null && message.hasOwnProperty("channelId"))
                                        object.channelId = message.channelId;
                                    if (message.authCode != null && message.hasOwnProperty("authCode"))
                                        object.authCode = message.authCode;
                                    return object;
                                };

                                /**
                                 * Converts this RegisterRequest to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.RegisterRequest
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                RegisterRequest.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return RegisterRequest;
                            })();

                            message.PlayerLogin = (function() {

                                /**
                                 * Properties of a PlayerLogin.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerLogin
                                 * @property {number|Long|null} [sessionId] PlayerLogin sessionId
                                 */

                                /**
                                 * Constructs a new PlayerLogin.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerLogin.
                                 * @implements IPlayerLogin
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLogin=} [properties] Properties to set
                                 */
                                function PlayerLogin(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerLogin sessionId.
                                 * @member {number|Long} sessionId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @instance
                                 */
                                PlayerLogin.prototype.sessionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new PlayerLogin instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLogin=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLogin} PlayerLogin instance
                                 */
                                PlayerLogin.create = function create(properties) {
                                    return new PlayerLogin(properties);
                                };

                                /**
                                 * Encodes the specified PlayerLogin message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerLogin.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLogin} message PlayerLogin message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerLogin.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sessionId);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerLogin message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerLogin.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerLogin} message PlayerLogin message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerLogin.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerLogin message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLogin} PlayerLogin
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerLogin.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerLogin();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.sessionId = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerLogin message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLogin} PlayerLogin
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerLogin.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerLogin message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerLogin.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        if (!$util.isInteger(message.sessionId) && !(message.sessionId && $util.isInteger(message.sessionId.low) && $util.isInteger(message.sessionId.high)))
                                            return "sessionId: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerLogin message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerLogin} PlayerLogin
                                 */
                                PlayerLogin.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerLogin)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerLogin();
                                    if (object.sessionId != null)
                                        if ($util.Long)
                                            (message.sessionId = $util.Long.fromValue(object.sessionId)).unsigned = false;
                                        else if (typeof object.sessionId === "string")
                                            message.sessionId = parseInt(object.sessionId, 10);
                                        else if (typeof object.sessionId === "number")
                                            message.sessionId = object.sessionId;
                                        else if (typeof object.sessionId === "object")
                                            message.sessionId = new $util.LongBits(object.sessionId.low >>> 0, object.sessionId.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerLogin message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerLogin} message PlayerLogin
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerLogin.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.sessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.sessionId = options.longs === String ? "0" : 0;
                                    if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                        if (typeof message.sessionId === "number")
                                            object.sessionId = options.longs === String ? String(message.sessionId) : message.sessionId;
                                        else
                                            object.sessionId = options.longs === String ? $util.Long.prototype.toString.call(message.sessionId) : options.longs === Number ? new $util.LongBits(message.sessionId.low >>> 0, message.sessionId.high >>> 0).toNumber() : message.sessionId;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerLogin to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerLogin
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerLogin.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerLogin;
                            })();

                            message.PlayerRegister = (function() {

                                /**
                                 * Properties of a PlayerRegister.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerRegister
                                 * @property {number|null} [playerId] PlayerRegister playerId
                                 * @property {string|null} [name] PlayerRegister name
                                 */

                                /**
                                 * Constructs a new PlayerRegister.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerRegister.
                                 * @implements IPlayerRegister
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerRegister=} [properties] Properties to set
                                 */
                                function PlayerRegister(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerRegister playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @instance
                                 */
                                PlayerRegister.prototype.playerId = 0;

                                /**
                                 * PlayerRegister name.
                                 * @member {string} name
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @instance
                                 */
                                PlayerRegister.prototype.name = "";

                                /**
                                 * Creates a new PlayerRegister instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerRegister=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerRegister} PlayerRegister instance
                                 */
                                PlayerRegister.create = function create(properties) {
                                    return new PlayerRegister(properties);
                                };

                                /**
                                 * Encodes the specified PlayerRegister message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerRegister.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerRegister} message PlayerRegister message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerRegister.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerRegister message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerRegister.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerRegister} message PlayerRegister message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerRegister.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerRegister message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerRegister} PlayerRegister
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerRegister.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerRegister();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.name = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerRegister message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerRegister} PlayerRegister
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerRegister.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerRegister message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerRegister.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        if (!$util.isString(message.name))
                                            return "name: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerRegister message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerRegister} PlayerRegister
                                 */
                                PlayerRegister.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerRegister)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerRegister();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.name != null)
                                        message.name = String(object.name);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerRegister message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerRegister} message PlayerRegister
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerRegister.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.name = "";
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.name != null && message.hasOwnProperty("name"))
                                        object.name = message.name;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerRegister to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerRegister
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerRegister.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerRegister;
                            })();

                            message.GainOnlinePlayerSize = (function() {

                                /**
                                 * Properties of a GainOnlinePlayerSize.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainOnlinePlayerSize
                                 */

                                /**
                                 * Constructs a new GainOnlinePlayerSize.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainOnlinePlayerSize.
                                 * @implements IGainOnlinePlayerSize
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOnlinePlayerSize=} [properties] Properties to set
                                 */
                                function GainOnlinePlayerSize(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new GainOnlinePlayerSize instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOnlinePlayerSize=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize} GainOnlinePlayerSize instance
                                 */
                                GainOnlinePlayerSize.create = function create(properties) {
                                    return new GainOnlinePlayerSize(properties);
                                };

                                /**
                                 * Encodes the specified GainOnlinePlayerSize message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOnlinePlayerSize} message GainOnlinePlayerSize message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainOnlinePlayerSize.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainOnlinePlayerSize message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainOnlinePlayerSize} message GainOnlinePlayerSize message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainOnlinePlayerSize.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainOnlinePlayerSize message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize} GainOnlinePlayerSize
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainOnlinePlayerSize.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainOnlinePlayerSize message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize} GainOnlinePlayerSize
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainOnlinePlayerSize.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainOnlinePlayerSize message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainOnlinePlayerSize.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainOnlinePlayerSize message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize} GainOnlinePlayerSize
                                 */
                                GainOnlinePlayerSize.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize)
                                        return object;
                                    return new $root.com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize();
                                };

                                /**
                                 * Creates a plain object from a GainOnlinePlayerSize message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize} message GainOnlinePlayerSize
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainOnlinePlayerSize.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this GainOnlinePlayerSize to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainOnlinePlayerSize
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainOnlinePlayerSize.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainOnlinePlayerSize;
                            })();

                            message.OnlineSize = (function() {

                                /**
                                 * Properties of an OnlineSize.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IOnlineSize
                                 * @property {number|null} [size] OnlineSize size
                                 */

                                /**
                                 * Constructs a new OnlineSize.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents an OnlineSize.
                                 * @implements IOnlineSize
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOnlineSize=} [properties] Properties to set
                                 */
                                function OnlineSize(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * OnlineSize size.
                                 * @member {number} size
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @instance
                                 */
                                OnlineSize.prototype.size = 0;

                                /**
                                 * Creates a new OnlineSize instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOnlineSize=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OnlineSize} OnlineSize instance
                                 */
                                OnlineSize.create = function create(properties) {
                                    return new OnlineSize(properties);
                                };

                                /**
                                 * Encodes the specified OnlineSize message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OnlineSize.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOnlineSize} message OnlineSize message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OnlineSize.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.size != null && message.hasOwnProperty("size"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.size);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified OnlineSize message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OnlineSize.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOnlineSize} message OnlineSize message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OnlineSize.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an OnlineSize message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OnlineSize} OnlineSize
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OnlineSize.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.OnlineSize();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.size = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an OnlineSize message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OnlineSize} OnlineSize
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OnlineSize.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an OnlineSize message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                OnlineSize.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.size != null && message.hasOwnProperty("size"))
                                        if (!$util.isInteger(message.size))
                                            return "size: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates an OnlineSize message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OnlineSize} OnlineSize
                                 */
                                OnlineSize.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.OnlineSize)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.OnlineSize();
                                    if (object.size != null)
                                        message.size = object.size | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an OnlineSize message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.OnlineSize} message OnlineSize
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                OnlineSize.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.size = 0;
                                    if (message.size != null && message.hasOwnProperty("size"))
                                        object.size = message.size;
                                    return object;
                                };

                                /**
                                 * Converts this OnlineSize to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OnlineSize
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                OnlineSize.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return OnlineSize;
                            })();

                            message.LotteryInfo = (function() {

                                /**
                                 * Properties of a LotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILotteryInfo
                                 * @property {Object.<string,number>|null} [myBetCounts] LotteryInfo myBetCounts
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null} [historyInfo] LotteryInfo historyInfo
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IBetInfo|null} [betInfo] LotteryInfo betInfo
                                 * @property {number|null} [state] LotteryInfo state
                                 * @property {number|Long|null} [time] LotteryInfo time
                                 */

                                /**
                                 * Constructs a new LotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 彩票信息
                                 * @implements ILotteryInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryInfo=} [properties] Properties to set
                                 */
                                function LotteryInfo(properties) {
                                    this.myBetCounts = {};
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LotteryInfo myBetCounts.
                                 * @member {Object.<string,number>} myBetCounts
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 */
                                LotteryInfo.prototype.myBetCounts = $util.emptyObject;

                                /**
                                 * LotteryInfo historyInfo.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null|undefined} historyInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 */
                                LotteryInfo.prototype.historyInfo = null;

                                /**
                                 * LotteryInfo betInfo.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IBetInfo|null|undefined} betInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 */
                                LotteryInfo.prototype.betInfo = null;

                                /**
                                 * LotteryInfo state.
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 */
                                LotteryInfo.prototype.state = 0;

                                /**
                                 * LotteryInfo time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 */
                                LotteryInfo.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new LotteryInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryInfo} LotteryInfo instance
                                 */
                                LotteryInfo.create = function create(properties) {
                                    return new LotteryInfo(properties);
                                };

                                /**
                                 * Encodes the specified LotteryInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryInfo} message LotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.myBetCounts != null && message.hasOwnProperty("myBetCounts"))
                                        for (var keys = Object.keys(message.myBetCounts), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.myBetCounts[keys[i]]).ldelim();
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.encode(message.historyInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.encode(message.betInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.time);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LotteryInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryInfo} message LotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LotteryInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryInfo} LotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryInfo(), key;
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            reader.skip().pos++;
                                            if (message.myBetCounts === $util.emptyObject)
                                                message.myBetCounts = {};
                                            key = reader.int32();
                                            reader.pos++;
                                            message.myBetCounts[key] = reader.int32();
                                            break;
                                        case 2:
                                            message.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.decode(reader, reader.uint32());
                                            break;
                                        case 4:
                                            message.state = reader.int32();
                                            break;
                                        case 5:
                                            message.time = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LotteryInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryInfo} LotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LotteryInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LotteryInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.myBetCounts != null && message.hasOwnProperty("myBetCounts")) {
                                        if (!$util.isObject(message.myBetCounts))
                                            return "myBetCounts: object expected";
                                        var key = Object.keys(message.myBetCounts);
                                        for (var i = 0; i < key.length; ++i) {
                                            if (!$util.key32Re.test(key[i]))
                                                return "myBetCounts: integer key{k:int32} expected";
                                            if (!$util.isInteger(message.myBetCounts[key[i]]))
                                                return "myBetCounts: integer{k:int32} expected";
                                        }
                                    }
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.verify(message.historyInfo);
                                        if (error)
                                            return "historyInfo." + error;
                                    }
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.verify(message.betInfo);
                                        if (error)
                                            return "betInfo." + error;
                                    }
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a LotteryInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryInfo} LotteryInfo
                                 */
                                LotteryInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LotteryInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryInfo();
                                    if (object.myBetCounts) {
                                        if (typeof object.myBetCounts !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LotteryInfo.myBetCounts: object expected");
                                        message.myBetCounts = {};
                                        for (var keys = Object.keys(object.myBetCounts), i = 0; i < keys.length; ++i)
                                            message.myBetCounts[keys[i]] = object.myBetCounts[keys[i]] | 0;
                                    }
                                    if (object.historyInfo != null) {
                                        if (typeof object.historyInfo !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LotteryInfo.historyInfo: object expected");
                                        message.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.fromObject(object.historyInfo);
                                    }
                                    if (object.betInfo != null) {
                                        if (typeof object.betInfo !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LotteryInfo.betInfo: object expected");
                                        message.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.fromObject(object.betInfo);
                                    }
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LotteryInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LotteryInfo} message LotteryInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LotteryInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.objects || options.defaults)
                                        object.myBetCounts = {};
                                    if (options.defaults) {
                                        object.historyInfo = null;
                                        object.betInfo = null;
                                        object.state = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    }
                                    var keys2;
                                    if (message.myBetCounts && (keys2 = Object.keys(message.myBetCounts)).length) {
                                        object.myBetCounts = {};
                                        for (var j = 0; j < keys2.length; ++j)
                                            object.myBetCounts[keys2[j]] = message.myBetCounts[keys2[j]];
                                    }
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo"))
                                        object.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.toObject(message.historyInfo, options);
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo"))
                                        object.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.toObject(message.betInfo, options);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    return object;
                                };

                                /**
                                 * Converts this LotteryInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LotteryInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LotteryInfo;
                            })();

                            message.BetInfo = (function() {

                                /**
                                 * Properties of a BetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBetInfo
                                 * @property {Object.<string,number>|null} [betCounts] BetInfo betCounts
                                 * @property {number|null} [betPlayers] BetInfo betPlayers
                                 */

                                /**
                                 * Constructs a new BetInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BetInfo.
                                 * @implements IBetInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetInfo=} [properties] Properties to set
                                 */
                                function BetInfo(properties) {
                                    this.betCounts = {};
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BetInfo betCounts.
                                 * @member {Object.<string,number>} betCounts
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @instance
                                 */
                                BetInfo.prototype.betCounts = $util.emptyObject;

                                /**
                                 * BetInfo betPlayers.
                                 * @member {number} betPlayers
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @instance
                                 */
                                BetInfo.prototype.betPlayers = 0;

                                /**
                                 * Creates a new BetInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetInfo} BetInfo instance
                                 */
                                BetInfo.create = function create(properties) {
                                    return new BetInfo(properties);
                                };

                                /**
                                 * Encodes the specified BetInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BetInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetInfo} message BetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BetInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.betCounts != null && message.hasOwnProperty("betCounts"))
                                        for (var keys = Object.keys(message.betCounts), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.betCounts[keys[i]]).ldelim();
                                    if (message.betPlayers != null && message.hasOwnProperty("betPlayers"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.betPlayers);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BetInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BetInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetInfo} message BetInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BetInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BetInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetInfo} BetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BetInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BetInfo(), key;
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            reader.skip().pos++;
                                            if (message.betCounts === $util.emptyObject)
                                                message.betCounts = {};
                                            key = reader.int32();
                                            reader.pos++;
                                            message.betCounts[key] = reader.int32();
                                            break;
                                        case 2:
                                            message.betPlayers = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BetInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetInfo} BetInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BetInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BetInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BetInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.betCounts != null && message.hasOwnProperty("betCounts")) {
                                        if (!$util.isObject(message.betCounts))
                                            return "betCounts: object expected";
                                        var key = Object.keys(message.betCounts);
                                        for (var i = 0; i < key.length; ++i) {
                                            if (!$util.key32Re.test(key[i]))
                                                return "betCounts: integer key{k:int32} expected";
                                            if (!$util.isInteger(message.betCounts[key[i]]))
                                                return "betCounts: integer{k:int32} expected";
                                        }
                                    }
                                    if (message.betPlayers != null && message.hasOwnProperty("betPlayers"))
                                        if (!$util.isInteger(message.betPlayers))
                                            return "betPlayers: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a BetInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetInfo} BetInfo
                                 */
                                BetInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BetInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BetInfo();
                                    if (object.betCounts) {
                                        if (typeof object.betCounts !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.BetInfo.betCounts: object expected");
                                        message.betCounts = {};
                                        for (var keys = Object.keys(object.betCounts), i = 0; i < keys.length; ++i)
                                            message.betCounts[keys[i]] = object.betCounts[keys[i]] | 0;
                                    }
                                    if (object.betPlayers != null)
                                        message.betPlayers = object.betPlayers | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BetInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BetInfo} message BetInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BetInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.objects || options.defaults)
                                        object.betCounts = {};
                                    if (options.defaults)
                                        object.betPlayers = 0;
                                    var keys2;
                                    if (message.betCounts && (keys2 = Object.keys(message.betCounts)).length) {
                                        object.betCounts = {};
                                        for (var j = 0; j < keys2.length; ++j)
                                            object.betCounts[keys2[j]] = message.betCounts[keys2[j]];
                                    }
                                    if (message.betPlayers != null && message.hasOwnProperty("betPlayers"))
                                        object.betPlayers = message.betPlayers;
                                    return object;
                                };

                                /**
                                 * Converts this BetInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BetInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BetInfo;
                            })();

                            message.lotteryAward = (function() {

                                /**
                                 * Properties of a lotteryAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IlotteryAward
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null} [info] lotteryAward info
                                 * @property {number|Long|null} [time] lotteryAward time
                                 * @property {Array.<number>|null} [players] lotteryAward players
                                 */

                                /**
                                 * Constructs a new lotteryAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a lotteryAward.
                                 * @implements IlotteryAward
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IlotteryAward=} [properties] Properties to set
                                 */
                                function lotteryAward(properties) {
                                    this.players = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * lotteryAward info.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null|undefined} info
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @instance
                                 */
                                lotteryAward.prototype.info = null;

                                /**
                                 * lotteryAward time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @instance
                                 */
                                lotteryAward.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * lotteryAward players.
                                 * @member {Array.<number>} players
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @instance
                                 */
                                lotteryAward.prototype.players = $util.emptyArray;

                                /**
                                 * Creates a new lotteryAward instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IlotteryAward=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.lotteryAward} lotteryAward instance
                                 */
                                lotteryAward.create = function create(properties) {
                                    return new lotteryAward(properties);
                                };

                                /**
                                 * Encodes the specified lotteryAward message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.lotteryAward.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IlotteryAward} message lotteryAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                lotteryAward.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.encode(message.info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
                                    if (message.players != null && message.players.length) {
                                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                                        for (var i = 0; i < message.players.length; ++i)
                                            writer.int32(message.players[i]);
                                        writer.ldelim();
                                    }
                                    return writer;
                                };

                                /**
                                 * Encodes the specified lotteryAward message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.lotteryAward.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IlotteryAward} message lotteryAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                lotteryAward.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a lotteryAward message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.lotteryAward} lotteryAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                lotteryAward.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.lotteryAward();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.info = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.time = reader.int64();
                                            break;
                                        case 3:
                                            if (!(message.players && message.players.length))
                                                message.players = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.players.push(reader.int32());
                                            } else
                                                message.players.push(reader.int32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a lotteryAward message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.lotteryAward} lotteryAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                lotteryAward.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a lotteryAward message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                lotteryAward.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.info != null && message.hasOwnProperty("info")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.verify(message.info);
                                        if (error)
                                            return "info." + error;
                                    }
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    if (message.players != null && message.hasOwnProperty("players")) {
                                        if (!Array.isArray(message.players))
                                            return "players: array expected";
                                        for (var i = 0; i < message.players.length; ++i)
                                            if (!$util.isInteger(message.players[i]))
                                                return "players: integer[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a lotteryAward message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.lotteryAward} lotteryAward
                                 */
                                lotteryAward.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.lotteryAward)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.lotteryAward();
                                    if (object.info != null) {
                                        if (typeof object.info !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.lotteryAward.info: object expected");
                                        message.info = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.fromObject(object.info);
                                    }
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    if (object.players) {
                                        if (!Array.isArray(object.players))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.lotteryAward.players: array expected");
                                        message.players = [];
                                        for (var i = 0; i < object.players.length; ++i)
                                            message.players[i] = object.players[i] | 0;
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a lotteryAward message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.lotteryAward} message lotteryAward
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                lotteryAward.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.players = [];
                                    if (options.defaults) {
                                        object.info = null;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    }
                                    if (message.info != null && message.hasOwnProperty("info"))
                                        object.info = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.toObject(message.info, options);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    if (message.players && message.players.length) {
                                        object.players = [];
                                        for (var j = 0; j < message.players.length; ++j)
                                            object.players[j] = message.players[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this lotteryAward to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.lotteryAward
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                lotteryAward.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return lotteryAward;
                            })();

                            message.OpenCardInfo = (function() {

                                /**
                                 * Properties of an OpenCardInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IOpenCardInfo
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ILotteryCard|null} [card] OpenCardInfo card
                                 */

                                /**
                                 * Constructs a new OpenCardInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 开牌
                                 * @implements IOpenCardInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOpenCardInfo=} [properties] Properties to set
                                 */
                                function OpenCardInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * OpenCardInfo card.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ILotteryCard|null|undefined} card
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @instance
                                 */
                                OpenCardInfo.prototype.card = null;

                                /**
                                 * Creates a new OpenCardInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOpenCardInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OpenCardInfo} OpenCardInfo instance
                                 */
                                OpenCardInfo.create = function create(properties) {
                                    return new OpenCardInfo(properties);
                                };

                                /**
                                 * Encodes the specified OpenCardInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OpenCardInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOpenCardInfo} message OpenCardInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OpenCardInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.card != null && message.hasOwnProperty("card"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.encode(message.card, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified OpenCardInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.OpenCardInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IOpenCardInfo} message OpenCardInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                OpenCardInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes an OpenCardInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OpenCardInfo} OpenCardInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OpenCardInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.OpenCardInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes an OpenCardInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OpenCardInfo} OpenCardInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                OpenCardInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies an OpenCardInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                OpenCardInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.card != null && message.hasOwnProperty("card")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.verify(message.card);
                                        if (error)
                                            return "card." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates an OpenCardInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.OpenCardInfo} OpenCardInfo
                                 */
                                OpenCardInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.OpenCardInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.OpenCardInfo();
                                    if (object.card != null) {
                                        if (typeof object.card !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.OpenCardInfo.card: object expected");
                                        message.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.fromObject(object.card);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from an OpenCardInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.OpenCardInfo} message OpenCardInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                OpenCardInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.card = null;
                                    if (message.card != null && message.hasOwnProperty("card"))
                                        object.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.toObject(message.card, options);
                                    return object;
                                };

                                /**
                                 * Converts this OpenCardInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.OpenCardInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                OpenCardInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return OpenCardInfo;
                            })();

                            message.HistoryInfo = (function() {

                                /**
                                 * Properties of a HistoryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IHistoryInfo
                                 * @property {Array.<number>|null} [history] HistoryInfo history
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ILotteryCard|null} [card] HistoryInfo card
                                 * @property {number|Long|null} [gold] HistoryInfo gold
                                 */

                                /**
                                 * Constructs a new HistoryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 彩票历史记录
                                 * @implements IHistoryInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo=} [properties] Properties to set
                                 */
                                function HistoryInfo(properties) {
                                    this.history = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * HistoryInfo history.
                                 * @member {Array.<number>} history
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @instance
                                 */
                                HistoryInfo.prototype.history = $util.emptyArray;

                                /**
                                 * HistoryInfo card.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ILotteryCard|null|undefined} card
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @instance
                                 */
                                HistoryInfo.prototype.card = null;

                                /**
                                 * HistoryInfo gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @instance
                                 */
                                HistoryInfo.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new HistoryInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.HistoryInfo} HistoryInfo instance
                                 */
                                HistoryInfo.create = function create(properties) {
                                    return new HistoryInfo(properties);
                                };

                                /**
                                 * Encodes the specified HistoryInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.HistoryInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo} message HistoryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                HistoryInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.history != null && message.history.length) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                        for (var i = 0; i < message.history.length; ++i)
                                            writer.int32(message.history[i]);
                                        writer.ldelim();
                                    }
                                    if (message.card != null && message.hasOwnProperty("card"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.encode(message.card, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified HistoryInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.HistoryInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo} message HistoryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                HistoryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a HistoryInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.HistoryInfo} HistoryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                HistoryInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.history && message.history.length))
                                                message.history = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.history.push(reader.int32());
                                            } else
                                                message.history.push(reader.int32());
                                            break;
                                        case 2:
                                            message.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.gold = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a HistoryInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.HistoryInfo} HistoryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                HistoryInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a HistoryInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                HistoryInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.history != null && message.hasOwnProperty("history")) {
                                        if (!Array.isArray(message.history))
                                            return "history: array expected";
                                        for (var i = 0; i < message.history.length; ++i)
                                            if (!$util.isInteger(message.history[i]))
                                                return "history: integer[] expected";
                                    }
                                    if (message.card != null && message.hasOwnProperty("card")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.verify(message.card);
                                        if (error)
                                            return "card." + error;
                                    }
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a HistoryInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.HistoryInfo} HistoryInfo
                                 */
                                HistoryInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo();
                                    if (object.history) {
                                        if (!Array.isArray(object.history))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.HistoryInfo.history: array expected");
                                        message.history = [];
                                        for (var i = 0; i < object.history.length; ++i)
                                            message.history[i] = object.history[i] | 0;
                                    }
                                    if (object.card != null) {
                                        if (typeof object.card !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.HistoryInfo.card: object expected");
                                        message.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.fromObject(object.card);
                                    }
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a HistoryInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.HistoryInfo} message HistoryInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                HistoryInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.history = [];
                                    if (options.defaults) {
                                        object.card = null;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.history && message.history.length) {
                                        object.history = [];
                                        for (var j = 0; j < message.history.length; ++j)
                                            object.history[j] = message.history[j];
                                    }
                                    if (message.card != null && message.hasOwnProperty("card"))
                                        object.card = $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard.toObject(message.card, options);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this HistoryInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.HistoryInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                HistoryInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return HistoryInfo;
                            })();

                            message.LotteryCard = (function() {

                                /**
                                 * Properties of a LotteryCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILotteryCard
                                 * @property {number|null} [cardType] LotteryCard cardType
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>|null} [cards] LotteryCard cards
                                 */

                                /**
                                 * Constructs a new LotteryCard.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 彩票牌型
                                 * @implements ILotteryCard
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryCard=} [properties] Properties to set
                                 */
                                function LotteryCard(properties) {
                                    this.cards = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LotteryCard cardType.
                                 * @member {number} cardType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @instance
                                 */
                                LotteryCard.prototype.cardType = 0;

                                /**
                                 * LotteryCard cards.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.ICard>} cards
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @instance
                                 */
                                LotteryCard.prototype.cards = $util.emptyArray;

                                /**
                                 * Creates a new LotteryCard instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryCard=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryCard} LotteryCard instance
                                 */
                                LotteryCard.create = function create(properties) {
                                    return new LotteryCard(properties);
                                };

                                /**
                                 * Encodes the specified LotteryCard message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryCard.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryCard} message LotteryCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryCard.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cardType);
                                    if (message.cards != null && message.cards.length)
                                        for (var i = 0; i < message.cards.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.Card.encode(message.cards[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LotteryCard message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryCard.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryCard} message LotteryCard message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryCard.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LotteryCard message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryCard} LotteryCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryCard.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.cardType = reader.int32();
                                            break;
                                        case 2:
                                            if (!(message.cards && message.cards.length))
                                                message.cards = [];
                                            message.cards.push($root.com.aoo.chess.comms.protocol.proto.message.Card.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LotteryCard message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryCard} LotteryCard
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryCard.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LotteryCard message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LotteryCard.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        if (!$util.isInteger(message.cardType))
                                            return "cardType: integer expected";
                                    if (message.cards != null && message.hasOwnProperty("cards")) {
                                        if (!Array.isArray(message.cards))
                                            return "cards: array expected";
                                        for (var i = 0; i < message.cards.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.Card.verify(message.cards[i]);
                                            if (error)
                                                return "cards." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a LotteryCard message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryCard} LotteryCard
                                 */
                                LotteryCard.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryCard();
                                    if (object.cardType != null)
                                        message.cardType = object.cardType | 0;
                                    if (object.cards) {
                                        if (!Array.isArray(object.cards))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LotteryCard.cards: array expected");
                                        message.cards = [];
                                        for (var i = 0; i < object.cards.length; ++i) {
                                            if (typeof object.cards[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.LotteryCard.cards: object expected");
                                            message.cards[i] = $root.com.aoo.chess.comms.protocol.proto.message.Card.fromObject(object.cards[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LotteryCard message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LotteryCard} message LotteryCard
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LotteryCard.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.cards = [];
                                    if (options.defaults)
                                        object.cardType = 0;
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        object.cardType = message.cardType;
                                    if (message.cards && message.cards.length) {
                                        object.cards = [];
                                        for (var j = 0; j < message.cards.length; ++j)
                                            object.cards[j] = $root.com.aoo.chess.comms.protocol.proto.message.Card.toObject(message.cards[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this LotteryCard to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryCard
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LotteryCard.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LotteryCard;
                            })();

                            message.LotteryBet = (function() {

                                /**
                                 * Properties of a LotteryBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ILotteryBet
                                 * @property {number|null} [cardType] LotteryBet cardType
                                 * @property {number|null} [count] LotteryBet count
                                 */

                                /**
                                 * Constructs a new LotteryBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a LotteryBet.
                                 * @implements ILotteryBet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryBet=} [properties] Properties to set
                                 */
                                function LotteryBet(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LotteryBet cardType.
                                 * @member {number} cardType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @instance
                                 */
                                LotteryBet.prototype.cardType = 0;

                                /**
                                 * LotteryBet count.
                                 * @member {number} count
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @instance
                                 */
                                LotteryBet.prototype.count = 0;

                                /**
                                 * Creates a new LotteryBet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryBet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryBet} LotteryBet instance
                                 */
                                LotteryBet.create = function create(properties) {
                                    return new LotteryBet(properties);
                                };

                                /**
                                 * Encodes the specified LotteryBet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryBet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryBet} message LotteryBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryBet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cardType);
                                    if (message.count != null && message.hasOwnProperty("count"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified LotteryBet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.LotteryBet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ILotteryBet} message LotteryBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                LotteryBet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a LotteryBet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryBet} LotteryBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryBet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.cardType = reader.int32();
                                            break;
                                        case 2:
                                            message.count = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a LotteryBet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryBet} LotteryBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LotteryBet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a LotteryBet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                LotteryBet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        if (!$util.isInteger(message.cardType))
                                            return "cardType: integer expected";
                                    if (message.count != null && message.hasOwnProperty("count"))
                                        if (!$util.isInteger(message.count))
                                            return "count: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a LotteryBet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.LotteryBet} LotteryBet
                                 */
                                LotteryBet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet();
                                    if (object.cardType != null)
                                        message.cardType = object.cardType | 0;
                                    if (object.count != null)
                                        message.count = object.count | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a LotteryBet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.LotteryBet} message LotteryBet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                LotteryBet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.cardType = 0;
                                        object.count = 0;
                                    }
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        object.cardType = message.cardType;
                                    if (message.count != null && message.hasOwnProperty("count"))
                                        object.count = message.count;
                                    return object;
                                };

                                /**
                                 * Converts this LotteryBet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.LotteryBet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                LotteryBet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return LotteryBet;
                            })();

                            message.PlayerBet = (function() {

                                /**
                                 * Properties of a PlayerBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerBet
                                 * @property {number|null} [playerId] PlayerBet playerId
                                 * @property {com.aoo.chess.comms.protocol.proto.message.ILotteryBet|null} [bet] PlayerBet bet
                                 */

                                /**
                                 * Constructs a new PlayerBet.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerBet.
                                 * @implements IPlayerBet
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerBet=} [properties] Properties to set
                                 */
                                function PlayerBet(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerBet playerId.
                                 * @member {number} playerId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @instance
                                 */
                                PlayerBet.prototype.playerId = 0;

                                /**
                                 * PlayerBet bet.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.ILotteryBet|null|undefined} bet
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @instance
                                 */
                                PlayerBet.prototype.bet = null;

                                /**
                                 * Creates a new PlayerBet instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerBet=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerBet} PlayerBet instance
                                 */
                                PlayerBet.create = function create(properties) {
                                    return new PlayerBet(properties);
                                };

                                /**
                                 * Encodes the specified PlayerBet message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerBet.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerBet} message PlayerBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerBet.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playerId);
                                    if (message.bet != null && message.hasOwnProperty("bet"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet.encode(message.bet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerBet message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerBet.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerBet} message PlayerBet message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerBet.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerBet message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerBet} PlayerBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerBet.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerBet();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.playerId = reader.int32();
                                            break;
                                        case 2:
                                            message.bet = $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerBet message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerBet} PlayerBet
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerBet.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerBet message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerBet.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        if (!$util.isInteger(message.playerId))
                                            return "playerId: integer expected";
                                    if (message.bet != null && message.hasOwnProperty("bet")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet.verify(message.bet);
                                        if (error)
                                            return "bet." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a PlayerBet message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerBet} PlayerBet
                                 */
                                PlayerBet.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerBet)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerBet();
                                    if (object.playerId != null)
                                        message.playerId = object.playerId | 0;
                                    if (object.bet != null) {
                                        if (typeof object.bet !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerBet.bet: object expected");
                                        message.bet = $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet.fromObject(object.bet);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerBet message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerBet} message PlayerBet
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerBet.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.playerId = 0;
                                        object.bet = null;
                                    }
                                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                                        object.playerId = message.playerId;
                                    if (message.bet != null && message.hasOwnProperty("bet"))
                                        object.bet = $root.com.aoo.chess.comms.protocol.proto.message.LotteryBet.toObject(message.bet, options);
                                    return object;
                                };

                                /**
                                 * Converts this PlayerBet to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerBet
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerBet.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerBet;
                            })();

                            message.PlayerAward = (function() {

                                /**
                                 * Properties of a PlayerAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerAward
                                 * @property {number|null} [cardType] PlayerAward cardType
                                 * @property {number|Long|null} [gold] PlayerAward gold
                                 */

                                /**
                                 * Constructs a new PlayerAward.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc 玩家奖励
                                 * @implements IPlayerAward
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerAward=} [properties] Properties to set
                                 */
                                function PlayerAward(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerAward cardType.
                                 * @member {number} cardType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @instance
                                 */
                                PlayerAward.prototype.cardType = 0;

                                /**
                                 * PlayerAward gold.
                                 * @member {number|Long} gold
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @instance
                                 */
                                PlayerAward.prototype.gold = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new PlayerAward instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerAward=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerAward} PlayerAward instance
                                 */
                                PlayerAward.create = function create(properties) {
                                    return new PlayerAward(properties);
                                };

                                /**
                                 * Encodes the specified PlayerAward message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerAward.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerAward} message PlayerAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerAward.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cardType);
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gold);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerAward message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerAward.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerAward} message PlayerAward message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerAward.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerAward message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerAward} PlayerAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerAward.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerAward();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.cardType = reader.int32();
                                            break;
                                        case 2:
                                            message.gold = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerAward message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerAward} PlayerAward
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerAward.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerAward message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerAward.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        if (!$util.isInteger(message.cardType))
                                            return "cardType: integer expected";
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (!$util.isInteger(message.gold) && !(message.gold && $util.isInteger(message.gold.low) && $util.isInteger(message.gold.high)))
                                            return "gold: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerAward message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerAward} PlayerAward
                                 */
                                PlayerAward.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerAward)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerAward();
                                    if (object.cardType != null)
                                        message.cardType = object.cardType | 0;
                                    if (object.gold != null)
                                        if ($util.Long)
                                            (message.gold = $util.Long.fromValue(object.gold)).unsigned = false;
                                        else if (typeof object.gold === "string")
                                            message.gold = parseInt(object.gold, 10);
                                        else if (typeof object.gold === "number")
                                            message.gold = object.gold;
                                        else if (typeof object.gold === "object")
                                            message.gold = new $util.LongBits(object.gold.low >>> 0, object.gold.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerAward message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerAward} message PlayerAward
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerAward.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.cardType = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.gold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.gold = options.longs === String ? "0" : 0;
                                    }
                                    if (message.cardType != null && message.hasOwnProperty("cardType"))
                                        object.cardType = message.cardType;
                                    if (message.gold != null && message.hasOwnProperty("gold"))
                                        if (typeof message.gold === "number")
                                            object.gold = options.longs === String ? String(message.gold) : message.gold;
                                        else
                                            object.gold = options.longs === String ? $util.Long.prototype.toString.call(message.gold) : options.longs === Number ? new $util.LongBits(message.gold.low >>> 0, message.gold.high >>> 0).toNumber() : message.gold;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerAward to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerAward
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerAward.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerAward;
                            })();

                            message.BetStar = (function() {

                                /**
                                 * Properties of a BetStar.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IBetStar
                                 * @property {number|Long|null} [time] BetStar time
                                 */

                                /**
                                 * Constructs a new BetStar.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a BetStar.
                                 * @implements IBetStar
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetStar=} [properties] Properties to set
                                 */
                                function BetStar(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BetStar time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @instance
                                 */
                                BetStar.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new BetStar instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetStar=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetStar} BetStar instance
                                 */
                                BetStar.create = function create(properties) {
                                    return new BetStar(properties);
                                };

                                /**
                                 * Encodes the specified BetStar message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BetStar.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetStar} message BetStar message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BetStar.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.time);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified BetStar message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.BetStar.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IBetStar} message BetStar message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                BetStar.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a BetStar message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetStar} BetStar
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BetStar.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.BetStar();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.time = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a BetStar message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetStar} BetStar
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BetStar.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a BetStar message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                BetStar.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a BetStar message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.BetStar} BetStar
                                 */
                                BetStar.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.BetStar)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.BetStar();
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a BetStar message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.BetStar} message BetStar
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                BetStar.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    return object;
                                };

                                /**
                                 * Converts this BetStar to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.BetStar
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                BetStar.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return BetStar;
                            })();

                            message.GainServerLotteryInfo = (function() {

                                /**
                                 * Properties of a GainServerLotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainServerLotteryInfo
                                 */

                                /**
                                 * Constructs a new GainServerLotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainServerLotteryInfo.
                                 * @implements IGainServerLotteryInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerLotteryInfo=} [properties] Properties to set
                                 */
                                function GainServerLotteryInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new GainServerLotteryInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerLotteryInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo} GainServerLotteryInfo instance
                                 */
                                GainServerLotteryInfo.create = function create(properties) {
                                    return new GainServerLotteryInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainServerLotteryInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerLotteryInfo} message GainServerLotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainServerLotteryInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainServerLotteryInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerLotteryInfo} message GainServerLotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainServerLotteryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainServerLotteryInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo} GainServerLotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainServerLotteryInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainServerLotteryInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo} GainServerLotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainServerLotteryInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainServerLotteryInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainServerLotteryInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainServerLotteryInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo} GainServerLotteryInfo
                                 */
                                GainServerLotteryInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo)
                                        return object;
                                    return new $root.com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo();
                                };

                                /**
                                 * Creates a plain object from a GainServerLotteryInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo} message GainServerLotteryInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainServerLotteryInfo.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this GainServerLotteryInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerLotteryInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainServerLotteryInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainServerLotteryInfo;
                            })();

                            message.ServerLotteryInfo = (function() {

                                /**
                                 * Properties of a ServerLotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IServerLotteryInfo
                                 * @property {number|null} [state] ServerLotteryInfo state
                                 * @property {number|Long|null} [time] ServerLotteryInfo time
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IBetInfo|null} [betInfo] ServerLotteryInfo betInfo
                                 * @property {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null} [historyInfo] ServerLotteryInfo historyInfo
                                 */

                                /**
                                 * Constructs a new ServerLotteryInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ServerLotteryInfo.
                                 * @implements IServerLotteryInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerLotteryInfo=} [properties] Properties to set
                                 */
                                function ServerLotteryInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ServerLotteryInfo state.
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @instance
                                 */
                                ServerLotteryInfo.prototype.state = 0;

                                /**
                                 * ServerLotteryInfo time.
                                 * @member {number|Long} time
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @instance
                                 */
                                ServerLotteryInfo.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * ServerLotteryInfo betInfo.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IBetInfo|null|undefined} betInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @instance
                                 */
                                ServerLotteryInfo.prototype.betInfo = null;

                                /**
                                 * ServerLotteryInfo historyInfo.
                                 * @member {com.aoo.chess.comms.protocol.proto.message.IHistoryInfo|null|undefined} historyInfo
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @instance
                                 */
                                ServerLotteryInfo.prototype.historyInfo = null;

                                /**
                                 * Creates a new ServerLotteryInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerLotteryInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo} ServerLotteryInfo instance
                                 */
                                ServerLotteryInfo.create = function create(properties) {
                                    return new ServerLotteryInfo(properties);
                                };

                                /**
                                 * Encodes the specified ServerLotteryInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerLotteryInfo} message ServerLotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerLotteryInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.encode(message.betInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo"))
                                        $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.encode(message.historyInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerLotteryInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerLotteryInfo} message ServerLotteryInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerLotteryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerLotteryInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo} ServerLotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerLotteryInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.state = reader.int32();
                                            break;
                                        case 2:
                                            message.time = reader.int64();
                                            break;
                                        case 3:
                                            message.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.decode(reader, reader.uint32());
                                            break;
                                        case 4:
                                            message.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerLotteryInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo} ServerLotteryInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerLotteryInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerLotteryInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerLotteryInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                            return "time: integer|Long expected";
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.verify(message.betInfo);
                                        if (error)
                                            return "betInfo." + error;
                                    }
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo")) {
                                        var error = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.verify(message.historyInfo);
                                        if (error)
                                            return "historyInfo." + error;
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ServerLotteryInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo} ServerLotteryInfo
                                 */
                                ServerLotteryInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo();
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.time != null)
                                        if ($util.Long)
                                            (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                        else if (typeof object.time === "string")
                                            message.time = parseInt(object.time, 10);
                                        else if (typeof object.time === "number")
                                            message.time = object.time;
                                        else if (typeof object.time === "object")
                                            message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                                    if (object.betInfo != null) {
                                        if (typeof object.betInfo !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo.betInfo: object expected");
                                        message.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.fromObject(object.betInfo);
                                    }
                                    if (object.historyInfo != null) {
                                        if (typeof object.historyInfo !== "object")
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo.historyInfo: object expected");
                                        message.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.fromObject(object.historyInfo);
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerLotteryInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo} message ServerLotteryInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerLotteryInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.state = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.time = options.longs === String ? "0" : 0;
                                        object.betInfo = null;
                                        object.historyInfo = null;
                                    }
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.time != null && message.hasOwnProperty("time"))
                                        if (typeof message.time === "number")
                                            object.time = options.longs === String ? String(message.time) : message.time;
                                        else
                                            object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                                    if (message.betInfo != null && message.hasOwnProperty("betInfo"))
                                        object.betInfo = $root.com.aoo.chess.comms.protocol.proto.message.BetInfo.toObject(message.betInfo, options);
                                    if (message.historyInfo != null && message.hasOwnProperty("historyInfo"))
                                        object.historyInfo = $root.com.aoo.chess.comms.protocol.proto.message.HistoryInfo.toObject(message.historyInfo, options);
                                    return object;
                                };

                                /**
                                 * Converts this ServerLotteryInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerLotteryInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerLotteryInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ServerLotteryInfo;
                            })();

                            message.PlayerMail = (function() {

                                /**
                                 * Properties of a PlayerMail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerMail
                                 * @property {number|null} [id] PlayerMail id
                                 * @property {string|null} [title] PlayerMail title
                                 * @property {string|null} [context] PlayerMail context
                                 * @property {string|null} [attach] PlayerMail attach
                                 * @property {number|null} [state] PlayerMail state
                                 * @property {number|Long|null} [createTime] PlayerMail createTime
                                 */

                                /**
                                 * Constructs a new PlayerMail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerMail.
                                 * @implements IPlayerMail
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMail=} [properties] Properties to set
                                 */
                                function PlayerMail(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerMail id.
                                 * @member {number} id
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.id = 0;

                                /**
                                 * PlayerMail title.
                                 * @member {string} title
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.title = "";

                                /**
                                 * PlayerMail context.
                                 * @member {string} context
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.context = "";

                                /**
                                 * PlayerMail attach.
                                 * @member {string} attach
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.attach = "";

                                /**
                                 * PlayerMail state.
                                 * @member {number} state
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.state = 0;

                                /**
                                 * PlayerMail createTime.
                                 * @member {number|Long} createTime
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 */
                                PlayerMail.prototype.createTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                                /**
                                 * Creates a new PlayerMail instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMail=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMail} PlayerMail instance
                                 */
                                PlayerMail.create = function create(properties) {
                                    return new PlayerMail(properties);
                                };

                                /**
                                 * Encodes the specified PlayerMail message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMail.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMail} message PlayerMail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMail.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.context);
                                    if (message.attach != null && message.hasOwnProperty("attach"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.attach);
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
                                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.createTime);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerMail message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMail.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMail} message PlayerMail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMail.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerMail message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMail} PlayerMail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMail.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.int32();
                                            break;
                                        case 2:
                                            message.title = reader.string();
                                            break;
                                        case 3:
                                            message.context = reader.string();
                                            break;
                                        case 4:
                                            message.attach = reader.string();
                                            break;
                                        case 5:
                                            message.state = reader.int32();
                                            break;
                                        case 6:
                                            message.createTime = reader.int64();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerMail message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMail} PlayerMail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMail.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerMail message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerMail.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        if (!$util.isInteger(message.id))
                                            return "id: integer expected";
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        if (!$util.isString(message.title))
                                            return "title: string expected";
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        if (!$util.isString(message.context))
                                            return "context: string expected";
                                    if (message.attach != null && message.hasOwnProperty("attach"))
                                        if (!$util.isString(message.attach))
                                            return "attach: string expected";
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        if (!$util.isInteger(message.state))
                                            return "state: integer expected";
                                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                                        if (!$util.isInteger(message.createTime) && !(message.createTime && $util.isInteger(message.createTime.low) && $util.isInteger(message.createTime.high)))
                                            return "createTime: integer|Long expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerMail message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMail} PlayerMail
                                 */
                                PlayerMail.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail();
                                    if (object.id != null)
                                        message.id = object.id | 0;
                                    if (object.title != null)
                                        message.title = String(object.title);
                                    if (object.context != null)
                                        message.context = String(object.context);
                                    if (object.attach != null)
                                        message.attach = String(object.attach);
                                    if (object.state != null)
                                        message.state = object.state | 0;
                                    if (object.createTime != null)
                                        if ($util.Long)
                                            (message.createTime = $util.Long.fromValue(object.createTime)).unsigned = false;
                                        else if (typeof object.createTime === "string")
                                            message.createTime = parseInt(object.createTime, 10);
                                        else if (typeof object.createTime === "number")
                                            message.createTime = object.createTime;
                                        else if (typeof object.createTime === "object")
                                            message.createTime = new $util.LongBits(object.createTime.low >>> 0, object.createTime.high >>> 0).toNumber();
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerMail message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerMail} message PlayerMail
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerMail.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.id = 0;
                                        object.title = "";
                                        object.context = "";
                                        object.attach = "";
                                        object.state = 0;
                                        if ($util.Long) {
                                            var long = new $util.Long(0, 0, false);
                                            object.createTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                        } else
                                            object.createTime = options.longs === String ? "0" : 0;
                                    }
                                    if (message.id != null && message.hasOwnProperty("id"))
                                        object.id = message.id;
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        object.title = message.title;
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        object.context = message.context;
                                    if (message.attach != null && message.hasOwnProperty("attach"))
                                        object.attach = message.attach;
                                    if (message.state != null && message.hasOwnProperty("state"))
                                        object.state = message.state;
                                    if (message.createTime != null && message.hasOwnProperty("createTime"))
                                        if (typeof message.createTime === "number")
                                            object.createTime = options.longs === String ? String(message.createTime) : message.createTime;
                                        else
                                            object.createTime = options.longs === String ? $util.Long.prototype.toString.call(message.createTime) : options.longs === Number ? new $util.LongBits(message.createTime.low >>> 0, message.createTime.high >>> 0).toNumber() : message.createTime;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerMail to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMail
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerMail.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerMail;
                            })();

                            message.MailList = (function() {

                                /**
                                 * Properties of a MailList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IMailList
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerMail>|null} [mails] MailList mails
                                 */

                                /**
                                 * Constructs a new MailList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a MailList.
                                 * @implements IMailList
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMailList=} [properties] Properties to set
                                 */
                                function MailList(properties) {
                                    this.mails = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * MailList mails.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerMail>} mails
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @instance
                                 */
                                MailList.prototype.mails = $util.emptyArray;

                                /**
                                 * Creates a new MailList instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMailList=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MailList} MailList instance
                                 */
                                MailList.create = function create(properties) {
                                    return new MailList(properties);
                                };

                                /**
                                 * Encodes the specified MailList message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.MailList.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMailList} message MailList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MailList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.mails != null && message.mails.length)
                                        for (var i = 0; i < message.mails.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail.encode(message.mails[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified MailList message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.MailList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IMailList} message MailList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                MailList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a MailList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MailList} MailList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MailList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.MailList();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.mails && message.mails.length))
                                                message.mails = [];
                                            message.mails.push($root.com.aoo.chess.comms.protocol.proto.message.PlayerMail.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a MailList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MailList} MailList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                MailList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a MailList message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                MailList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.mails != null && message.hasOwnProperty("mails")) {
                                        if (!Array.isArray(message.mails))
                                            return "mails: array expected";
                                        for (var i = 0; i < message.mails.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail.verify(message.mails[i]);
                                            if (error)
                                                return "mails." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a MailList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.MailList} MailList
                                 */
                                MailList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.MailList)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.MailList();
                                    if (object.mails) {
                                        if (!Array.isArray(object.mails))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.MailList.mails: array expected");
                                        message.mails = [];
                                        for (var i = 0; i < object.mails.length; ++i) {
                                            if (typeof object.mails[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.MailList.mails: object expected");
                                            message.mails[i] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail.fromObject(object.mails[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a MailList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.MailList} message MailList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                MailList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.mails = [];
                                    if (message.mails && message.mails.length) {
                                        object.mails = [];
                                        for (var j = 0; j < message.mails.length; ++j)
                                            object.mails[j] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMail.toObject(message.mails[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this MailList to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.MailList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                MailList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return MailList;
                            })();

                            message.SendMailMessage = (function() {

                                /**
                                 * Properties of a SendMailMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface ISendMailMessage
                                 * @property {Array.<number>|null} [players] SendMailMessage players
                                 * @property {string|null} [title] SendMailMessage title
                                 * @property {string|null} [context] SendMailMessage context
                                 * @property {string|null} [attack] SendMailMessage attack
                                 */

                                /**
                                 * Constructs a new SendMailMessage.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a SendMailMessage.
                                 * @implements ISendMailMessage
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendMailMessage=} [properties] Properties to set
                                 */
                                function SendMailMessage(properties) {
                                    this.players = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * SendMailMessage players.
                                 * @member {Array.<number>} players
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @instance
                                 */
                                SendMailMessage.prototype.players = $util.emptyArray;

                                /**
                                 * SendMailMessage title.
                                 * @member {string} title
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @instance
                                 */
                                SendMailMessage.prototype.title = "";

                                /**
                                 * SendMailMessage context.
                                 * @member {string} context
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @instance
                                 */
                                SendMailMessage.prototype.context = "";

                                /**
                                 * SendMailMessage attack.
                                 * @member {string} attack
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @instance
                                 */
                                SendMailMessage.prototype.attack = "";

                                /**
                                 * Creates a new SendMailMessage instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendMailMessage=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendMailMessage} SendMailMessage instance
                                 */
                                SendMailMessage.create = function create(properties) {
                                    return new SendMailMessage(properties);
                                };

                                /**
                                 * Encodes the specified SendMailMessage message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.SendMailMessage.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendMailMessage} message SendMailMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                SendMailMessage.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.players != null && message.players.length) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                        for (var i = 0; i < message.players.length; ++i)
                                            writer.int32(message.players[i]);
                                        writer.ldelim();
                                    }
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.context);
                                    if (message.attack != null && message.hasOwnProperty("attack"))
                                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.attack);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified SendMailMessage message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.SendMailMessage.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ISendMailMessage} message SendMailMessage message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                SendMailMessage.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a SendMailMessage message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendMailMessage} SendMailMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                SendMailMessage.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.SendMailMessage();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.players && message.players.length))
                                                message.players = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.players.push(reader.int32());
                                            } else
                                                message.players.push(reader.int32());
                                            break;
                                        case 2:
                                            message.title = reader.string();
                                            break;
                                        case 3:
                                            message.context = reader.string();
                                            break;
                                        case 4:
                                            message.attack = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a SendMailMessage message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendMailMessage} SendMailMessage
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                SendMailMessage.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a SendMailMessage message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                SendMailMessage.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.players != null && message.hasOwnProperty("players")) {
                                        if (!Array.isArray(message.players))
                                            return "players: array expected";
                                        for (var i = 0; i < message.players.length; ++i)
                                            if (!$util.isInteger(message.players[i]))
                                                return "players: integer[] expected";
                                    }
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        if (!$util.isString(message.title))
                                            return "title: string expected";
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        if (!$util.isString(message.context))
                                            return "context: string expected";
                                    if (message.attack != null && message.hasOwnProperty("attack"))
                                        if (!$util.isString(message.attack))
                                            return "attack: string expected";
                                    return null;
                                };

                                /**
                                 * Creates a SendMailMessage message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.SendMailMessage} SendMailMessage
                                 */
                                SendMailMessage.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.SendMailMessage)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.SendMailMessage();
                                    if (object.players) {
                                        if (!Array.isArray(object.players))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.SendMailMessage.players: array expected");
                                        message.players = [];
                                        for (var i = 0; i < object.players.length; ++i)
                                            message.players[i] = object.players[i] | 0;
                                    }
                                    if (object.title != null)
                                        message.title = String(object.title);
                                    if (object.context != null)
                                        message.context = String(object.context);
                                    if (object.attack != null)
                                        message.attack = String(object.attack);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a SendMailMessage message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.SendMailMessage} message SendMailMessage
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                SendMailMessage.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.players = [];
                                    if (options.defaults) {
                                        object.title = "";
                                        object.context = "";
                                        object.attack = "";
                                    }
                                    if (message.players && message.players.length) {
                                        object.players = [];
                                        for (var j = 0; j < message.players.length; ++j)
                                            object.players[j] = message.players[j];
                                    }
                                    if (message.title != null && message.hasOwnProperty("title"))
                                        object.title = message.title;
                                    if (message.context != null && message.hasOwnProperty("context"))
                                        object.context = message.context;
                                    if (message.attack != null && message.hasOwnProperty("attack"))
                                        object.attack = message.attack;
                                    return object;
                                };

                                /**
                                 * Converts this SendMailMessage to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.SendMailMessage
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                SendMailMessage.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return SendMailMessage;
                            })();

                            message.DeleteMail = (function() {

                                /**
                                 * Properties of a DeleteMail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IDeleteMail
                                 * @property {Array.<number>|null} [mailIds] DeleteMail mailIds
                                 */

                                /**
                                 * Constructs a new DeleteMail.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a DeleteMail.
                                 * @implements IDeleteMail
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDeleteMail=} [properties] Properties to set
                                 */
                                function DeleteMail(properties) {
                                    this.mailIds = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * DeleteMail mailIds.
                                 * @member {Array.<number>} mailIds
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @instance
                                 */
                                DeleteMail.prototype.mailIds = $util.emptyArray;

                                /**
                                 * Creates a new DeleteMail instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDeleteMail=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DeleteMail} DeleteMail instance
                                 */
                                DeleteMail.create = function create(properties) {
                                    return new DeleteMail(properties);
                                };

                                /**
                                 * Encodes the specified DeleteMail message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.DeleteMail.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDeleteMail} message DeleteMail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeleteMail.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.mailIds != null && message.mailIds.length) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                        for (var i = 0; i < message.mailIds.length; ++i)
                                            writer.int32(message.mailIds[i]);
                                        writer.ldelim();
                                    }
                                    return writer;
                                };

                                /**
                                 * Encodes the specified DeleteMail message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.DeleteMail.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IDeleteMail} message DeleteMail message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                DeleteMail.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a DeleteMail message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DeleteMail} DeleteMail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeleteMail.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.DeleteMail();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.mailIds && message.mailIds.length))
                                                message.mailIds = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.mailIds.push(reader.int32());
                                            } else
                                                message.mailIds.push(reader.int32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a DeleteMail message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DeleteMail} DeleteMail
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DeleteMail.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a DeleteMail message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                DeleteMail.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.mailIds != null && message.hasOwnProperty("mailIds")) {
                                        if (!Array.isArray(message.mailIds))
                                            return "mailIds: array expected";
                                        for (var i = 0; i < message.mailIds.length; ++i)
                                            if (!$util.isInteger(message.mailIds[i]))
                                                return "mailIds: integer[] expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a DeleteMail message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.DeleteMail} DeleteMail
                                 */
                                DeleteMail.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.DeleteMail)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.DeleteMail();
                                    if (object.mailIds) {
                                        if (!Array.isArray(object.mailIds))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.DeleteMail.mailIds: array expected");
                                        message.mailIds = [];
                                        for (var i = 0; i < object.mailIds.length; ++i)
                                            message.mailIds[i] = object.mailIds[i] | 0;
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a DeleteMail message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.DeleteMail} message DeleteMail
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                DeleteMail.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.mailIds = [];
                                    if (message.mailIds && message.mailIds.length) {
                                        object.mailIds = [];
                                        for (var j = 0; j < message.mailIds.length; ++j)
                                            object.mailIds[j] = message.mailIds[j];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this DeleteMail to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.DeleteMail
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                DeleteMail.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return DeleteMail;
                            })();

                            message.PlayerMallInfo = (function() {

                                /**
                                 * Properties of a PlayerMallInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerMallInfo
                                 * @property {number|null} [mallId] PlayerMallInfo mallId
                                 * @property {number|null} [buyCount] PlayerMallInfo buyCount
                                 */

                                /**
                                 * Constructs a new PlayerMallInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerMallInfo.
                                 * @implements IPlayerMallInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo=} [properties] Properties to set
                                 */
                                function PlayerMallInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerMallInfo mallId.
                                 * @member {number} mallId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @instance
                                 */
                                PlayerMallInfo.prototype.mallId = 0;

                                /**
                                 * PlayerMallInfo buyCount.
                                 * @member {number} buyCount
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @instance
                                 */
                                PlayerMallInfo.prototype.buyCount = 0;

                                /**
                                 * Creates a new PlayerMallInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo} PlayerMallInfo instance
                                 */
                                PlayerMallInfo.create = function create(properties) {
                                    return new PlayerMallInfo(properties);
                                };

                                /**
                                 * Encodes the specified PlayerMallInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo} message PlayerMallInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMallInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.mallId != null && message.hasOwnProperty("mallId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mallId);
                                    if (message.buyCount != null && message.hasOwnProperty("buyCount"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buyCount);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerMallInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo} message PlayerMallInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMallInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerMallInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo} PlayerMallInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMallInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.mallId = reader.int32();
                                            break;
                                        case 2:
                                            message.buyCount = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerMallInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo} PlayerMallInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMallInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerMallInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerMallInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.mallId != null && message.hasOwnProperty("mallId"))
                                        if (!$util.isInteger(message.mallId))
                                            return "mallId: integer expected";
                                    if (message.buyCount != null && message.hasOwnProperty("buyCount"))
                                        if (!$util.isInteger(message.buyCount))
                                            return "buyCount: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a PlayerMallInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo} PlayerMallInfo
                                 */
                                PlayerMallInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo();
                                    if (object.mallId != null)
                                        message.mallId = object.mallId | 0;
                                    if (object.buyCount != null)
                                        message.buyCount = object.buyCount | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerMallInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo} message PlayerMallInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerMallInfo.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.mallId = 0;
                                        object.buyCount = 0;
                                    }
                                    if (message.mallId != null && message.hasOwnProperty("mallId"))
                                        object.mallId = message.mallId;
                                    if (message.buyCount != null && message.hasOwnProperty("buyCount"))
                                        object.buyCount = message.buyCount;
                                    return object;
                                };

                                /**
                                 * Converts this PlayerMallInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerMallInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerMallInfo;
                            })();

                            message.PlayerMallInfoList = (function() {

                                /**
                                 * Properties of a PlayerMallInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IPlayerMallInfoList
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo>|null} [infos] PlayerMallInfoList infos
                                 */

                                /**
                                 * Constructs a new PlayerMallInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a PlayerMallInfoList.
                                 * @implements IPlayerMallInfoList
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfoList=} [properties] Properties to set
                                 */
                                function PlayerMallInfoList(properties) {
                                    this.infos = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PlayerMallInfoList infos.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfo>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @instance
                                 */
                                PlayerMallInfoList.prototype.infos = $util.emptyArray;

                                /**
                                 * Creates a new PlayerMallInfoList instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfoList=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList} PlayerMallInfoList instance
                                 */
                                PlayerMallInfoList.create = function create(properties) {
                                    return new PlayerMallInfoList(properties);
                                };

                                /**
                                 * Encodes the specified PlayerMallInfoList message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfoList} message PlayerMallInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMallInfoList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified PlayerMallInfoList message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IPlayerMallInfoList} message PlayerMallInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                PlayerMallInfoList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a PlayerMallInfoList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList} PlayerMallInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMallInfoList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a PlayerMallInfoList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList} PlayerMallInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PlayerMallInfoList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a PlayerMallInfoList message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                PlayerMallInfoList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a PlayerMallInfoList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList} PlayerMallInfoList
                                 */
                                PlayerMallInfoList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList();
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.fromObject(object.infos[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a PlayerMallInfoList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList} message PlayerMallInfoList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                PlayerMallInfoList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.infos = [];
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.PlayerMallInfo.toObject(message.infos[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this PlayerMallInfoList to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.PlayerMallInfoList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                PlayerMallInfoList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return PlayerMallInfoList;
                            })();

                            message.GainServerInfo = (function() {

                                /**
                                 * Properties of a GainServerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IGainServerInfo
                                 */

                                /**
                                 * Constructs a new GainServerInfo.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a GainServerInfo.
                                 * @implements IGainServerInfo
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerInfo=} [properties] Properties to set
                                 */
                                function GainServerInfo(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Creates a new GainServerInfo instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerInfo=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerInfo} GainServerInfo instance
                                 */
                                GainServerInfo.create = function create(properties) {
                                    return new GainServerInfo(properties);
                                };

                                /**
                                 * Encodes the specified GainServerInfo message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainServerInfo.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerInfo} message GainServerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainServerInfo.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified GainServerInfo message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.GainServerInfo.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IGainServerInfo} message GainServerInfo message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                GainServerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a GainServerInfo message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerInfo} GainServerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainServerInfo.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.GainServerInfo();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a GainServerInfo message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerInfo} GainServerInfo
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                GainServerInfo.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a GainServerInfo message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                GainServerInfo.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    return null;
                                };

                                /**
                                 * Creates a GainServerInfo message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.GainServerInfo} GainServerInfo
                                 */
                                GainServerInfo.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.GainServerInfo)
                                        return object;
                                    return new $root.com.aoo.chess.comms.protocol.proto.message.GainServerInfo();
                                };

                                /**
                                 * Creates a plain object from a GainServerInfo message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.GainServerInfo} message GainServerInfo
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                GainServerInfo.toObject = function toObject() {
                                    return {};
                                };

                                /**
                                 * Converts this GainServerInfo to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.GainServerInfo
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                GainServerInfo.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return GainServerInfo;
                            })();

                            message.ServerInfoMsg = (function() {

                                /**
                                 * Properties of a ServerInfoMsg.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IServerInfoMsg
                                 * @property {number|null} [serverId] 服务器编号
                                 * @property {number|null} [serverGroup] 服务器组
                                 * @property {string|null} [serverName] 服务器名称
                                 * @property {number|null} [serverType] 服务器类型
                                 * @property {string|null} [ip] 外网IP
                                 * @property {number|null} [port] 外网端口
                                 * @property {string|null} [localIp] 内网地址
                                 * @property {number|null} [localPort] 内网端口
                                 */

                                /**
                                 * Constructs a new ServerInfoMsg.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ServerInfoMsg.
                                 * @implements IServerInfoMsg
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg=} [properties] Properties to set
                                 */
                                function ServerInfoMsg(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * 服务器编号
                                 * @member {number} serverId
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.serverId = 0;

                                /**
                                 * 服务器组
                                 * @member {number} serverGroup
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.serverGroup = 0;

                                /**
                                 * 服务器名称
                                 * @member {string} serverName
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.serverName = "";

                                /**
                                 * 服务器类型
                                 * @member {number} serverType
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.serverType = 0;

                                /**
                                 * 外网IP
                                 * @member {string} ip
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.ip = "";

                                /**
                                 * 外网端口
                                 * @member {number} port
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.port = 0;

                                /**
                                 * 内网地址
                                 * @member {string} localIp
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.localIp = "";

                                /**
                                 * 内网端口
                                 * @member {number} localPort
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 */
                                ServerInfoMsg.prototype.localPort = 0;

                                /**
                                 * Creates a new ServerInfoMsg instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg} ServerInfoMsg instance
                                 */
                                ServerInfoMsg.create = function create(properties) {
                                    return new ServerInfoMsg(properties);
                                };

                                /**
                                 * Encodes the specified ServerInfoMsg message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg} message ServerInfoMsg message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerInfoMsg.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.serverId);
                                    if (message.serverGroup != null && message.hasOwnProperty("serverGroup"))
                                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.serverGroup);
                                    if (message.serverName != null && message.hasOwnProperty("serverName"))
                                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.serverName);
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.serverType);
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.ip);
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.port);
                                    if (message.localIp != null && message.hasOwnProperty("localIp"))
                                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.localIp);
                                    if (message.localPort != null && message.hasOwnProperty("localPort"))
                                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.localPort);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerInfoMsg message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg} message ServerInfoMsg message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerInfoMsg.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerInfoMsg message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg} ServerInfoMsg
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerInfoMsg.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.serverId = reader.int32();
                                            break;
                                        case 2:
                                            message.serverGroup = reader.int32();
                                            break;
                                        case 3:
                                            message.serverName = reader.string();
                                            break;
                                        case 4:
                                            message.serverType = reader.int32();
                                            break;
                                        case 5:
                                            message.ip = reader.string();
                                            break;
                                        case 6:
                                            message.port = reader.int32();
                                            break;
                                        case 7:
                                            message.localIp = reader.string();
                                            break;
                                        case 8:
                                            message.localPort = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerInfoMsg message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg} ServerInfoMsg
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerInfoMsg.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerInfoMsg message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerInfoMsg.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        if (!$util.isInteger(message.serverId))
                                            return "serverId: integer expected";
                                    if (message.serverGroup != null && message.hasOwnProperty("serverGroup"))
                                        if (!$util.isInteger(message.serverGroup))
                                            return "serverGroup: integer expected";
                                    if (message.serverName != null && message.hasOwnProperty("serverName"))
                                        if (!$util.isString(message.serverName))
                                            return "serverName: string expected";
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        if (!$util.isInteger(message.serverType))
                                            return "serverType: integer expected";
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        if (!$util.isString(message.ip))
                                            return "ip: string expected";
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        if (!$util.isInteger(message.port))
                                            return "port: integer expected";
                                    if (message.localIp != null && message.hasOwnProperty("localIp"))
                                        if (!$util.isString(message.localIp))
                                            return "localIp: string expected";
                                    if (message.localPort != null && message.hasOwnProperty("localPort"))
                                        if (!$util.isInteger(message.localPort))
                                            return "localPort: integer expected";
                                    return null;
                                };

                                /**
                                 * Creates a ServerInfoMsg message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg} ServerInfoMsg
                                 */
                                ServerInfoMsg.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg();
                                    if (object.serverId != null)
                                        message.serverId = object.serverId | 0;
                                    if (object.serverGroup != null)
                                        message.serverGroup = object.serverGroup | 0;
                                    if (object.serverName != null)
                                        message.serverName = String(object.serverName);
                                    if (object.serverType != null)
                                        message.serverType = object.serverType | 0;
                                    if (object.ip != null)
                                        message.ip = String(object.ip);
                                    if (object.port != null)
                                        message.port = object.port | 0;
                                    if (object.localIp != null)
                                        message.localIp = String(object.localIp);
                                    if (object.localPort != null)
                                        message.localPort = object.localPort | 0;
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerInfoMsg message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg} message ServerInfoMsg
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerInfoMsg.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults) {
                                        object.serverId = 0;
                                        object.serverGroup = 0;
                                        object.serverName = "";
                                        object.serverType = 0;
                                        object.ip = "";
                                        object.port = 0;
                                        object.localIp = "";
                                        object.localPort = 0;
                                    }
                                    if (message.serverId != null && message.hasOwnProperty("serverId"))
                                        object.serverId = message.serverId;
                                    if (message.serverGroup != null && message.hasOwnProperty("serverGroup"))
                                        object.serverGroup = message.serverGroup;
                                    if (message.serverName != null && message.hasOwnProperty("serverName"))
                                        object.serverName = message.serverName;
                                    if (message.serverType != null && message.hasOwnProperty("serverType"))
                                        object.serverType = message.serverType;
                                    if (message.ip != null && message.hasOwnProperty("ip"))
                                        object.ip = message.ip;
                                    if (message.port != null && message.hasOwnProperty("port"))
                                        object.port = message.port;
                                    if (message.localIp != null && message.hasOwnProperty("localIp"))
                                        object.localIp = message.localIp;
                                    if (message.localPort != null && message.hasOwnProperty("localPort"))
                                        object.localPort = message.localPort;
                                    return object;
                                };

                                /**
                                 * Converts this ServerInfoMsg to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerInfoMsg.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ServerInfoMsg;
                            })();

                            message.ServerInfoList = (function() {

                                /**
                                 * Properties of a ServerInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @interface IServerInfoList
                                 * @property {Array.<com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg>|null} [infos] ServerInfoList infos
                                 */

                                /**
                                 * Constructs a new ServerInfoList.
                                 * @memberof com.aoo.chess.comms.protocol.proto.message
                                 * @classdesc Represents a ServerInfoList.
                                 * @implements IServerInfoList
                                 * @constructor
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoList=} [properties] Properties to set
                                 */
                                function ServerInfoList(properties) {
                                    this.infos = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ServerInfoList infos.
                                 * @member {Array.<com.aoo.chess.comms.protocol.proto.message.IServerInfoMsg>} infos
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @instance
                                 */
                                ServerInfoList.prototype.infos = $util.emptyArray;

                                /**
                                 * Creates a new ServerInfoList instance using the specified properties.
                                 * @function create
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoList=} [properties] Properties to set
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoList} ServerInfoList instance
                                 */
                                ServerInfoList.create = function create(properties) {
                                    return new ServerInfoList(properties);
                                };

                                /**
                                 * Encodes the specified ServerInfoList message. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerInfoList.verify|verify} messages.
                                 * @function encode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoList} message ServerInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerInfoList.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.infos != null && message.infos.length)
                                        for (var i = 0; i < message.infos.length; ++i)
                                            $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified ServerInfoList message, length delimited. Does not implicitly {@link com.aoo.chess.comms.protocol.proto.message.ServerInfoList.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.IServerInfoList} message ServerInfoList message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                ServerInfoList.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a ServerInfoList message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoList} ServerInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerInfoList.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoList();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.infos && message.infos.length))
                                                message.infos = [];
                                            message.infos.push($root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a ServerInfoList message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoList} ServerInfoList
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ServerInfoList.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a ServerInfoList message.
                                 * @function verify
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                ServerInfoList.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.infos != null && message.hasOwnProperty("infos")) {
                                        if (!Array.isArray(message.infos))
                                            return "infos: array expected";
                                        for (var i = 0; i < message.infos.length; ++i) {
                                            var error = $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.verify(message.infos[i]);
                                            if (error)
                                                return "infos." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a ServerInfoList message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {com.aoo.chess.comms.protocol.proto.message.ServerInfoList} ServerInfoList
                                 */
                                ServerInfoList.fromObject = function fromObject(object) {
                                    if (object instanceof $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoList)
                                        return object;
                                    var message = new $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoList();
                                    if (object.infos) {
                                        if (!Array.isArray(object.infos))
                                            throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerInfoList.infos: array expected");
                                        message.infos = [];
                                        for (var i = 0; i < object.infos.length; ++i) {
                                            if (typeof object.infos[i] !== "object")
                                                throw TypeError(".com.aoo.chess.comms.protocol.proto.message.ServerInfoList.infos: object expected");
                                            message.infos[i] = $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.fromObject(object.infos[i]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a ServerInfoList message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @static
                                 * @param {com.aoo.chess.comms.protocol.proto.message.ServerInfoList} message ServerInfoList
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                ServerInfoList.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.arrays || options.defaults)
                                        object.infos = [];
                                    if (message.infos && message.infos.length) {
                                        object.infos = [];
                                        for (var j = 0; j < message.infos.length; ++j)
                                            object.infos[j] = $root.com.aoo.chess.comms.protocol.proto.message.ServerInfoMsg.toObject(message.infos[j], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this ServerInfoList to JSON.
                                 * @function toJSON
                                 * @memberof com.aoo.chess.comms.protocol.proto.message.ServerInfoList
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                ServerInfoList.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return ServerInfoList;
                            })();

                            return message;
                        })();

                        return proto;
                    })();

                    return protocol;
                })();

                return comms;
            })();

            return chess;
        })();

        return aoo;
    })();

    return com;
})();